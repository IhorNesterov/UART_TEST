
build/debug/UART_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003da4  08003da4  00004da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08003da8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
  8 .bss          00002534  20000014  20000014  00005014  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002548  20002548  00005014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 11 .comment      00000039  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001639c  00000000  00000000  0000507d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311e  00000000  00000000  0001b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a5ce  00000000  00000000  0001e537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c03  00000000  00000000  00029a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128d8  00000000  00000000  0002a64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000055c6  00000000  00000000  0003cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000026a8  00000000  00000000  000424ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000153  00000000  00000000  00044b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b80c 	b.w	80001b8 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f003 fbf4 	bl	8003994 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__aeabi_idiv0>:
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003c50 	.word	0x08003c50

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08003c50 	.word	0x08003c50

080001fc <NOS_PixelColor_SetColor>:
#include "NOS_BaseColors.h"

void NOS_PixelColor_SetColor(PixelColor* color,uint8_t R,uint8_t G,uint8_t B)
{
    color->R = R;
 80001fc:	7001      	strb	r1, [r0, #0]
    color->G = G;
 80001fe:	7042      	strb	r2, [r0, #1]
    color->B = B;
 8000200:	7083      	strb	r3, [r0, #2]
}
 8000202:	4770      	bx	lr

08000204 <NOS_GetBaseColor>:

PixelColor NOS_GetBaseColor(NOS_BaseColors color)
{
 8000204:	b500      	push	{lr}
 8000206:	b083      	sub	sp, #12
    PixelColor result = {0,0,0};
 8000208:	2300      	movs	r3, #0
 800020a:	f88d 3000 	strb.w	r3, [sp]
 800020e:	f88d 3001 	strb.w	r3, [sp, #1]
 8000212:	f88d 3002 	strb.w	r3, [sp, #2]
    
    switch(color)
 8000216:	280b      	cmp	r0, #11
 8000218:	d80d      	bhi.n	8000236 <NOS_GetBaseColor+0x32>
 800021a:	e8df f000 	tbb	[pc, r0]
 800021e:	2206      	.short	0x2206
 8000220:	3e373029 	.word	0x3e373029
 8000224:	5a534c45 	.word	0x5a534c45
 8000228:	6861      	.short	0x6861
    {
        case BLUE:
            NOS_PixelColor_SetColor(&result,0x00,0x00,0xFF);
 800022a:	23ff      	movs	r3, #255	@ 0xff
 800022c:	2200      	movs	r2, #0
 800022e:	4611      	mov	r1, r2
 8000230:	4668      	mov	r0, sp
 8000232:	f7ff ffe3 	bl	80001fc <NOS_PixelColor_SetColor>
        case VIOLET:
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
        break;
        
    }
    return result;
 8000236:	9b00      	ldr	r3, [sp, #0]
 8000238:	f8ad 3004 	strh.w	r3, [sp, #4]
 800023c:	0c1b      	lsrs	r3, r3, #16
 800023e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000242:	2000      	movs	r0, #0
 8000244:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000248:	f363 0007 	bfi	r0, r3, #0, #8
 800024c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000250:	f363 200f 	bfi	r0, r3, #8, #8
 8000254:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000258:	f363 4017 	bfi	r0, r3, #16, #8
 800025c:	b003      	add	sp, #12
 800025e:	f85d fb04 	ldr.w	pc, [sp], #4
            NOS_PixelColor_SetColor(&result,0x00,0x7F,0xFF);
 8000262:	23ff      	movs	r3, #255	@ 0xff
 8000264:	227f      	movs	r2, #127	@ 0x7f
 8000266:	2100      	movs	r1, #0
 8000268:	4668      	mov	r0, sp
 800026a:	f7ff ffc7 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 800026e:	e7e2      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0xFF);
 8000270:	23ff      	movs	r3, #255	@ 0xff
 8000272:	461a      	mov	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	4668      	mov	r0, sp
 8000278:	f7ff ffc0 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 800027c:	e7db      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x7F);
 800027e:	237f      	movs	r3, #127	@ 0x7f
 8000280:	22ff      	movs	r2, #255	@ 0xff
 8000282:	2100      	movs	r1, #0
 8000284:	4668      	mov	r0, sp
 8000286:	f7ff ffb9 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 800028a:	e7d4      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x00);
 800028c:	2300      	movs	r3, #0
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	4619      	mov	r1, r3
 8000292:	4668      	mov	r0, sp
 8000294:	f7ff ffb2 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 8000298:	e7cd      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0xFF,0x00);
 800029a:	2300      	movs	r3, #0
 800029c:	22ff      	movs	r2, #255	@ 0xff
 800029e:	217f      	movs	r1, #127	@ 0x7f
 80002a0:	4668      	mov	r0, sp
 80002a2:	f7ff ffab 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002a6:	e7c6      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0xFF,0x00);
 80002a8:	2300      	movs	r3, #0
 80002aa:	22ff      	movs	r2, #255	@ 0xff
 80002ac:	4611      	mov	r1, r2
 80002ae:	4668      	mov	r0, sp
 80002b0:	f7ff ffa4 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002b4:	e7bf      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x7F,0x00);
 80002b6:	2300      	movs	r3, #0
 80002b8:	227f      	movs	r2, #127	@ 0x7f
 80002ba:	21ff      	movs	r1, #255	@ 0xff
 80002bc:	4668      	mov	r0, sp
 80002be:	f7ff ff9d 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002c2:	e7b8      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x00);
 80002c4:	2300      	movs	r3, #0
 80002c6:	461a      	mov	r2, r3
 80002c8:	21ff      	movs	r1, #255	@ 0xff
 80002ca:	4668      	mov	r0, sp
 80002cc:	f7ff ff96 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002d0:	e7b1      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x7F);
 80002d2:	237f      	movs	r3, #127	@ 0x7f
 80002d4:	2200      	movs	r2, #0
 80002d6:	21ff      	movs	r1, #255	@ 0xff
 80002d8:	4668      	mov	r0, sp
 80002da:	f7ff ff8f 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002de:	e7aa      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0xFF);
 80002e0:	23ff      	movs	r3, #255	@ 0xff
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	4668      	mov	r0, sp
 80002e8:	f7ff ff88 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002ec:	e7a3      	b.n	8000236 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
 80002ee:	23ff      	movs	r3, #255	@ 0xff
 80002f0:	2200      	movs	r2, #0
 80002f2:	217f      	movs	r1, #127	@ 0x7f
 80002f4:	4668      	mov	r0, sp
 80002f6:	f7ff ff81 	bl	80001fc <NOS_PixelColor_SetColor>
        break;
 80002fa:	e79c      	b.n	8000236 <NOS_GetBaseColor+0x32>

080002fc <NOS_Button_Init>:
#include "NOS_Button.h"


void NOS_Button_Init(NOS_Button* button,GPIO_PinState openLvl)
{
    button->pressed = false;
 80002fc:	2300      	movs	r3, #0
 80002fe:	7003      	strb	r3, [r0, #0]
    button->released = false;
 8000300:	7043      	strb	r3, [r0, #1]
    button->pressDone = false;
 8000302:	7083      	strb	r3, [r0, #2]
    button->openLevel = openLvl;
 8000304:	7101      	strb	r1, [r0, #4]

    button->timer = 0;
 8000306:	6083      	str	r3, [r0, #8]
    button->pressedTime = 0;
 8000308:	60c3      	str	r3, [r0, #12]
    button->releasedTime = 0;
 800030a:	6103      	str	r3, [r0, #16]
    button->lastDoneTime = 0;
 800030c:	6143      	str	r3, [r0, #20]
}
 800030e:	4770      	bx	lr

08000310 <NOS_Button_CheckPressDone>:
}

bool NOS_Button_CheckPressDone(NOS_Button* button)
{
    return button->pressDone;
}
 8000310:	7880      	ldrb	r0, [r0, #2]
 8000312:	4770      	bx	lr

08000314 <NOS_Button_PressDoneHandler>:
    return button->pressed;
}

void NOS_Button_PressDoneHandler(NOS_Button* button)
{
    button->pressed = false;
 8000314:	2300      	movs	r3, #0
 8000316:	7003      	strb	r3, [r0, #0]
    button->released = false;
 8000318:	7043      	strb	r3, [r0, #1]
    button->pressDone = false;
 800031a:	7083      	strb	r3, [r0, #2]
    button->stopped = true;
 800031c:	2201      	movs	r2, #1
 800031e:	70c2      	strb	r2, [r0, #3]

    button->timer = 0;
 8000320:	6083      	str	r3, [r0, #8]
    button->pressedTime = 0;
 8000322:	60c3      	str	r3, [r0, #12]
    button->releasedTime = 0;
 8000324:	6103      	str	r3, [r0, #16]
    button->lastDoneTime = 0;
 8000326:	6143      	str	r3, [r0, #20]
}
 8000328:	4770      	bx	lr

0800032a <NOS_GPIO_PinInit>:
#include "NOS_GPIO.h"

void NOS_GPIO_PinInit(GPIO_PIN* gpin,GPIO_TypeDef* port,uint16_t pin,GPIO_PIN_Mode mode)
{
 800032a:	b500      	push	{lr}
 800032c:	b087      	sub	sp, #28
 800032e:	4684      	mov	ip, r0
 8000330:	4608      	mov	r0, r1
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	2300      	movs	r3, #0
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9302      	str	r3, [sp, #8]
 8000338:	9303      	str	r3, [sp, #12]
 800033a:	9304      	str	r3, [sp, #16]
 800033c:	9305      	str	r3, [sp, #20]
    gpin->Port = port;
 800033e:	f8cc 1000 	str.w	r1, [ip]
    gpin->Pin = pin;
 8000342:	f8ac 2004 	strh.w	r2, [ip, #4]
    GPIO_InitStruct.Pin = pin;
 8000346:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2201      	movs	r2, #1
 800034a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000350:	a901      	add	r1, sp, #4
 8000352:	f001 fed9 	bl	8002108 <HAL_GPIO_Init>
 8000356:	b007      	add	sp, #28
 8000358:	f85d fb04 	ldr.w	pc, [sp], #4

0800035c <NOS_Math_GetSinValue>:
}

int NOS_Math_GetSinValue(SinValue* value)
{
    return value->value;
}
 800035c:	6800      	ldr	r0, [r0, #0]
 800035e:	4770      	bx	lr

08000360 <NOS_Math_SinValue_Handler>:

void NOS_Math_SinValue_Handler(SinValue* value)
{
    if(value->rise)
 8000360:	7c03      	ldrb	r3, [r0, #16]
 8000362:	b163      	cbz	r3, 800037e <NOS_Math_SinValue_Handler+0x1e>
    {
        value->value += value->increment;
 8000364:	6803      	ldr	r3, [r0, #0]
 8000366:	68c2      	ldr	r2, [r0, #12]
 8000368:	4413      	add	r3, r2
 800036a:	6003      	str	r3, [r0, #0]
        if(value->value > value->maxValue)
 800036c:	6882      	ldr	r2, [r0, #8]
 800036e:	4293      	cmp	r3, r2
 8000370:	dd13      	ble.n	800039a <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->maxValue;
 8000372:	6002      	str	r2, [r0, #0]
            value->rise = false;
 8000374:	2300      	movs	r3, #0
 8000376:	7403      	strb	r3, [r0, #16]
            value->fall = true;
 8000378:	2301      	movs	r3, #1
 800037a:	7443      	strb	r3, [r0, #17]
 800037c:	4770      	bx	lr
        }
    }
    else if(value->fall)
 800037e:	7c43      	ldrb	r3, [r0, #17]
 8000380:	b15b      	cbz	r3, 800039a <NOS_Math_SinValue_Handler+0x3a>
    {
        value->value -= value->increment;
 8000382:	6803      	ldr	r3, [r0, #0]
 8000384:	68c2      	ldr	r2, [r0, #12]
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	6003      	str	r3, [r0, #0]
        if(value->value < value->minValue)
 800038a:	6842      	ldr	r2, [r0, #4]
 800038c:	4293      	cmp	r3, r2
 800038e:	da04      	bge.n	800039a <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->minValue;
 8000390:	6002      	str	r2, [r0, #0]
            value->fall = false;
 8000392:	2300      	movs	r3, #0
 8000394:	7443      	strb	r3, [r0, #17]
            value->rise = true;
 8000396:	2301      	movs	r3, #1
 8000398:	7403      	strb	r3, [r0, #16]
        }
    }
}
 800039a:	4770      	bx	lr

0800039c <NOS_Math_SinValue_Init>:

void NOS_Math_SinValue_Init(SinValue* value,int minValue,int maxValue,int increment)
{
    value->value = minValue;
 800039c:	6001      	str	r1, [r0, #0]
    value->minValue = minValue;
 800039e:	6041      	str	r1, [r0, #4]
    value->maxValue = maxValue;
 80003a0:	6082      	str	r2, [r0, #8]
    value->rise = true;
 80003a2:	2201      	movs	r2, #1
 80003a4:	7402      	strb	r2, [r0, #16]
    value->fall = false;
 80003a6:	2200      	movs	r2, #0
 80003a8:	7442      	strb	r2, [r0, #17]
    value->increment = increment;
 80003aa:	60c3      	str	r3, [r0, #12]
 80003ac:	4770      	bx	lr
	...

080003b0 <NOS_Strip_Uart_ParseCommand>:
    NOS_Short tempShort;
    int currPos = 4;
    int tempInt1,tempInt2;
    uint8_t r,g,b;

    if(command != NULL)
 80003b0:	2900      	cmp	r1, #0
 80003b2:	f000 812c 	beq.w	800060e <NOS_Strip_Uart_ParseCommand+0x25e>
{
 80003b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ba:	b08f      	sub	sp, #60	@ 0x3c
 80003bc:	4605      	mov	r5, r0
 80003be:	460c      	mov	r4, r1
    {
            switch (command[3])
 80003c0:	78cb      	ldrb	r3, [r1, #3]
 80003c2:	3b20      	subs	r3, #32
 80003c4:	2b31      	cmp	r3, #49	@ 0x31
 80003c6:	f200 811e 	bhi.w	8000606 <NOS_Strip_Uart_ParseCommand+0x256>
 80003ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80003ce:	0032      	.short	0x0032
 80003d0:	011c011c 	.word	0x011c011c
 80003d4:	011c011c 	.word	0x011c011c
 80003d8:	011c011c 	.word	0x011c011c
 80003dc:	011c011c 	.word	0x011c011c
 80003e0:	011c011c 	.word	0x011c011c
 80003e4:	011c011c 	.word	0x011c011c
 80003e8:	011c011c 	.word	0x011c011c
 80003ec:	0034011c 	.word	0x0034011c
 80003f0:	00650044 	.word	0x00650044
 80003f4:	011c0077 	.word	0x011c0077
 80003f8:	011c007b 	.word	0x011c007b
 80003fc:	011c011c 	.word	0x011c011c
 8000400:	011c011c 	.word	0x011c011c
 8000404:	011c011c 	.word	0x011c011c
 8000408:	011c011c 	.word	0x011c011c
 800040c:	011c011c 	.word	0x011c011c
 8000410:	011c011c 	.word	0x011c011c
 8000414:	011c011c 	.word	0x011c011c
 8000418:	011c011c 	.word	0x011c011c
 800041c:	011c011c 	.word	0x011c011c
 8000420:	011c011c 	.word	0x011c011c
 8000424:	011c011c 	.word	0x011c011c
 8000428:	011c011c 	.word	0x011c011c
 800042c:	00e4011c 	.word	0x00e4011c
 8000430:	00e6      	.short	0x00e6
 8000432:	4877      	ldr	r0, [pc, #476]	@ (8000610 <NOS_Strip_Uart_ParseCommand+0x260>)
 8000434:	e0e8      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>
                return "ready!";
            
            case SET_ONE_PIXEL_COLOR_COMMAND:

                //pixelPos 
                tempShort.bytes[1] = command[4];
 8000436:	790b      	ldrb	r3, [r1, #4]
 8000438:	f04f 0600 	mov.w	r6, #0
 800043c:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[5];
 8000440:	794b      	ldrb	r3, [r1, #5]
 8000442:	f363 0607 	bfi	r6, r3, #0, #8
                tempInt1 = tempShort.data;

                //color
                r = command[6];
                g = command[7];
                b = command[8];
 8000446:	7a0b      	ldrb	r3, [r1, #8]

                NOS_WS2812B_Strip_SetPixel(strip,tempInt1,r,g,b);
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	79cb      	ldrb	r3, [r1, #7]
 800044c:	798a      	ldrb	r2, [r1, #6]
 800044e:	b2b1      	uxth	r1, r6
 8000450:	f000 f9fc 	bl	800084c <NOS_WS2812B_Strip_SetPixel>
                break;
 8000454:	e0d8      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>

            case SET_ROW_PIXEL_COLOR_COMMAND:

                //pixelPos
                tempShort.bytes[1] = command[currPos++];
 8000456:	790b      	ldrb	r3, [r1, #4]
 8000458:	f04f 0600 	mov.w	r6, #0
 800045c:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 8000460:	794b      	ldrb	r3, [r1, #5]
 8000462:	f363 0607 	bfi	r6, r3, #0, #8
                tempInt1 = tempShort.data;
 8000466:	b2b7      	uxth	r7, r6

                //pixelCount
                tempShort.bytes[1] = command[currPos++];
 8000468:	798b      	ldrb	r3, [r1, #6]
 800046a:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 800046e:	79cb      	ldrb	r3, [r1, #7]
 8000470:	f363 0607 	bfi	r6, r3, #0, #8
                tempInt2 = tempShort.data;
 8000474:	b2b6      	uxth	r6, r6

                //color
                r = command[currPos++];
 8000476:	f891 9008 	ldrb.w	r9, [r1, #8]
                g = command[currPos++];
 800047a:	f891 8009 	ldrb.w	r8, [r1, #9]
                b = command[currPos++];
 800047e:	7a8c      	ldrb	r4, [r1, #10]

                //fill in row
                for(int i = tempInt1; i < tempInt2; i++)
 8000480:	e007      	b.n	8000492 <NOS_Strip_Uart_ParseCommand+0xe2>
                {
                    NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 8000482:	9400      	str	r4, [sp, #0]
 8000484:	4643      	mov	r3, r8
 8000486:	464a      	mov	r2, r9
 8000488:	4639      	mov	r1, r7
 800048a:	4628      	mov	r0, r5
 800048c:	f000 f9de 	bl	800084c <NOS_WS2812B_Strip_SetPixel>
                for(int i = tempInt1; i < tempInt2; i++)
 8000490:	3701      	adds	r7, #1
 8000492:	42b7      	cmp	r7, r6
 8000494:	dbf5      	blt.n	8000482 <NOS_Strip_Uart_ParseCommand+0xd2>
 8000496:	e0b7      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>
                break;

            case SET_ALL_PIXEL_ONE_COLOR_COMMAND:

                //color
                r = command[currPos++];
 8000498:	f891 8004 	ldrb.w	r8, [r1, #4]
                g = command[currPos++];
 800049c:	794f      	ldrb	r7, [r1, #5]
                b = command[currPos++];
 800049e:	798e      	ldrb	r6, [r1, #6]

                //fill all pixels
                for(int i = 0; i < strip->pixelCount; i++)
 80004a0:	2400      	movs	r4, #0
 80004a2:	e007      	b.n	80004b4 <NOS_Strip_Uart_ParseCommand+0x104>
                {
                    NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 80004a4:	9600      	str	r6, [sp, #0]
 80004a6:	463b      	mov	r3, r7
 80004a8:	4642      	mov	r2, r8
 80004aa:	4621      	mov	r1, r4
 80004ac:	4628      	mov	r0, r5
 80004ae:	f000 f9cd 	bl	800084c <NOS_WS2812B_Strip_SetPixel>
                for(int i = 0; i < strip->pixelCount; i++)
 80004b2:	3401      	adds	r4, #1
 80004b4:	68ab      	ldr	r3, [r5, #8]
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	dcf4      	bgt.n	80004a4 <NOS_Strip_Uart_ParseCommand+0xf4>
 80004ba:	e0a5      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>

                break;

            case SET_BRIGHT_COMMAND:

                NOS_WS2812B_Strip_SetBright(strip,command[currPos++]);
 80004bc:	7909      	ldrb	r1, [r1, #4]
 80004be:	f000 fa3a 	bl	8000936 <NOS_WS2812B_Strip_SetBright>

                break;
 80004c2:	e0a1      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>

            case SET_ALL_PIXEL_COMMAND:

                //Pixel count
                tempShort.bytes[1] = command[currPos++];
 80004c4:	790b      	ldrb	r3, [r1, #4]
 80004c6:	f04f 0600 	mov.w	r6, #0
 80004ca:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80004ce:	794b      	ldrb	r3, [r1, #5]
 80004d0:	f363 0607 	bfi	r6, r3, #0, #8
                tempInt1 = tempShort.data;
 80004d4:	fa1f f986 	uxth.w	r9, r6

                if(tempInt1 <= strip->pixelCount)
 80004d8:	6883      	ldr	r3, [r0, #8]
 80004da:	454b      	cmp	r3, r9
 80004dc:	da57      	bge.n	800058e <NOS_Strip_Uart_ParseCommand+0x1de>
                tempShort.bytes[0] = command[currPos++];
 80004de:	2706      	movs	r7, #6
                    }
                }

            case SET_BREATHE_EFFECT_COMMAND:

                uint8_t pos = command[currPos++];
 80004e0:	1c7b      	adds	r3, r7, #1
 80004e2:	f814 8007 	ldrb.w	r8, [r4, r7]

                tempShort.bytes[1] = command[currPos++];
 80004e6:	1cba      	adds	r2, r7, #2
 80004e8:	5ce3      	ldrb	r3, [r4, r3]
 80004ea:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80004ee:	1cfb      	adds	r3, r7, #3
 80004f0:	5ca2      	ldrb	r2, [r4, r2]
 80004f2:	f362 0607 	bfi	r6, r2, #0, #8
                uint16_t speed = tempShort.data;
 80004f6:	fa1f f986 	uxth.w	r9, r6

                tempShort.bytes[1] = command[currPos++];
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	5ce3      	ldrb	r3, [r4, r3]
 80004fe:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 8000502:	1d7b      	adds	r3, r7, #5
 8000504:	5ca2      	ldrb	r2, [r4, r2]
 8000506:	f362 0607 	bfi	r6, r2, #0, #8
                uint16_t step = tempShort.data;
 800050a:	fa1f fa86 	uxth.w	sl, r6

                tempShort.bytes[1] = command[currPos++];
 800050e:	1dba      	adds	r2, r7, #6
 8000510:	5ce3      	ldrb	r3, [r4, r3]
 8000512:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	5ca2      	ldrb	r2, [r4, r2]
 800051a:	f362 0607 	bfi	r6, r2, #0, #8
                uint16_t min = tempShort.data;
 800051e:	fa1f fb86 	uxth.w	fp, r6

                tempShort.bytes[1] = command[currPos++];
 8000522:	3708      	adds	r7, #8
 8000524:	5ce3      	ldrb	r3, [r4, r3]
 8000526:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 800052a:	5de3      	ldrb	r3, [r4, r7]
 800052c:	f363 0607 	bfi	r6, r3, #0, #8
                uint16_t max = tempShort.data;
 8000530:	b2b6      	uxth	r6, r6

                Effect_Struct tempEffect = {0};
 8000532:	af06      	add	r7, sp, #24
 8000534:	2420      	movs	r4, #32
 8000536:	4622      	mov	r2, r4
 8000538:	2100      	movs	r1, #0
 800053a:	4638      	mov	r0, r7
 800053c:	f003 f9fd 	bl	800393a <memset>
                tempEffect.effectId = EFFECT_BREATHE_ID;
 8000540:	f88d 4037 	strb.w	r4, [sp, #55]	@ 0x37
                NOS_WS2812B_Strip_Effect_Breathe_Init(&tempEffect,speed,step,min,max);
 8000544:	9600      	str	r6, [sp, #0]
 8000546:	465b      	mov	r3, fp
 8000548:	4652      	mov	r2, sl
 800054a:	4649      	mov	r1, r9
 800054c:	4638      	mov	r0, r7
 800054e:	f000 f9f4 	bl	800093a <NOS_WS2812B_Strip_Effect_Breathe_Init>
                NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect,pos);
 8000552:	f8cd 8014 	str.w	r8, [sp, #20]
 8000556:	466c      	mov	r4, sp
 8000558:	ae09      	add	r6, sp, #36	@ 0x24
 800055a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	6833      	ldr	r3, [r6, #0]
 8000560:	6023      	str	r3, [r4, #0]
 8000562:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000566:	4628      	mov	r0, r5
 8000568:	f000 fa6d 	bl	8000a46 <NOS_WS2812B_Strip_Effects_UpdateEffect>

                break;
 800056c:	e04c      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>
                        r = command[currPos++];
 800056e:	1c7b      	adds	r3, r7, #1
 8000570:	5de2      	ldrb	r2, [r4, r7]
                        g = command[currPos++];
 8000572:	1cb9      	adds	r1, r7, #2
                        b = command[currPos++];
 8000574:	5c61      	ldrb	r1, [r4, r1]
                        NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 8000576:	9100      	str	r1, [sp, #0]
 8000578:	5ce3      	ldrb	r3, [r4, r3]
 800057a:	3703      	adds	r7, #3
 800057c:	4641      	mov	r1, r8
 800057e:	4628      	mov	r0, r5
 8000580:	f000 f964 	bl	800084c <NOS_WS2812B_Strip_SetPixel>
                    for(int i = 0; i < tempInt1; i++)
 8000584:	f108 0801 	add.w	r8, r8, #1
 8000588:	45c8      	cmp	r8, r9
 800058a:	dbf0      	blt.n	800056e <NOS_Strip_Uart_ParseCommand+0x1be>
 800058c:	e7a8      	b.n	80004e0 <NOS_Strip_Uart_ParseCommand+0x130>
 800058e:	f04f 0800 	mov.w	r8, #0
                tempShort.bytes[0] = command[currPos++];
 8000592:	2706      	movs	r7, #6
 8000594:	e7f8      	b.n	8000588 <NOS_Strip_Uart_ParseCommand+0x1d8>
            switch (command[3])
 8000596:	2704      	movs	r7, #4
 8000598:	e7a2      	b.n	80004e0 <NOS_Strip_Uart_ParseCommand+0x130>

                case SET_RAINBOW_EFFECT_COMMAND:

                pos = command[currPos++];
 800059a:	f891 8004 	ldrb.w	r8, [r1, #4]

                tempShort.bytes[1] = command[currPos++];
 800059e:	794b      	ldrb	r3, [r1, #5]
 80005a0:	f04f 0600 	mov.w	r6, #0
 80005a4:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80005a8:	798b      	ldrb	r3, [r1, #6]
 80005aa:	f363 0607 	bfi	r6, r3, #0, #8
                speed = tempShort.data;
 80005ae:	b2b1      	uxth	r1, r6

                tempShort.bytes[1] = command[currPos++];
 80005b0:	79e3      	ldrb	r3, [r4, #7]
 80005b2:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80005b6:	7a23      	ldrb	r3, [r4, #8]
 80005b8:	f363 0607 	bfi	r6, r3, #0, #8
                step = tempShort.data;
 80005bc:	b2b2      	uxth	r2, r6

                tempShort.bytes[1] = command[currPos++];
 80005be:	7a63      	ldrb	r3, [r4, #9]
 80005c0:	f363 260f 	bfi	r6, r3, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80005c4:	7aa3      	ldrb	r3, [r4, #10]
 80005c6:	f363 0607 	bfi	r6, r3, #0, #8
                min = tempShort.data;
 80005ca:	b2b3      	uxth	r3, r6

                tempShort.bytes[1] = command[currPos++];
 80005cc:	7ae0      	ldrb	r0, [r4, #11]
 80005ce:	f360 260f 	bfi	r6, r0, #8, #8
                tempShort.bytes[0] = command[currPos++];
 80005d2:	7b20      	ldrb	r0, [r4, #12]
 80005d4:	f360 0607 	bfi	r6, r0, #0, #8
                max = tempShort.data;
 80005d8:	b2b6      	uxth	r6, r6

                tempEffect.effectId = EFFECT_RAINBOW_ID;
 80005da:	2021      	movs	r0, #33	@ 0x21
 80005dc:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
                NOS_WS2812B_Strip_Effect_Rainbow_Init(&tempEffect,speed,step,min,max);
 80005e0:	af06      	add	r7, sp, #24
 80005e2:	9600      	str	r6, [sp, #0]
 80005e4:	4638      	mov	r0, r7
 80005e6:	f000 f9dd 	bl	80009a4 <NOS_WS2812B_Strip_Effect_Rainbow_Init>
                NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect,pos);
 80005ea:	f8cd 8014 	str.w	r8, [sp, #20]
 80005ee:	466c      	mov	r4, sp
 80005f0:	ae09      	add	r6, sp, #36	@ 0x24
 80005f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	6833      	ldr	r3, [r6, #0]
 80005f8:	6023      	str	r3, [r4, #0]
 80005fa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80005fe:	4628      	mov	r0, r5
 8000600:	f000 fa21 	bl	8000a46 <NOS_WS2812B_Strip_Effects_UpdateEffect>
                break;
            }


        }
}
 8000604:	e000      	b.n	8000608 <NOS_Strip_Uart_ParseCommand+0x258>
                return false;
 8000606:	2000      	movs	r0, #0
}
 8000608:	b00f      	add	sp, #60	@ 0x3c
 800060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800060e:	4770      	bx	lr
 8000610:	08003c68 	.word	0x08003c68

08000614 <NOS_TimeEvent_Init>:
    }
}

void NOS_TimeEvent_Init(NOS_TimeEvent *timeEvent, uint32_t ticksToEnable)
{
    if (timeEvent != NULL)
 8000614:	b120      	cbz	r0, 8000620 <NOS_TimeEvent_Init+0xc>
    {
        timeEvent->enabled = false;
 8000616:	2200      	movs	r2, #0
 8000618:	7142      	strb	r2, [r0, #5]
        timeEvent->stopped = false;
 800061a:	7102      	strb	r2, [r0, #4]
        timeEvent->ticksToEnable = ticksToEnable;
 800061c:	6001      	str	r1, [r0, #0]
        timeEvent->ticks = 0;
 800061e:	6082      	str	r2, [r0, #8]
    }
}
 8000620:	4770      	bx	lr

08000622 <NOS_TimeEvent_TickHandler>:
    timeEvent->ticks = 0;
}

void NOS_TimeEvent_TickHandler(NOS_TimeEvent *timeEvent)
{
    timeEvent->ticks++;
 8000622:	6883      	ldr	r3, [r0, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	6083      	str	r3, [r0, #8]
    if (!timeEvent->stopped)
 8000628:	7902      	ldrb	r2, [r0, #4]
 800062a:	b922      	cbnz	r2, 8000636 <NOS_TimeEvent_TickHandler+0x14>
    {
        if (timeEvent->ticks >= timeEvent->ticksToEnable)
 800062c:	6802      	ldr	r2, [r0, #0]
 800062e:	4293      	cmp	r3, r2
 8000630:	d301      	bcc.n	8000636 <NOS_TimeEvent_TickHandler+0x14>
        {
            timeEvent->enabled = true;
 8000632:	2301      	movs	r3, #1
 8000634:	7143      	strb	r3, [r0, #5]
        }
    }
}
 8000636:	4770      	bx	lr

08000638 <NOS_TimeEvent_Check>:

bool NOS_TimeEvent_Check(NOS_TimeEvent *timeEvent)
{
 8000638:	4603      	mov	r3, r0
    if (timeEvent->enabled && !timeEvent->stopped)
 800063a:	7940      	ldrb	r0, [r0, #5]
 800063c:	b110      	cbz	r0, 8000644 <NOS_TimeEvent_Check+0xc>
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	b103      	cbz	r3, 8000644 <NOS_TimeEvent_Check+0xc>
    {
        return true;
    }
    return false;
 8000642:	2000      	movs	r0, #0
}
 8000644:	4770      	bx	lr

08000646 <NOS_TimeEvent_FinishEvent>:

void NOS_TimeEvent_FinishEvent(NOS_TimeEvent *timeEvent)
{
    timeEvent->enabled = false;
 8000646:	2300      	movs	r3, #0
 8000648:	7143      	strb	r3, [r0, #5]
    timeEvent->ticks = 0;
 800064a:	6083      	str	r3, [r0, #8]
 800064c:	4770      	bx	lr

0800064e <NOS_UART_ReceiveReset>:
#include "NOS_UART.h"

NOS_UART_Struct* NOS_UART_ReceiveReset(NOS_UART_Struct* data)
{
    data->lastMessageSize = data->currMessageLenght;
 800064e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000652:	6899      	ldr	r1, [r3, #8]
 8000654:	84d9      	strh	r1, [r3, #38]	@ 0x26
    data->rx_buff_ptr = data->rx_buff;
 8000656:	6198      	str	r0, [r3, #24]
    data->currMessageLenght = 0;
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
    data->rx_flag = true;
 800065c:	2201      	movs	r2, #1
 800065e:	719a      	strb	r2, [r3, #6]
    return data;
}
 8000660:	4770      	bx	lr

08000662 <NOS_UART_ContinueReceive>:

NOS_UART_Struct* NOS_UART_ContinueReceive(NOS_UART_Struct* data)
{
 8000662:	b410      	push	{r4}
    data->rx_buff[data->currMessageLenght] = *data->rx_buff_ptr;
 8000664:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 8000668:	6991      	ldr	r1, [r2, #24]
 800066a:	f811 cb01 	ldrb.w	ip, [r1], #1
 800066e:	6894      	ldr	r4, [r2, #8]
 8000670:	f800 c004 	strb.w	ip, [r0, r4]
    ++data->rx_buff_ptr;
 8000674:	6191      	str	r1, [r2, #24]
    return data;
}
 8000676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800067a:	4770      	bx	lr

0800067c <NOS_UART_ReceiveAbort>:

void NOS_UART_ReceiveAbort(NOS_UART_Struct* data)
{
    for(int i = 0; i < BUFFER_SIZE; i++)
 800067c:	2300      	movs	r3, #0
 800067e:	e002      	b.n	8000686 <NOS_UART_ReceiveAbort+0xa>
    {
        data->rx_buff[i] = 0;
 8000680:	2200      	movs	r2, #0
 8000682:	54c2      	strb	r2, [r0, r3]
    for(int i = 0; i < BUFFER_SIZE; i++)
 8000684:	3301      	adds	r3, #1
 8000686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800068a:	dbf9      	blt.n	8000680 <NOS_UART_ReceiveAbort+0x4>
    }

    data->index = 0;
 800068c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8000690:	2300      	movs	r3, #0
 8000692:	6003      	str	r3, [r0, #0]
    data->currMessageLenght = 0;
 8000694:	6083      	str	r3, [r0, #8]
    data->expectedMessageLenght = 0;
 8000696:	60c3      	str	r3, [r0, #12]
    data->startReceive = false;
 8000698:	7403      	strb	r3, [r0, #16]
    data->endReceive = false;
 800069a:	7443      	strb	r3, [r0, #17]
    data->bufferCommand = false;
 800069c:	7483      	strb	r3, [r0, #18]
    data->rx_flag = false;
 800069e:	7183      	strb	r3, [r0, #6]
    data->receiveTimeAbort = 40;
 80006a0:	2328      	movs	r3, #40	@ 0x28
 80006a2:	6203      	str	r3, [r0, #32]
}
 80006a4:	4770      	bx	lr

080006a6 <NOS_UART_Timer_Handler>:

void NOS_UART_Timer_Handler(NOS_UART_Struct* uart)
{
 80006a6:	b510      	push	{r4, lr}
 80006a8:	4604      	mov	r4, r0
        if(uart->startReceive && !uart->receiveCheck)
 80006aa:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80006ae:	7c1b      	ldrb	r3, [r3, #16]
 80006b0:	b15b      	cbz	r3, 80006ca <NOS_UART_Timer_Handler+0x24>
 80006b2:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80006b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80006ba:	b933      	cbnz	r3, 80006ca <NOS_UART_Timer_Handler+0x24>
        {
            uart->receiveTime = 0;
 80006bc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
            uart->receiveCheck = true;
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        }

        if(uart->receiveCheck && uart->receiveTime > uart->receiveTimeAbort)
 80006ca:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80006ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80006d2:	b12b      	cbz	r3, 80006e0 <NOS_UART_Timer_Handler+0x3a>
 80006d4:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80006d8:	69da      	ldr	r2, [r3, #28]
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dc05      	bgt.n	80006ec <NOS_UART_Timer_Handler+0x46>
            uart->receiveTime = 0;
            uart->receiveCheck = false;
            NOS_UART_ReceiveAbort(uart);
        }
          
        uart->receiveTime++;
 80006e0:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 80006e4:	69e3      	ldr	r3, [r4, #28]
 80006e6:	3301      	adds	r3, #1
 80006e8:	61e3      	str	r3, [r4, #28]
}
 80006ea:	bd10      	pop	{r4, pc}
            uart->receiveTime = 0;
 80006ec:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
            uart->receiveCheck = false;
 80006f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            NOS_UART_ReceiveAbort(uart);
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff ffbf 	bl	800067c <NOS_UART_ReceiveAbort>
 80006fe:	e7ef      	b.n	80006e0 <NOS_UART_Timer_Handler+0x3a>

08000700 <NOS_UART_ReceiveHandler>:

void NOS_UART_ReceiveHandler(NOS_UART_Struct* data,UART_HandleTypeDef* uart)
{
 8000700:	b510      	push	{r4, lr}
 8000702:	460c      	mov	r4, r1

    data->rx_buff_ptr = &data->rx_buff[data->currMessageLenght];
 8000704:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000708:	6899      	ldr	r1, [r3, #8]
 800070a:	1842      	adds	r2, r0, r1
 800070c:	619a      	str	r2, [r3, #24]
    data->fuckBuff[data->fuckIndex] = *data->rx_buff_ptr;
 800070e:	889a      	ldrh	r2, [r3, #4]
 8000710:	f810 e001 	ldrb.w	lr, [r0, r1]
 8000714:	eb00 0c02 	add.w	ip, r0, r2
 8000718:	f88c e800 	strb.w	lr, [ip, #2048]	@ 0x800
    data->fuckIndex++;
 800071c:	3201      	adds	r2, #1
 800071e:	809a      	strh	r2, [r3, #4]

    if((*data->rx_buff_ptr == UART_ADDRESS || *data->rx_buff_ptr == 0x66 || *data->rx_buff_ptr == 0x67 || *data->rx_buff_ptr == 0x64) && !data->startReceive)
 8000720:	5c43      	ldrb	r3, [r0, r1]
 8000722:	3b64      	subs	r3, #100	@ 0x64
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b03      	cmp	r3, #3
 8000728:	d819      	bhi.n	800075e <NOS_UART_ReceiveHandler+0x5e>
 800072a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800072e:	7c1b      	ldrb	r3, [r3, #16]
 8000730:	b9ab      	cbnz	r3, 800075e <NOS_UART_ReceiveHandler+0x5e>
    {
        data->startReceive = true;
 8000732:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 8000736:	f04f 0c01 	mov.w	ip, #1
 800073a:	f882 c010 	strb.w	ip, [r2, #16]
        data->currMessageLenght = 0;
 800073e:	6093      	str	r3, [r2, #8]

        data->fuckIndex = 1;
 8000740:	f8a2 c004 	strh.w	ip, [r2, #4]
        for(int i = 0; i < BUFFER_SIZE; i++)
 8000744:	e005      	b.n	8000752 <NOS_UART_ReceiveHandler+0x52>
        {
            data->fuckBuff[i] = 0;
 8000746:	18c2      	adds	r2, r0, r3
 8000748:	f04f 0c00 	mov.w	ip, #0
 800074c:	f882 c800 	strb.w	ip, [r2, #2048]	@ 0x800
        for(int i = 0; i < BUFFER_SIZE; i++)
 8000750:	3301      	adds	r3, #1
 8000752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000756:	dbf6      	blt.n	8000746 <NOS_UART_ReceiveHandler+0x46>
        }
        data->fuckBuff[0] = *data->rx_buff_ptr; 
 8000758:	5c43      	ldrb	r3, [r0, r1]
 800075a:	f880 3800 	strb.w	r3, [r0, #2048]	@ 0x800
    }

    if(data->startReceive && data->currMessageLenght == 1 && !data->bufferCommand)
 800075e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000762:	7c1a      	ldrb	r2, [r3, #16]
 8000764:	b112      	cbz	r2, 800076c <NOS_UART_ReceiveHandler+0x6c>
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d022      	beq.n	80007b2 <NOS_UART_ReceiveHandler+0xb2>
    {
        data->value.bytes[1] = *data->rx_buff_ptr;
    }

    if(data->startReceive && data->currMessageLenght == 2 && !data->bufferCommand)
 800076c:	b122      	cbz	r2, 8000778 <NOS_UART_ReceiveHandler+0x78>
 800076e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d028      	beq.n	80007ca <NOS_UART_ReceiveHandler+0xca>
        data->value.bytes[0] = *data->rx_buff_ptr;
        data->expectedMessageLenght = data->value.data;
        data->bufferCommand = true;
    }

    if(data->fuckIndex > BUFFER_SIZE)
 8000778:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000782:	d903      	bls.n	800078c <NOS_UART_ReceiveHandler+0x8c>
    {
        data->fuckIndex = 0;
 8000784:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000788:	2100      	movs	r1, #0
 800078a:	8099      	strh	r1, [r3, #4]
    }

    data->currMessageLenght++;
 800078c:	f500 5180 	add.w	r1, r0, #4096	@ 0x1000
 8000790:	688b      	ldr	r3, [r1, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	608b      	str	r3, [r1, #8]

    if(data->startReceive && (data->currMessageLenght == data->expectedMessageLenght) && data->bufferCommand)
 8000796:	b112      	cbz	r2, 800079e <NOS_UART_ReceiveHandler+0x9e>
 8000798:	68ca      	ldr	r2, [r1, #12]
 800079a:	4293      	cmp	r3, r2
 800079c:	d023      	beq.n	80007e6 <NOS_UART_ReceiveHandler+0xe6>
        data->bufferCommand = false;
        data->startReceive = false;
    }
    else
    {
        data = NOS_UART_ContinueReceive(data);
 800079e:	f7ff ff60 	bl	8000662 <NOS_UART_ContinueReceive>
    }
    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
 80007a2:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80007a6:	2201      	movs	r2, #1
 80007a8:	6981      	ldr	r1, [r0, #24]
 80007aa:	4620      	mov	r0, r4
 80007ac:	f003 f85d 	bl	800386a <HAL_UART_Receive_IT>
    
}
 80007b0:	bd10      	pop	{r4, pc}
    if(data->startReceive && data->currMessageLenght == 1 && !data->bufferCommand)
 80007b2:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80007b6:	7c9b      	ldrb	r3, [r3, #18]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1d7      	bne.n	800076c <NOS_UART_ReceiveHandler+0x6c>
        data->value.bytes[1] = *data->rx_buff_ptr;
 80007bc:	f810 c001 	ldrb.w	ip, [r0, r1]
 80007c0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80007c4:	f883 c015 	strb.w	ip, [r3, #21]
 80007c8:	e7d0      	b.n	800076c <NOS_UART_ReceiveHandler+0x6c>
    if(data->startReceive && data->currMessageLenght == 2 && !data->bufferCommand)
 80007ca:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80007ce:	7c9b      	ldrb	r3, [r3, #18]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1d1      	bne.n	8000778 <NOS_UART_ReceiveHandler+0x78>
        data->value.bytes[0] = *data->rx_buff_ptr;
 80007d4:	5c41      	ldrb	r1, [r0, r1]
 80007d6:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80007da:	7519      	strb	r1, [r3, #20]
        data->expectedMessageLenght = data->value.data;
 80007dc:	8a99      	ldrh	r1, [r3, #20]
 80007de:	60d9      	str	r1, [r3, #12]
        data->bufferCommand = true;
 80007e0:	2101      	movs	r1, #1
 80007e2:	7499      	strb	r1, [r3, #18]
 80007e4:	e7c8      	b.n	8000778 <NOS_UART_ReceiveHandler+0x78>
    if(data->startReceive && (data->currMessageLenght == data->expectedMessageLenght) && data->bufferCommand)
 80007e6:	7c8b      	ldrb	r3, [r1, #18]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0d8      	beq.n	800079e <NOS_UART_ReceiveHandler+0x9e>
        data = NOS_UART_ReceiveReset(data);
 80007ec:	f7ff ff2f 	bl	800064e <NOS_UART_ReceiveReset>
        data->bufferCommand = false;
 80007f0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80007f4:	2200      	movs	r2, #0
 80007f6:	749a      	strb	r2, [r3, #18]
        data->startReceive = false;
 80007f8:	741a      	strb	r2, [r3, #16]
 80007fa:	e7d2      	b.n	80007a2 <NOS_UART_ReceiveHandler+0xa2>

080007fc <NOS_UART_CheckReceive>:

bool NOS_UART_CheckReceive(NOS_UART_Struct* data)
{
    return data->rx_flag;   
 80007fc:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
}
 8000800:	7980      	ldrb	r0, [r0, #6]
 8000802:	4770      	bx	lr

08000804 <NOS_UART_GetReceivedData>:

uint8_t* NOS_UART_GetReceivedData(NOS_UART_Struct* data)
{
    return data->fuckBuff;
}
 8000804:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8000808:	4770      	bx	lr

0800080a <NOS_UART_EndReceive>:

void NOS_UART_EndReceive(NOS_UART_Struct* data)
{
    data->rx_flag = false;
 800080a:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800080e:	2300      	movs	r3, #0
 8000810:	7183      	strb	r3, [r0, #6]
}
 8000812:	4770      	bx	lr

08000814 <NOS_WS2812B_Strip_FullInit>:
#include "NOS_BaseColors.h"
#include "WS2812B_Effects.h"

void NOS_WS2812B_Strip_FullInit(WS2812B_Strip* strip,uint8_t* buff,PixelColor* pixels,int lenght)
{
    strip->pixels = pixels;
 8000814:	6042      	str	r2, [r0, #4]
    strip->frameBuffer = buff;
 8000816:	6001      	str	r1, [r0, #0]
    strip->pixelCount = lenght;
 8000818:	6083      	str	r3, [r0, #8]
    strip->bright = 100;
 800081a:	2364      	movs	r3, #100	@ 0x64
 800081c:	60c3      	str	r3, [r0, #12]
    strip->effectsCounter = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	f880 3150 	strb.w	r3, [r0, #336]	@ 0x150
}
 8000824:	4770      	bx	lr

08000826 <NOS_WS2812B_Strip_CoreSetPixel>:

void NOS_WS2812B_Strip_CoreSetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 8000826:	b430      	push	{r4, r5}
    if(strip->frameBuffer != NULL && pixelPos <= strip->pixelCount)
 8000828:	6804      	ldr	r4, [r0, #0]
 800082a:	b16c      	cbz	r4, 8000848 <NOS_WS2812B_Strip_CoreSetPixel+0x22>
 800082c:	6885      	ldr	r5, [r0, #8]
 800082e:	428d      	cmp	r5, r1
 8000830:	db0a      	blt.n	8000848 <NOS_WS2812B_Strip_CoreSetPixel+0x22>
    {
        strip->frameBuffer[pixelPos * 3] = r;
 8000832:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000836:	5462      	strb	r2, [r4, r1]
        strip->frameBuffer[pixelPos * 3 + 1] = g;
 8000838:	6804      	ldr	r4, [r0, #0]
 800083a:	1c4a      	adds	r2, r1, #1
 800083c:	54a3      	strb	r3, [r4, r2]
        strip->frameBuffer[pixelPos * 3 + 2] = b;
 800083e:	6803      	ldr	r3, [r0, #0]
 8000840:	3102      	adds	r1, #2
 8000842:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000846:	545a      	strb	r2, [r3, r1]
    }
}
 8000848:	bc30      	pop	{r4, r5}
 800084a:	4770      	bx	lr

0800084c <NOS_WS2812B_Strip_SetPixel>:

void NOS_WS2812B_Strip_SetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 800084c:	b430      	push	{r4, r5}
    if(strip->pixels != NULL && pixelPos <= strip->pixelCount)
 800084e:	6844      	ldr	r4, [r0, #4]
 8000850:	b16c      	cbz	r4, 800086e <NOS_WS2812B_Strip_SetPixel+0x22>
 8000852:	6885      	ldr	r5, [r0, #8]
 8000854:	428d      	cmp	r5, r1
 8000856:	db0a      	blt.n	800086e <NOS_WS2812B_Strip_SetPixel+0x22>
    {
        strip->pixels[pixelPos].R = r;
 8000858:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800085c:	5462      	strb	r2, [r4, r1]
        strip->pixels[pixelPos].G = g;
 800085e:	6842      	ldr	r2, [r0, #4]
 8000860:	440a      	add	r2, r1
 8000862:	7053      	strb	r3, [r2, #1]
        strip->pixels[pixelPos].B = b;
 8000864:	6843      	ldr	r3, [r0, #4]
 8000866:	440b      	add	r3, r1
 8000868:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800086c:	709a      	strb	r2, [r3, #2]
    }         
}
 800086e:	bc30      	pop	{r4, r5}
 8000870:	4770      	bx	lr
	...

08000874 <NOS_WS2812B_Strip_Update>:
        NOS_WS2812B_Strip_SetPixel(strip,i,0,0,0);
    }
}

void NOS_WS2812B_Strip_Update(WS2812B_Strip* strip)
{
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	ed2d 8b02 	vpush	{d8}
 800087a:	b087      	sub	sp, #28
 800087c:	4605      	mov	r5, r0
    float coef = (float)strip->bright / 100;
 800087e:	edd0 7a03 	vldr	s15, [r0, #12]
 8000882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000886:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000904 <NOS_WS2812B_Strip_Update+0x90>
 800088a:	ee87 8a87 	vdiv.f32	s16, s15, s14
    for(int i = 0; i < strip->pixelCount; i++)
 800088e:	2400      	movs	r4, #0
 8000890:	e030      	b.n	80008f4 <NOS_WS2812B_Strip_Update+0x80>
    {
        uint8_t currR = (float)strip->pixels[i].R * coef;
 8000892:	6869      	ldr	r1, [r5, #4]
 8000894:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000898:	188b      	adds	r3, r1, r2
 800089a:	5c8a      	ldrb	r2, [r1, r2]
 800089c:	ee07 2a90 	vmov	s15, r2
 80008a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80008a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ac:	edcd 7a03 	vstr	s15, [sp, #12]
        uint8_t currG = (float)strip->pixels[i].G * coef;
 80008b0:	785a      	ldrb	r2, [r3, #1]
 80008b2:	ee07 2a90 	vmov	s15, r2
 80008b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 80008be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c2:	edcd 7a04 	vstr	s15, [sp, #16]
        uint8_t currB = (float)strip->pixels[i].B * coef;
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80008d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d8:	edcd 7a05 	vstr	s15, [sp, #20]
 80008dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
        NOS_WS2812B_Strip_CoreSetPixel(strip,i,currR,currG,currB);
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80008e6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80008ea:	4621      	mov	r1, r4
 80008ec:	4628      	mov	r0, r5
 80008ee:	f7ff ff9a 	bl	8000826 <NOS_WS2812B_Strip_CoreSetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 80008f2:	3401      	adds	r4, #1
 80008f4:	68ab      	ldr	r3, [r5, #8]
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	dccb      	bgt.n	8000892 <NOS_WS2812B_Strip_Update+0x1e>
    }

}
 80008fa:	b007      	add	sp, #28
 80008fc:	ecbd 8b02 	vpop	{d8}
 8000900:	bd30      	pop	{r4, r5, pc}
 8000902:	bf00      	nop
 8000904:	42c80000 	.word	0x42c80000

08000908 <NOS_WS2812B_Strip_ColorFill>:
        currPixel++;
    }
}

void NOS_WS2812B_Strip_ColorFill(WS2812B_Strip* strip,PixelColor color)
{
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	4605      	mov	r5, r0
 800090e:	9103      	str	r1, [sp, #12]
    for(int i = 0; i < strip->pixelCount; i++)
 8000910:	2400      	movs	r4, #0
 8000912:	e00b      	b.n	800092c <NOS_WS2812B_Strip_ColorFill+0x24>
    {
        NOS_WS2812B_Strip_SetPixel(strip,i,color.R,color.G,color.B);
 8000914:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800091e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000922:	4621      	mov	r1, r4
 8000924:	4628      	mov	r0, r5
 8000926:	f7ff ff91 	bl	800084c <NOS_WS2812B_Strip_SetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 800092a:	3401      	adds	r4, #1
 800092c:	68ab      	ldr	r3, [r5, #8]
 800092e:	42a3      	cmp	r3, r4
 8000930:	dcf0      	bgt.n	8000914 <NOS_WS2812B_Strip_ColorFill+0xc>
    }
}
 8000932:	b005      	add	sp, #20
 8000934:	bd30      	pop	{r4, r5, pc}

08000936 <NOS_WS2812B_Strip_SetBright>:
    NOS_WS2812B_Strip_SetPixel(strip,pixelPos,color.R,color.G,color.B);
}

void NOS_WS2812B_Strip_SetBright(WS2812B_Strip* strip,uint8_t bright)
{
    strip->bright = bright;
 8000936:	60c1      	str	r1, [r0, #12]
}
 8000938:	4770      	bx	lr

0800093a <NOS_WS2812B_Strip_Effect_Breathe_Init>:

void NOS_WS2812B_Strip_Effect_Breathe_Init(Effect_Struct* effect,uint16_t speed,uint16_t step,uint16_t minValue,uint16_t maxValue)
{
 800093a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093e:	4604      	mov	r4, r0
 8000940:	460f      	mov	r7, r1
 8000942:	4615      	mov	r5, r2
 8000944:	461e      	mov	r6, r3
 8000946:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        NOS_Math_SinValue_Init(&effect->value,minValue,maxValue,step);
 800094a:	4613      	mov	r3, r2
 800094c:	4642      	mov	r2, r8
 800094e:	4631      	mov	r1, r6
 8000950:	f7ff fd24 	bl	800039c <NOS_Math_SinValue_Init>
        effect->minValue = minValue;
 8000954:	8366      	strh	r6, [r4, #26]
        effect->maxValue = maxValue;
 8000956:	f8a4 801c 	strh.w	r8, [r4, #28]
        effect->speed.data = speed;
 800095a:	82a7      	strh	r7, [r4, #20]
        effect->step.data = step;
 800095c:	82e5      	strh	r5, [r4, #22]
        effect->enabled = true;
 800095e:	2301      	movs	r3, #1
 8000960:	77a3      	strb	r3, [r4, #30]
        effect->effectId = 0x20;   
 8000962:	2320      	movs	r3, #32
 8000964:	77e3      	strb	r3, [r4, #31]
}
 8000966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800096a <NOS_WS2812B_Strip_Effect_Breathe_Handler>:
    }
}

void NOS_WS2812B_Strip_Effect_Breathe_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 800096a:	b1d0      	cbz	r0, 80009a2 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x38>
{
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	460c      	mov	r4, r1
 8000970:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 8000972:	b141      	cbz	r1, 8000986 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1c>
        {
            if(effect->enabled)
 8000974:	7f8b      	ldrb	r3, [r1, #30]
 8000976:	b133      	cbz	r3, 8000986 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1c>
            {
                if(effect->timer > effect->speed.data)
 8000978:	8b0a      	ldrh	r2, [r1, #24]
 800097a:	8a8b      	ldrh	r3, [r1, #20]
 800097c:	429a      	cmp	r2, r3
 800097e:	d803      	bhi.n	8000988 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1e>
                    NOS_Math_SinValue_Handler(&effect->value);
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8000980:	8b23      	ldrh	r3, [r4, #24]
 8000982:	3301      	adds	r3, #1
 8000984:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 8000986:	bd38      	pop	{r3, r4, r5, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 8000988:	4608      	mov	r0, r1
 800098a:	f7ff fce9 	bl	8000360 <NOS_Math_SinValue_Handler>
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
 800098e:	7821      	ldrb	r1, [r4, #0]
 8000990:	4628      	mov	r0, r5
 8000992:	f7ff ffd0 	bl	8000936 <NOS_WS2812B_Strip_SetBright>
                    NOS_WS2812B_Strip_Update(strip);
 8000996:	4628      	mov	r0, r5
 8000998:	f7ff ff6c 	bl	8000874 <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	8323      	strh	r3, [r4, #24]
 80009a0:	e7ee      	b.n	8000980 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x16>
 80009a2:	4770      	bx	lr

080009a4 <NOS_WS2812B_Strip_Effect_Rainbow_Init>:
        }
    }
}

void NOS_WS2812B_Strip_Effect_Rainbow_Init(Effect_Struct* effect,uint16_t speed,uint16_t step,uint16_t minValue,uint16_t maxValue)
{
 80009a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009a8:	4604      	mov	r4, r0
 80009aa:	460f      	mov	r7, r1
 80009ac:	4615      	mov	r5, r2
 80009ae:	461e      	mov	r6, r3
 80009b0:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        NOS_Math_SinValue_Init(&effect->value,minValue,maxValue,step);
 80009b4:	4613      	mov	r3, r2
 80009b6:	4642      	mov	r2, r8
 80009b8:	4631      	mov	r1, r6
 80009ba:	f7ff fcef 	bl	800039c <NOS_Math_SinValue_Init>
        effect->minValue = minValue;
 80009be:	8366      	strh	r6, [r4, #26]
        effect->maxValue = maxValue;
 80009c0:	f8a4 801c 	strh.w	r8, [r4, #28]
        effect->speed.data = speed;
 80009c4:	82a7      	strh	r7, [r4, #20]
        effect->step.data = step;
 80009c6:	82e5      	strh	r5, [r4, #22]
        effect->enabled = true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	77a3      	strb	r3, [r4, #30]
        effect->effectId = 0x21;  
 80009cc:	2321      	movs	r3, #33	@ 0x21
 80009ce:	77e3      	strb	r3, [r4, #31]
}
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009d4 <NOS_WS2812B_Strip_Effects_AddEffect>:
{
 80009d4:	b084      	sub	sp, #16
 80009d6:	b510      	push	{r4, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	4604      	mov	r4, r0
 80009dc:	a805      	add	r0, sp, #20
 80009de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(strip->effectsCounter < 10)
 80009e2:	f894 0150 	ldrb.w	r0, [r4, #336]	@ 0x150
 80009e6:	2809      	cmp	r0, #9
 80009e8:	d80a      	bhi.n	8000a00 <NOS_WS2812B_Strip_Effects_AddEffect+0x2c>
        switch(effect.effectId)
 80009ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80009ee:	2b20      	cmp	r3, #32
 80009f0:	d00b      	beq.n	8000a0a <NOS_WS2812B_Strip_Effects_AddEffect+0x36>
 80009f2:	2b21      	cmp	r3, #33	@ 0x21
 80009f4:	d018      	beq.n	8000a28 <NOS_WS2812B_Strip_Effects_AddEffect+0x54>
        strip->effectsCounter++;
 80009f6:	f894 3150 	ldrb.w	r3, [r4, #336]	@ 0x150
 80009fa:	3301      	adds	r3, #1
 80009fc:	f884 3150 	strb.w	r3, [r4, #336]	@ 0x150
}
 8000a00:	b002      	add	sp, #8
 8000a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a06:	b004      	add	sp, #16
 8000a08:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Breathe_Init(&strip->effects[strip->effectsCounter],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000a0a:	0140      	lsls	r0, r0, #5
 8000a0c:	3010      	adds	r0, #16
 8000a0e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000a18:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000a1c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000a20:	4420      	add	r0, r4
 8000a22:	f7ff ff8a 	bl	800093a <NOS_WS2812B_Strip_Effect_Breathe_Init>
                break;
 8000a26:	e7e6      	b.n	80009f6 <NOS_WS2812B_Strip_Effects_AddEffect+0x22>
                NOS_WS2812B_Strip_Effect_Rainbow_Init(&strip->effects[strip->effectsCounter],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000a28:	0140      	lsls	r0, r0, #5
 8000a2a:	3010      	adds	r0, #16
 8000a2c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000a36:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000a3a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000a3e:	4420      	add	r0, r4
 8000a40:	f7ff ffb0 	bl	80009a4 <NOS_WS2812B_Strip_Effect_Rainbow_Init>
                break;
 8000a44:	e7d7      	b.n	80009f6 <NOS_WS2812B_Strip_Effects_AddEffect+0x22>

08000a46 <NOS_WS2812B_Strip_Effects_UpdateEffect>:
{
 8000a46:	b084      	sub	sp, #16
 8000a48:	b500      	push	{lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	f10d 0c14 	add.w	ip, sp, #20
 8000a50:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8000a54:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
    if(pos < 10)
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d805      	bhi.n	8000a68 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
        switch(effect.effectId)
 8000a5c:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 8000a60:	2a20      	cmp	r2, #32
 8000a62:	d006      	beq.n	8000a72 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x2c>
 8000a64:	2a21      	cmp	r2, #33	@ 0x21
 8000a66:	d014      	beq.n	8000a92 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x4c>
}
 8000a68:	b003      	add	sp, #12
 8000a6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a6e:	b004      	add	sp, #16
 8000a70:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Breathe_Init(&strip->effects[pos],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000a72:	015b      	lsls	r3, r3, #5
 8000a74:	f103 0c10 	add.w	ip, r3, #16
 8000a78:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000a82:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000a86:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000a8a:	4460      	add	r0, ip
 8000a8c:	f7ff ff55 	bl	800093a <NOS_WS2812B_Strip_Effect_Breathe_Init>
                break;
 8000a90:	e7ea      	b.n	8000a68 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
                NOS_WS2812B_Strip_Effect_Rainbow_Init(&strip->effects[pos],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000a92:	015b      	lsls	r3, r3, #5
 8000a94:	f103 0c10 	add.w	ip, r3, #16
 8000a98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000aa2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000aa6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000aaa:	4460      	add	r0, ip
 8000aac:	f7ff ff7a 	bl	80009a4 <NOS_WS2812B_Strip_Effect_Rainbow_Init>
}
 8000ab0:	e7da      	b.n	8000a68 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
	...

08000ab4 <NOS_WS2812B_Strip_Effect_Rainbow_Handler>:

void NOS_WS2812B_Strip_Effect_Rainbow_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	f000 814f 	beq.w	8000d58 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x2a4>
{
 8000aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	460c      	mov	r4, r1
 8000ac2:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 8000ac4:	b141      	cbz	r1, 8000ad8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x24>
        {
            if(effect->enabled)
 8000ac6:	7f8b      	ldrb	r3, [r1, #30]
 8000ac8:	b133      	cbz	r3, 8000ad8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x24>
            {
                if(effect->timer > effect->speed.data)
 8000aca:	8b0a      	ldrh	r2, [r1, #24]
 8000acc:	8a8b      	ldrh	r3, [r1, #20]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d805      	bhi.n	8000ade <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x2a>

                    NOS_WS2812B_Strip_ColorFill(strip,curr);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8000ad2:	8b23      	ldrh	r3, [r4, #24]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 8000ad8:	b002      	add	sp, #8
 8000ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 8000ade:	4608      	mov	r0, r1
 8000ae0:	f7ff fc3e 	bl	8000360 <NOS_Math_SinValue_Handler>
                    uint16_t number = NOS_Math_GetSinValue(&effect->value);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff fc39 	bl	800035c <NOS_Math_GetSinValue>
 8000aea:	4606      	mov	r6, r0
 8000aec:	b287      	uxth	r7, r0
                    uint8_t iteration = number / 0x7F;
 8000aee:	4b9b      	ldr	r3, [pc, #620]	@ (8000d5c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x2a8>)
 8000af0:	fba3 2307 	umull	r2, r3, r3, r7
 8000af4:	1afa      	subs	r2, r7, r3
 8000af6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8000afa:	f3c3 188f 	ubfx	r8, r3, #6, #16
 8000afe:	f3c3 1087 	ubfx	r0, r3, #6, #8
                    PixelColor curr = { 0,0,0 };
 8000b02:	2300      	movs	r3, #0
 8000b04:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b08:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b0c:	f88d 3006 	strb.w	r3, [sp, #6]
                    switch (iteration)
 8000b10:	280b      	cmp	r0, #11
 8000b12:	d81b      	bhi.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
 8000b14:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000b18:	0024000c 	.word	0x0024000c
 8000b1c:	0052003b 	.word	0x0052003b
 8000b20:	007f006a 	.word	0x007f006a
 8000b24:	00ad0096 	.word	0x00ad0096
 8000b28:	00da00c5 	.word	0x00da00c5
 8000b2c:	010800f1 	.word	0x010800f1
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000b30:	f7ff fb68 	bl	8000204 <NOS_GetBaseColor>
 8000b34:	f88d 0004 	strb.w	r0, [sp, #4]
 8000b38:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000b3c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b40:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000b44:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = number;
 8000b48:	f88d 6005 	strb.w	r6, [sp, #5]
                    NOS_WS2812B_Strip_ColorFill(strip,curr);
 8000b4c:	9901      	ldr	r1, [sp, #4]
 8000b4e:	4628      	mov	r0, r5
 8000b50:	f7ff feda 	bl	8000908 <NOS_WS2812B_Strip_ColorFill>
                    NOS_WS2812B_Strip_Update(strip);
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff fe8d 	bl	8000874 <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	8323      	strh	r3, [r4, #24]
 8000b5e:	e7b8      	b.n	8000ad2 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x1e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000b60:	f7ff fb50 	bl	8000204 <NOS_GetBaseColor>
 8000b64:	f88d 0004 	strb.w	r0, [sp, #4]
 8000b68:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000b6c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b70:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000b74:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000b78:	fa5f f888 	uxtb.w	r8, r8
 8000b7c:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000b80:	fa17 f388 	uxtah	r3, r7, r8
 8000b84:	b29b      	uxth	r3, r3
                        curr.G = 0x7F + number;
 8000b86:	337f      	adds	r3, #127	@ 0x7f
 8000b88:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000b8c:	e7de      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000b8e:	f7ff fb39 	bl	8000204 <NOS_GetBaseColor>
 8000b92:	f88d 0004 	strb.w	r0, [sp, #4]
 8000b96:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000b9a:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b9e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000ba2:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000ba6:	fa5f f888 	uxtb.w	r8, r8
 8000baa:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000bae:	fa17 f388 	uxtah	r3, r7, r8
 8000bb2:	b29b      	uxth	r3, r3
                        curr.B = 0xFF - number;
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000bba:	e7c7      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000bbc:	f7ff fb22 	bl	8000204 <NOS_GetBaseColor>
 8000bc0:	f88d 0004 	strb.w	r0, [sp, #4]
 8000bc4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000bc8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bcc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000bd0:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000bd4:	fa5f f888 	uxtb.w	r8, r8
 8000bd8:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000bdc:	fa17 f388 	uxtah	r3, r7, r8
 8000be0:	b29b      	uxth	r3, r3
                        curr.B = 0x7F - number;
 8000be2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000be6:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000bea:	e7af      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000bec:	f7ff fb0a 	bl	8000204 <NOS_GetBaseColor>
 8000bf0:	f88d 0004 	strb.w	r0, [sp, #4]
 8000bf4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000bf8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000bfc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000c00:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000c04:	fa5f f888 	uxtb.w	r8, r8
 8000c08:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000c0c:	fa17 f388 	uxtah	r3, r7, r8
                        curr.R = number;
 8000c10:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000c14:	e79a      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000c16:	f7ff faf5 	bl	8000204 <NOS_GetBaseColor>
 8000c1a:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c1e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000c22:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c26:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000c2a:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000c2e:	fa5f f888 	uxtb.w	r8, r8
 8000c32:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000c36:	fa17 f388 	uxtah	r3, r7, r8
 8000c3a:	b29b      	uxth	r3, r3
                        curr.R = 0x7F + number;
 8000c3c:	337f      	adds	r3, #127	@ 0x7f
 8000c3e:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000c42:	e783      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000c44:	f7ff fade 	bl	8000204 <NOS_GetBaseColor>
 8000c48:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000c50:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c54:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000c58:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000c5c:	fa5f f888 	uxtb.w	r8, r8
 8000c60:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000c64:	fa17 f388 	uxtah	r3, r7, r8
 8000c68:	b29b      	uxth	r3, r3
                        curr.G = 0xFF - number;
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000c70:	e76c      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000c72:	f7ff fac7 	bl	8000204 <NOS_GetBaseColor>
 8000c76:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c7a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000c7e:	f88d 3005 	strb.w	r3, [sp, #5]
 8000c82:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000c86:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000c8a:	fa5f f888 	uxtb.w	r8, r8
 8000c8e:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000c92:	fa17 f388 	uxtah	r3, r7, r8
 8000c96:	b29b      	uxth	r3, r3
                        curr.G = 0x7F - number;
 8000c98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000c9c:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000ca0:	e754      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000ca2:	f7ff faaf 	bl	8000204 <NOS_GetBaseColor>
 8000ca6:	f88d 0004 	strb.w	r0, [sp, #4]
 8000caa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000cae:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cb2:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000cb6:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000cba:	fa5f f888 	uxtb.w	r8, r8
 8000cbe:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000cc2:	fa17 f388 	uxtah	r3, r7, r8
                        curr.B = number;
 8000cc6:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000cca:	e73f      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000ccc:	f7ff fa9a 	bl	8000204 <NOS_GetBaseColor>
 8000cd0:	f88d 0004 	strb.w	r0, [sp, #4]
 8000cd4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000cd8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cdc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000ce0:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000ce4:	fa5f f888 	uxtb.w	r8, r8
 8000ce8:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000cec:	fa17 f388 	uxtah	r3, r7, r8
 8000cf0:	b29b      	uxth	r3, r3
                        curr.B = 0x7F + number;
 8000cf2:	337f      	adds	r3, #127	@ 0x7f
 8000cf4:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000cf8:	e728      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000cfa:	f7ff fa83 	bl	8000204 <NOS_GetBaseColor>
 8000cfe:	f88d 0004 	strb.w	r0, [sp, #4]
 8000d02:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000d06:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d0a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000d0e:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000d12:	fa5f f888 	uxtb.w	r8, r8
 8000d16:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000d1a:	fa17 f388 	uxtah	r3, r7, r8
 8000d1e:	b29b      	uxth	r3, r3
                        curr.R = 0xFF - number;
 8000d20:	43db      	mvns	r3, r3
 8000d22:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000d26:	e711      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000d28:	f7ff fa6c 	bl	8000204 <NOS_GetBaseColor>
 8000d2c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000d30:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000d34:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d38:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000d3c:	f88d 0006 	strb.w	r0, [sp, #6]
                        number = number - 0x7F * iteration;
 8000d40:	fa5f f888 	uxtb.w	r8, r8
 8000d44:	eba8 18c8 	sub.w	r8, r8, r8, lsl #7
 8000d48:	fa17 f388 	uxtah	r3, r7, r8
 8000d4c:	b29b      	uxth	r3, r3
                        curr.R = 0x7F - number;
 8000d4e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000d52:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000d56:	e6f9      	b.n	8000b4c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x98>
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	02040811 	.word	0x02040811

08000d60 <NOS_WS2812B_Strip_Effects_Handler>:
{
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	4605      	mov	r5, r0
    for(int i = 0; i < strip->effectsCounter; i++)
 8000d64:	2400      	movs	r4, #0
 8000d66:	e006      	b.n	8000d76 <NOS_WS2812B_Strip_Effects_Handler+0x16>
                NOS_WS2812B_Strip_Effect_Breathe_Handler(strip,&strip->effects[i]);
 8000d68:	0161      	lsls	r1, r4, #5
 8000d6a:	3110      	adds	r1, #16
 8000d6c:	4429      	add	r1, r5
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f7ff fdfb 	bl	800096a <NOS_WS2812B_Strip_Effect_Breathe_Handler>
    for(int i = 0; i < strip->effectsCounter; i++)
 8000d74:	3401      	adds	r4, #1
 8000d76:	f895 3150 	ldrb.w	r3, [r5, #336]	@ 0x150
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	dd0e      	ble.n	8000d9c <NOS_WS2812B_Strip_Effects_Handler+0x3c>
        switch(strip->effects[i].effectId)
 8000d7e:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000d82:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000d86:	2b20      	cmp	r3, #32
 8000d88:	d0ee      	beq.n	8000d68 <NOS_WS2812B_Strip_Effects_Handler+0x8>
 8000d8a:	2b21      	cmp	r3, #33	@ 0x21
 8000d8c:	d1f2      	bne.n	8000d74 <NOS_WS2812B_Strip_Effects_Handler+0x14>
                NOS_WS2812B_Strip_Effect_Rainbow_Handler(strip,&strip->effects[i]);
 8000d8e:	0161      	lsls	r1, r4, #5
 8000d90:	3110      	adds	r1, #16
 8000d92:	4429      	add	r1, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	f7ff fe8d 	bl	8000ab4 <NOS_WS2812B_Strip_Effect_Rainbow_Handler>
                break;
 8000d9a:	e7eb      	b.n	8000d74 <NOS_WS2812B_Strip_Effects_Handler+0x14>
}
 8000d9c:	bd38      	pop	{r3, r4, r5, pc}

08000d9e <DMA_TransferError>:
	__HAL_TIM_ENABLE(&TIM1_handle);
}


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8000d9e:	b082      	sub	sp, #8
	volatile int i = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	9301      	str	r3, [sp, #4]
	i++;
 8000da4:	9b01      	ldr	r3, [sp, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
}
 8000daa:	b002      	add	sp, #8
 8000dac:	4770      	bx	lr
	...

08000db0 <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8000db0:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 8000db2:	4e2e      	ldr	r6, [pc, #184]	@ (8000e6c <ws2812b_set_pixel+0xbc>)
 8000db4:	5cb4      	ldrb	r4, [r6, r2]
	green = gammaTable[green];
 8000db6:	5cf5      	ldrb	r5, [r6, r3]
	blue = gammaTable[blue];
 8000db8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000dbc:	5cf2      	ldrb	r2, [r6, r3]


	uint32_t calcCol = (column*24);
 8000dbe:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t invRed = ~red;
 8000dc2:	43e4      	mvns	r4, r4
	uint32_t invGreen = ~green;
 8000dc4:	43ed      	mvns	r5, r5
	uint32_t invBlue = ~blue;
 8000dc6:	43d2      	mvns	r2, r2
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8000dc8:	4929      	ldr	r1, [pc, #164]	@ (8000e70 <ws2812b_set_pixel+0xc0>)
 8000dca:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000dce:	f101 4161 	add.w	r1, r1, #3774873600	@ 0xe1000000
 8000dd2:	f501 1180 	add.w	r1, r1, #1048576	@ 0x100000
 8000dd6:	014e      	lsls	r6, r1, #5
 8000dd8:	0083      	lsls	r3, r0, #2
 8000dda:	eb03 1341 	add.w	r3, r3, r1, lsl #5

	*bitBand =  (invGreen >> 7);
 8000dde:	09e9      	lsrs	r1, r5, #7
 8000de0:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
	bitBand+=16;

	*bitBand = (invGreen >> 6);
 8000de4:	09a9      	lsrs	r1, r5, #6
 8000de6:	6419      	str	r1, [r3, #64]	@ 0x40
	bitBand+=16;

	*bitBand = (invGreen >> 5);
 8000de8:	0969      	lsrs	r1, r5, #5
 8000dea:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
	bitBand+=16;

	*bitBand = (invGreen >> 4);
 8000dee:	0929      	lsrs	r1, r5, #4
 8000df0:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
	bitBand+=16;

	*bitBand = (invGreen >> 3);
 8000df4:	08e9      	lsrs	r1, r5, #3
 8000df6:	f8c3 1100 	str.w	r1, [r3, #256]	@ 0x100
	bitBand+=16;

	*bitBand = (invGreen >> 2);
 8000dfa:	08a9      	lsrs	r1, r5, #2
 8000dfc:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
	bitBand+=16;

	*bitBand = (invGreen >> 1);
 8000e00:	0869      	lsrs	r1, r5, #1
 8000e02:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
	bitBand+=16;

	*bitBand = (invGreen >> 0);
 8000e06:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
	bitBand+=16;

	// RED
	*bitBand =  (invRed >> 7);
 8000e0a:	09e1      	lsrs	r1, r4, #7
 8000e0c:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
	bitBand+=16;

	*bitBand = (invRed >> 6);
 8000e10:	09a1      	lsrs	r1, r4, #6
 8000e12:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
	bitBand+=16;

	*bitBand = (invRed >> 5);
 8000e16:	0961      	lsrs	r1, r4, #5
 8000e18:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
	bitBand+=16;

	*bitBand = (invRed >> 4);
 8000e1c:	0921      	lsrs	r1, r4, #4
 8000e1e:	f8c3 12c0 	str.w	r1, [r3, #704]	@ 0x2c0
	bitBand+=16;

	*bitBand = (invRed >> 3);
 8000e22:	08e1      	lsrs	r1, r4, #3
 8000e24:	f8c3 1300 	str.w	r1, [r3, #768]	@ 0x300
	bitBand+=16;

	*bitBand = (invRed >> 2);
 8000e28:	08a1      	lsrs	r1, r4, #2
 8000e2a:	f8c3 1340 	str.w	r1, [r3, #832]	@ 0x340
	bitBand+=16;

	*bitBand = (invRed >> 1);
 8000e2e:	0861      	lsrs	r1, r4, #1
 8000e30:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
	bitBand+=16;

	*bitBand = (invRed >> 0);
 8000e34:	f8c3 43c0 	str.w	r4, [r3, #960]	@ 0x3c0
	bitBand+=16;

	// BLUE
	*bitBand =  (invBlue >> 7);
 8000e38:	09d1      	lsrs	r1, r2, #7
 8000e3a:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
	bitBand+=16;

	*bitBand = (invBlue >> 6);
 8000e3e:	0991      	lsrs	r1, r2, #6
 8000e40:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
	bitBand+=16;

	*bitBand = (invBlue >> 5);
 8000e44:	0951      	lsrs	r1, r2, #5
 8000e46:	f8c3 1480 	str.w	r1, [r3, #1152]	@ 0x480
	bitBand+=16;

	*bitBand = (invBlue >> 4);
 8000e4a:	0911      	lsrs	r1, r2, #4
 8000e4c:	f8c3 14c0 	str.w	r1, [r3, #1216]	@ 0x4c0
	bitBand+=16;

	*bitBand = (invBlue >> 3);
 8000e50:	08d1      	lsrs	r1, r2, #3
 8000e52:	f8c3 1500 	str.w	r1, [r3, #1280]	@ 0x500
	bitBand+=16;

	*bitBand = (invBlue >> 2);
 8000e56:	0891      	lsrs	r1, r2, #2
 8000e58:	f8c3 1540 	str.w	r1, [r3, #1344]	@ 0x540
	bitBand+=16;

	*bitBand = (invBlue >> 1);
 8000e5c:	0851      	lsrs	r1, r2, #1
 8000e5e:	f8c3 1580 	str.w	r1, [r3, #1408]	@ 0x580
	bitBand+=16;

	*bitBand = (invBlue >> 0);
 8000e62:	f8c3 25c0 	str.w	r2, [r3, #1472]	@ 0x5c0
	bitBand+=16;

#endif
}
 8000e66:	bc70      	pop	{r4, r5, r6}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	08003c70 	.word	0x08003c70
 8000e70:	200001d8 	.word	0x200001d8

08000e74 <loadNextFramebufferData>:
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	b082      	sub	sp, #8
	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000e78:	6805      	ldr	r5, [r0, #0]
 8000e7a:	6884      	ldr	r4, [r0, #8]
 8000e7c:	1c63      	adds	r3, r4, #1
 8000e7e:	6083      	str	r3, [r0, #8]
 8000e80:	5d2a      	ldrb	r2, [r5, r4]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000e82:	1ca6      	adds	r6, r4, #2
 8000e84:	6086      	str	r6, [r0, #8]
 8000e86:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000e88:	3403      	adds	r4, #3
 8000e8a:	6084      	str	r4, [r0, #8]
 8000e8c:	5dad      	ldrb	r5, [r5, r6]
	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8000e8e:	6846      	ldr	r6, [r0, #4]
 8000e90:	42b4      	cmp	r4, r6
 8000e92:	d006      	beq.n	8000ea2 <loadNextFramebufferData+0x2e>
	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8000e94:	9500      	str	r5, [sp, #0]
 8000e96:	b289      	uxth	r1, r1
 8000e98:	7b00      	ldrb	r0, [r0, #12]
 8000e9a:	f7ff ff89 	bl	8000db0 <ws2812b_set_pixel>
}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
		bItem->frameBufferCounter = 0;
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	6084      	str	r4, [r0, #8]
 8000ea6:	e7f5      	b.n	8000e94 <loadNextFramebufferData+0x20>

08000ea8 <DMA_TransferCompleteHandler>:
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <DMA_TransferCompleteHandler+0xc0>)
 8000eaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eae:	619a      	str	r2, [r3, #24]
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <DMA_TransferCompleteHandler+0xc4>)
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000eb8:	d002      	beq.n	8000ec0 <DMA_TransferCompleteHandler+0x18>
{
 8000eba:	b510      	push	{r4, lr}
		for( i = 0; i < 3; i++ )
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	e048      	b.n	8000f52 <DMA_TransferCompleteHandler+0xaa>
		ws2812b.repeatCounter = 0;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <DMA_TransferCompleteHandler+0xc4>)
 8000ec4:	6398      	str	r0, [r3, #56]	@ 0x38
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f70 <DMA_TransferCompleteHandler+0xc8>)
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
		__HAL_DMA_DISABLE(&dmaUpdate);
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <DMA_TransferCompleteHandler+0xcc>)
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	680b      	ldr	r3, [r1, #0]
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8000edc:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <DMA_TransferCompleteHandler+0xd0>)
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	680b      	ldr	r3, [r1, #0]
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <DMA_TransferCompleteHandler+0xd4>)
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	680b      	ldr	r3, [r1, #0]
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	600b      	str	r3, [r1, #0]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <DMA_TransferCompleteHandler+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8000efe:	60d9      	str	r1, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8000f00:	68d9      	ldr	r1, [r3, #12]
 8000f02:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8000f06:	60d9      	str	r1, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8000f0e:	60d9      	str	r1, [r3, #12]
		TIM1->ARR = timer_reset_pulse_period;
 8000f10:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <DMA_TransferCompleteHandler+0xdc>)
 8000f12:	6809      	ldr	r1, [r1, #0]
 8000f14:	62d1      	str	r1, [r2, #44]	@ 0x2c
		TIM1->CNT = 0;
 8000f16:	6250      	str	r0, [r2, #36]	@ 0x24
		TIM1->EGR = TIM_EGR_UG;
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6151      	str	r1, [r2, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8000f1c:	f06f 0101 	mvn.w	r1, #1
 8000f20:	6119      	str	r1, [r3, #16]
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8000f22:	68d9      	ldr	r1, [r3, #12]
 8000f24:	f041 0101 	orr.w	r1, r1, #1
 8000f28:	60d9      	str	r1, [r3, #12]
		TIM1->CR1 |= TIM_CR1_CEN;
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <DMA_TransferCompleteHandler+0xe0>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <DMA_TransferCompleteHandler+0xe4>)
 8000f38:	619a      	str	r2, [r3, #24]
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <DMA_TransferCompleteHandler+0xc0>)
 8000f3c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f40:	619a      	str	r2, [r3, #24]
 8000f42:	4770      	bx	lr
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8000f44:	2101      	movs	r1, #1
 8000f46:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <DMA_TransferCompleteHandler+0xc4>)
 8000f48:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000f4c:	f7ff ff92 	bl	8000e74 <loadNextFramebufferData>
		for( i = 0; i < 3; i++ )
 8000f50:	3401      	adds	r4, #1
 8000f52:	2c02      	cmp	r4, #2
 8000f54:	d9f6      	bls.n	8000f44 <DMA_TransferCompleteHandler+0x9c>
		ws2812b.repeatCounter++;
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <DMA_TransferCompleteHandler+0xc4>)
 8000f58:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	6393      	str	r3, [r2, #56]	@ 0x38
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8000f5e:	4b02      	ldr	r3, [pc, #8]	@ (8000f68 <DMA_TransferCompleteHandler+0xc0>)
 8000f60:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	40010000 	.word	0x40010000
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	20000090 	.word	0x20000090
 8000f7c:	20000030 	.word	0x20000030
 8000f80:	20000190 	.word	0x20000190
 8000f84:	20000150 	.word	0x20000150
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	40020800 	.word	0x40020800

08000f90 <WS2812_sendbuf>:
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
	ws2812b.transferComplete = 0;
 8000f92:	2500      	movs	r5, #0
 8000f94:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <WS2812_sendbuf+0x144>)
 8000f96:	f883 5030 	strb.w	r5, [r3, #48]	@ 0x30
	for( i = 0; i < 3; i++ )
 8000f9a:	e00c      	b.n	8000fb6 <WS2812_sendbuf+0x26>
		ws2812b.item[i].frameBufferCounter = 0;
 8000f9c:	4c4d      	ldr	r4, [pc, #308]	@ (80010d4 <WS2812_sendbuf+0x144>)
 8000f9e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	60a1      	str	r1, [r4, #8]
		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff ff64 	bl	8000e74 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8000fac:	2101      	movs	r1, #1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff ff60 	bl	8000e74 <loadNextFramebufferData>
	for( i = 0; i < 3; i++ )
 8000fb4:	3501      	adds	r5, #1
 8000fb6:	2d02      	cmp	r5, #2
 8000fb8:	d9f0      	bls.n	8000f9c <WS2812_sendbuf+0xc>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8000fba:	4b47      	ldr	r3, [pc, #284]	@ (80010d8 <WS2812_sendbuf+0x148>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a47      	ldr	r2, [pc, #284]	@ (80010dc <WS2812_sendbuf+0x14c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d945      	bls.n	8001050 <WS2812_sendbuf+0xc0>
 8000fc4:	3a58      	subs	r2, #88	@ 0x58
 8000fc6:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000fca:	60d1      	str	r1, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8000fcc:	4a44      	ldr	r2, [pc, #272]	@ (80010e0 <WS2812_sendbuf+0x150>)
 8000fce:	6810      	ldr	r0, [r2, #0]
 8000fd0:	4a42      	ldr	r2, [pc, #264]	@ (80010dc <WS2812_sendbuf+0x14c>)
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	d952      	bls.n	800107c <WS2812_sendbuf+0xec>
 8000fd6:	3a58      	subs	r2, #88	@ 0x58
 8000fd8:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8000fdc:	60d1      	str	r1, [r2, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8000fde:	4a41      	ldr	r2, [pc, #260]	@ (80010e4 <WS2812_sendbuf+0x154>)
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80010dc <WS2812_sendbuf+0x14c>)
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d95f      	bls.n	80010a8 <WS2812_sendbuf+0x118>
 8000fe8:	3a58      	subs	r2, #88	@ 0x58
 8000fea:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 8000fee:	60d4      	str	r4, [r2, #12]
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 8000ff0:	2230      	movs	r2, #48	@ 0x30
 8000ff2:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8000ff4:	6042      	str	r2, [r0, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8000ff6:	604a      	str	r2, [r1, #4]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8000ff8:	493b      	ldr	r1, [pc, #236]	@ (80010e8 <WS2812_sendbuf+0x158>)
 8000ffa:	680a      	ldr	r2, [r1, #0]
 8000ffc:	f06f 001f 	mvn.w	r0, #31
 8001000:	6110      	str	r0, [r2, #16]
	__HAL_DMA_ENABLE(&dmaUpdate);
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 800100a:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <WS2812_sendbuf+0x150>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <WS2812_sendbuf+0x154>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8001022:	680b      	ldr	r3, [r1, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800102a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001032:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800103a:	60da      	str	r2, [r3, #12]
	TIM1->CNT = tim_period-1;
 800103c:	4a2b      	ldr	r2, [pc, #172]	@ (80010ec <WS2812_sendbuf+0x15c>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	3a01      	subs	r2, #1
 8001042:	492b      	ldr	r1, [pc, #172]	@ (80010f0 <WS2812_sendbuf+0x160>)
 8001044:	624a      	str	r2, [r1, #36]	@ 0x24
	__HAL_TIM_ENABLE(&TIM1_handle);
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8001050:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <WS2812_sendbuf+0x164>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d905      	bls.n	8001062 <WS2812_sendbuf+0xd2>
 8001056:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 800105a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800105e:	6091      	str	r1, [r2, #8]
 8001060:	e7b4      	b.n	8000fcc <WS2812_sendbuf+0x3c>
 8001062:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <WS2812_sendbuf+0x168>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d904      	bls.n	8001072 <WS2812_sendbuf+0xe2>
 8001068:	3a58      	subs	r2, #88	@ 0x58
 800106a:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800106e:	60d1      	str	r1, [r2, #12]
 8001070:	e7ac      	b.n	8000fcc <WS2812_sendbuf+0x3c>
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <WS2812_sendbuf+0x16c>)
 8001074:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8001078:	6091      	str	r1, [r2, #8]
 800107a:	e7a7      	b.n	8000fcc <WS2812_sendbuf+0x3c>
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800107c:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <WS2812_sendbuf+0x164>)
 800107e:	4290      	cmp	r0, r2
 8001080:	d905      	bls.n	800108e <WS2812_sendbuf+0xfe>
 8001082:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 8001086:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800108a:	6091      	str	r1, [r2, #8]
 800108c:	e7a7      	b.n	8000fde <WS2812_sendbuf+0x4e>
 800108e:	4a1a      	ldr	r2, [pc, #104]	@ (80010f8 <WS2812_sendbuf+0x168>)
 8001090:	4290      	cmp	r0, r2
 8001092:	d904      	bls.n	800109e <WS2812_sendbuf+0x10e>
 8001094:	3a58      	subs	r2, #88	@ 0x58
 8001096:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 800109a:	60d1      	str	r1, [r2, #12]
 800109c:	e79f      	b.n	8000fde <WS2812_sendbuf+0x4e>
 800109e:	4a17      	ldr	r2, [pc, #92]	@ (80010fc <WS2812_sendbuf+0x16c>)
 80010a0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80010a4:	6091      	str	r1, [r2, #8]
 80010a6:	e79a      	b.n	8000fde <WS2812_sendbuf+0x4e>
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <WS2812_sendbuf+0x164>)
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d905      	bls.n	80010ba <WS2812_sendbuf+0x12a>
 80010ae:	f502 7252 	add.w	r2, r2, #840	@ 0x348
 80010b2:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80010b6:	6094      	str	r4, [r2, #8]
 80010b8:	e79a      	b.n	8000ff0 <WS2812_sendbuf+0x60>
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <WS2812_sendbuf+0x168>)
 80010bc:	4291      	cmp	r1, r2
 80010be:	d904      	bls.n	80010ca <WS2812_sendbuf+0x13a>
 80010c0:	3a58      	subs	r2, #88	@ 0x58
 80010c2:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80010c6:	60d4      	str	r4, [r2, #12]
 80010c8:	e792      	b.n	8000ff0 <WS2812_sendbuf+0x60>
 80010ca:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <WS2812_sendbuf+0x16c>)
 80010cc:	f44f 1460 	mov.w	r4, #3670016	@ 0x380000
 80010d0:	6094      	str	r4, [r2, #8]
 80010d2:	e78d      	b.n	8000ff0 <WS2812_sendbuf+0x60>
 80010d4:	20000238 	.word	0x20000238
 80010d8:	200000f0 	.word	0x200000f0
 80010dc:	40026458 	.word	0x40026458
 80010e0:	20000090 	.word	0x20000090
 80010e4:	20000030 	.word	0x20000030
 80010e8:	20000190 	.word	0x20000190
 80010ec:	20000154 	.word	0x20000154
 80010f0:	40010000 	.word	0x40010000
 80010f4:	400260b8 	.word	0x400260b8
 80010f8:	40026058 	.word	0x40026058
 80010fc:	40026000 	.word	0x40026000

08001100 <DMA_TransferHalfHandler>:
{
 8001100:	b510      	push	{r4, lr}
 8001102:	b082      	sub	sp, #8
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <DMA_TransferHalfHandler+0x40>)
 8001106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001108:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800110c:	d001      	beq.n	8001112 <DMA_TransferHalfHandler+0x12>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800110e:	2400      	movs	r4, #0
 8001110:	e00e      	b.n	8001130 <DMA_TransferHalfHandler+0x30>
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8001112:	2000      	movs	r0, #0
 8001114:	9000      	str	r0, [sp, #0]
 8001116:	4603      	mov	r3, r0
 8001118:	4602      	mov	r2, r0
 800111a:	4601      	mov	r1, r0
 800111c:	f7ff fe48 	bl	8000db0 <ws2812b_set_pixel>
 8001120:	e00c      	b.n	800113c <DMA_TransferHalfHandler+0x3c>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8001122:	2100      	movs	r1, #0
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <DMA_TransferHalfHandler+0x40>)
 8001126:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800112a:	f7ff fea3 	bl	8000e74 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800112e:	3401      	adds	r4, #1
 8001130:	2c02      	cmp	r4, #2
 8001132:	d9f6      	bls.n	8001122 <DMA_TransferHalfHandler+0x22>
		ws2812b.repeatCounter++;
 8001134:	4a02      	ldr	r2, [pc, #8]	@ (8001140 <DMA_TransferHalfHandler+0x40>)
 8001136:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001138:	3301      	adds	r3, #1
 800113a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800113c:	b002      	add	sp, #8
 800113e:	bd10      	pop	{r4, pc}
 8001140:	20000238 	.word	0x20000238

08001144 <ws2812b_gpio_init>:
{
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	b088      	sub	sp, #32
	WS2812B_GPIO_CLK_ENABLE();
 8001148:	2500      	movs	r5, #0
 800114a:	9501      	str	r5, [sp, #4]
 800114c:	4c19      	ldr	r4, [pc, #100]	@ (80011b4 <ws2812b_gpio_init+0x70>)
 800114e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6323      	str	r3, [r4, #48]	@ 0x30
 8001156:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8001160:	230f      	movs	r3, #15
 8001162:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8001164:	2601      	movs	r6, #1
 8001166:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001168:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800116a:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 800116c:	a903      	add	r1, sp, #12
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <ws2812b_gpio_init+0x74>)
 8001170:	f000 ffca 	bl	8002108 <HAL_GPIO_Init>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	9502      	str	r5, [sp, #8]
 8001176:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6323      	str	r3, [r4, #48]	@ 0x30
 800117e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	9604      	str	r6, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118c:	2302      	movs	r3, #2
 800118e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001194:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001196:	f5a4 5430 	sub.w	r4, r4, #11264	@ 0x2c00
 800119a:	a903      	add	r1, sp, #12
 800119c:	4620      	mov	r0, r4
 800119e:	f000 ffb3 	bl	8002108 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 80011a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a6:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 80011a8:	a903      	add	r1, sp, #12
 80011aa:	4620      	mov	r0, r4
 80011ac:	f000 ffac 	bl	8002108 <HAL_GPIO_Init>
}
 80011b0:	b008      	add	sp, #32
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800

080011bc <DMA2_init>:
{
 80011bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c0:	b083      	sub	sp, #12
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011c2:	2500      	movs	r5, #0
 80011c4:	9501      	str	r5, [sp, #4]
 80011c6:	4b46      	ldr	r3, [pc, #280]	@ (80012e0 <DMA2_init+0x124>)
 80011c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ca:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80011ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	9b01      	ldr	r3, [sp, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011da:	4c42      	ldr	r4, [pc, #264]	@ (80012e4 <DMA2_init+0x128>)
 80011dc:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 80011e0:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	60e5      	str	r5, [r4, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 80011e6:	6125      	str	r5, [r4, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	6163      	str	r3, [r4, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ee:	f44f 4b80 	mov.w	fp, #16384	@ 0x4000
 80011f2:	f8c4 b018 	str.w	fp, [r4, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80011f6:	f44f 7980 	mov.w	r9, #256	@ 0x100
 80011fa:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011fe:	f44f 3840 	mov.w	r8, #196608	@ 0x30000
 8001202:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8001206:	f04f 6740 	mov.w	r7, #201326592	@ 0xc000000
 800120a:	6067      	str	r7, [r4, #4]
	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120c:	6265      	str	r5, [r4, #36]	@ 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800120e:	2603      	movs	r6, #3
 8001210:	62a6      	str	r6, [r4, #40]	@ 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8001212:	62e5      	str	r5, [r4, #44]	@ 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001214:	6325      	str	r5, [r4, #48]	@ 0x30
	dmaUpdate.Instance = DMA2_Stream5;
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <DMA2_init+0x12c>)
 8001218:	6023      	str	r3, [r4, #0]
	HAL_DMA_DeInit(&dmaUpdate);
 800121a:	4620      	mov	r0, r4
 800121c:	f000 fd9e 	bl	8001d5c <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8001220:	4620      	mov	r0, r4
 8001222:	f000 fd35 	bl	8001c90 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8001226:	2330      	movs	r3, #48	@ 0x30
 8001228:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <DMA2_init+0x130>)
 800122a:	4931      	ldr	r1, [pc, #196]	@ (80012f0 <DMA2_init+0x134>)
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fdc7 	bl	8001dc0 <HAL_DMA_Start>
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001232:	4c30      	ldr	r4, [pc, #192]	@ (80012f4 <DMA2_init+0x138>)
 8001234:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	60e5      	str	r5, [r4, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123e:	6123      	str	r3, [r4, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001240:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001244:	6163      	str	r3, [r4, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	61a3      	str	r3, [r4, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 800124c:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001250:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8001254:	6067      	str	r7, [r4, #4]
	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001256:	6265      	str	r5, [r4, #36]	@ 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001258:	62a6      	str	r6, [r4, #40]	@ 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 800125a:	62e5      	str	r5, [r4, #44]	@ 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800125c:	6325      	str	r5, [r4, #48]	@ 0x30
	dmaCC1.Instance = DMA2_Stream1;
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <DMA2_init+0x13c>)
 8001260:	6023      	str	r3, [r4, #0]
	HAL_DMA_DeInit(&dmaCC1);
 8001262:	4620      	mov	r0, r4
 8001264:	f000 fd7a 	bl	8001d5c <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 8001268:	4620      	mov	r0, r4
 800126a:	f000 fd11 	bl	8001c90 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 800126e:	2330      	movs	r3, #48	@ 0x30
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <DMA2_init+0x140>)
 8001272:	4923      	ldr	r1, [pc, #140]	@ (8001300 <DMA2_init+0x144>)
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fda3 	bl	8001dc0 <HAL_DMA_Start>
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127a:	4c22      	ldr	r4, [pc, #136]	@ (8001304 <DMA2_init+0x148>)
 800127c:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001280:	60e5      	str	r5, [r4, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8001282:	6125      	str	r5, [r4, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	6163      	str	r3, [r4, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800128a:	f8c4 b018 	str.w	fp, [r4, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800128e:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001292:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8001296:	6067      	str	r7, [r4, #4]
	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001298:	6265      	str	r5, [r4, #36]	@ 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800129a:	62a6      	str	r6, [r4, #40]	@ 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 800129c:	62e5      	str	r5, [r4, #44]	@ 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800129e:	6325      	str	r5, [r4, #48]	@ 0x30
	dmaCC2.Instance = DMA2_Stream2;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <DMA2_init+0x14c>)
 80012a2:	6023      	str	r3, [r4, #0]
	HAL_DMA_DeInit(&dmaCC2);
 80012a4:	4620      	mov	r0, r4
 80012a6:	f000 fd59 	bl	8001d5c <HAL_DMA_DeInit>
	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <DMA2_init+0x150>)
 80012ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <DMA2_init+0x154>)
 80012b0:	6423      	str	r3, [r4, #64]	@ 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <DMA2_init+0x158>)
 80012b4:	64e3      	str	r3, [r4, #76]	@ 0x4c
	HAL_DMA_Init(&dmaCC2);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f000 fcea 	bl	8001c90 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012bc:	462a      	mov	r2, r5
 80012be:	4629      	mov	r1, r5
 80012c0:	203a      	movs	r0, #58	@ 0x3a
 80012c2:	f000 fc33 	bl	8001b2c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012c6:	203a      	movs	r0, #58	@ 0x3a
 80012c8:	f000 fc40 	bl	8001b4c <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80012cc:	2330      	movs	r3, #48	@ 0x30
 80012ce:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <DMA2_init+0x130>)
 80012d0:	4911      	ldr	r1, [pc, #68]	@ (8001318 <DMA2_init+0x15c>)
 80012d2:	4620      	mov	r0, r4
 80012d4:	f000 fd98 	bl	8001e08 <HAL_DMA_Start_IT>
}
 80012d8:	b003      	add	sp, #12
 80012da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	200000f0 	.word	0x200000f0
 80012e8:	40026488 	.word	0x40026488
 80012ec:	40020818 	.word	0x40020818
 80012f0:	20000004 	.word	0x20000004
 80012f4:	20000090 	.word	0x20000090
 80012f8:	40026428 	.word	0x40026428
 80012fc:	4002081a 	.word	0x4002081a
 8001300:	200001d8 	.word	0x200001d8
 8001304:	20000030 	.word	0x20000030
 8001308:	40026440 	.word	0x40026440
 800130c:	08000ea9 	.word	0x08000ea9
 8001310:	08001101 	.word	0x08001101
 8001314:	08000d9f 	.word	0x08000d9f
 8001318:	20000000 	.word	0x20000000

0800131c <TIM1_init>:
{
 800131c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001320:	b082      	sub	sp, #8
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	2400      	movs	r4, #0
 8001324:	9401      	str	r4, [sp, #4]
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <TIM1_init+0xe0>)
 8001328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <TIM1_init+0xe4>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	0a13      	lsrs	r3, r2, #8
 8001340:	4930      	ldr	r1, [pc, #192]	@ (8001404 <TIM1_init+0xe8>)
 8001342:	fba1 1303 	umull	r1, r3, r1, r3
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	492f      	ldr	r1, [pc, #188]	@ (8001408 <TIM1_init+0xec>)
 800134a:	600b      	str	r3, [r1, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 800134c:	492f      	ldr	r1, [pc, #188]	@ (800140c <TIM1_init+0xf0>)
 800134e:	fba1 1202 	umull	r1, r2, r1, r2
 8001352:	0ad2      	lsrs	r2, r2, #11
 8001354:	492e      	ldr	r1, [pc, #184]	@ (8001410 <TIM1_init+0xf4>)
 8001356:	600a      	str	r2, [r1, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8001358:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800135c:	004a      	lsls	r2, r1, #1
 800135e:	492d      	ldr	r1, [pc, #180]	@ (8001414 <TIM1_init+0xf8>)
 8001360:	fba1 0102 	umull	r0, r1, r1, r2
 8001364:	08cf      	lsrs	r7, r1, #3
	uint32_t cc2 = (10 * tim_period) / 15;
 8001366:	492c      	ldr	r1, [pc, #176]	@ (8001418 <TIM1_init+0xfc>)
 8001368:	fba1 1202 	umull	r1, r2, r1, r2
 800136c:	08d6      	lsrs	r6, r2, #3
	TIM1_handle.Instance = TIM1;
 800136e:	4d2b      	ldr	r5, [pc, #172]	@ (800141c <TIM1_init+0x100>)
 8001370:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <TIM1_init+0x104>)
 8001372:	602a      	str	r2, [r5, #0]
	TIM1_handle.Init.Period            = tim_period;
 8001374:	60eb      	str	r3, [r5, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 8001376:	616c      	str	r4, [r5, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8001378:	606c      	str	r4, [r5, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800137a:	612c      	str	r4, [r5, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800137c:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 800137e:	4628      	mov	r0, r5
 8001380:	f001 fd66 	bl	8002e50 <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001384:	4622      	mov	r2, r4
 8001386:	4621      	mov	r1, r4
 8001388:	2019      	movs	r0, #25
 800138a:	f000 fbcf 	bl	8001b2c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800138e:	2019      	movs	r0, #25
 8001390:	f000 fbdc 	bl	8001b4c <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8001394:	4923      	ldr	r1, [pc, #140]	@ (8001424 <TIM1_init+0x108>)
 8001396:	f04f 0860 	mov.w	r8, #96	@ 0x60
 800139a:	f8c1 8000 	str.w	r8, [r1]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800139e:	608c      	str	r4, [r1, #8]
	tim2OC1.Pulse        = cc1;
 80013a0:	604f      	str	r7, [r1, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80013a2:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80013a4:	610c      	str	r4, [r1, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80013a6:	4622      	mov	r2, r4
 80013a8:	4628      	mov	r0, r5
 80013aa:	f001 fdb5 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 80013ae:	491e      	ldr	r1, [pc, #120]	@ (8001428 <TIM1_init+0x10c>)
 80013b0:	f8c1 8000 	str.w	r8, [r1]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80013b4:	608c      	str	r4, [r1, #8]
	tim2OC2.Pulse        = cc2;
 80013b6:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80013b8:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80013ba:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80013bc:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013be:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80013c0:	2204      	movs	r2, #4
 80013c2:	4628      	mov	r0, r5
 80013c4:	f001 fda8 	bl	8002f18 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&TIM1_handle);
 80013c8:	4628      	mov	r0, r5
 80013ca:	f001 fbdd 	bl	8002b88 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 80013ce:	4621      	mov	r1, r4
 80013d0:	4628      	mov	r0, r5
 80013d2:	f001 fe1f 	bl	8003014 <HAL_TIM_PWM_Start>
	__HAL_TIM_DISABLE(&TIM1_handle);
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	6a19      	ldr	r1, [r3, #32]
 80013da:	f241 1211 	movw	r2, #4369	@ 0x1111
 80013de:	4211      	tst	r1, r2
 80013e0:	d108      	bne.n	80013f4 <TIM1_init+0xd8>
 80013e2:	6a19      	ldr	r1, [r3, #32]
 80013e4:	f240 4244 	movw	r2, #1092	@ 0x444
 80013e8:	4211      	tst	r1, r2
 80013ea:	d103      	bne.n	80013f4 <TIM1_init+0xd8>
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	b002      	add	sp, #8
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	20000010 	.word	0x20000010
 8001404:	014f8b59 	.word	0x014f8b59
 8001408:	20000154 	.word	0x20000154
 800140c:	1b4e81b5 	.word	0x1b4e81b5
 8001410:	20000150 	.word	0x20000150
 8001414:	38e38e39 	.word	0x38e38e39
 8001418:	88888889 	.word	0x88888889
 800141c:	20000190 	.word	0x20000190
 8001420:	40010000 	.word	0x40010000
 8001424:	20000174 	.word	0x20000174
 8001428:	20000158 	.word	0x20000158

0800142c <DMA2_Stream2_IRQHandler>:
{
 800142c:	b510      	push	{r4, lr}
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 800142e:	4c05      	ldr	r4, [pc, #20]	@ (8001444 <DMA2_Stream2_IRQHandler+0x18>)
 8001430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001434:	61a3      	str	r3, [r4, #24]
	  HAL_DMA_IRQHandler(&dmaCC2);
 8001436:	4804      	ldr	r0, [pc, #16]	@ (8001448 <DMA2_Stream2_IRQHandler+0x1c>)
 8001438:	f000 fd78 	bl	8001f2c <HAL_DMA_IRQHandler>
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 800143c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001440:	61a3      	str	r3, [r4, #24]
}
 8001442:	bd10      	pop	{r4, pc}
 8001444:	40020c00 	.word	0x40020c00
 8001448:	20000030 	.word	0x20000030

0800144c <TIM1_UP_TIM10_IRQHandler>:
{
 800144c:	b510      	push	{r4, lr}
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 800144e:	4c05      	ldr	r4, [pc, #20]	@ (8001464 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001450:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001454:	61a3      	str	r3, [r4, #24]
	HAL_TIM_IRQHandler(&TIM1_handle);
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001458:	f001 fbd9 	bl	8002c0e <HAL_TIM_IRQHandler>
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 800145c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001460:	61a3      	str	r3, [r4, #24]
}
 8001462:	bd10      	pop	{r4, pc}
 8001464:	40020c00 	.word	0x40020c00
 8001468:	20000190 	.word	0x20000190

0800146c <HAL_TIM_PeriodElapsedCallback>:
    ws2812b.timerPeriodCounter = 0;
 800146c:	480a      	ldr	r0, [pc, #40]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800146e:	2300      	movs	r3, #0
 8001470:	6343      	str	r3, [r0, #52]	@ 0x34
    TIM1->CR1 = 0; // disable timer
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001474:	6013      	str	r3, [r2, #0]
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	f021 0101 	bic.w	r1, r1, #1
 8001480:	60d9      	str	r1, [r3, #12]
    TIM1->ARR = tim_period;
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001484:	6809      	ldr	r1, [r1, #0]
 8001486:	62d1      	str	r1, [r2, #44]	@ 0x2c
    TIM1->EGR = TIM_EGR_UG;
 8001488:	2101      	movs	r1, #1
 800148a:	6151      	str	r1, [r2, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800148c:	f06f 0201 	mvn.w	r2, #1
 8001490:	611a      	str	r2, [r3, #16]
    ws2812b.transferComplete = 1;
 8001492:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
}
 8001496:	4770      	bx	lr
 8001498:	20000238 	.word	0x20000238
 800149c:	40010000 	.word	0x40010000
 80014a0:	20000190 	.word	0x20000190
 80014a4:	20000154 	.word	0x20000154

080014a8 <ws2812b_init>:


void ws2812b_init()
{
 80014a8:	b508      	push	{r3, lr}
	ws2812b_gpio_init();
 80014aa:	f7ff fe4b 	bl	8001144 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 80014ae:	f7ff fe85 	bl	80011bc <DMA2_init>
	TIM1_init();
 80014b2:	f7ff ff33 	bl	800131c <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80014b6:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <ws2812b_init+0x18>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80014be:	bd08      	pop	{r3, pc}
 80014c0:	20000238 	.word	0x20000238

080014c4 <ws2812b_handle>:


void ws2812b_handle()
{
 80014c4:	b508      	push	{r3, lr}
	if(ws2812b.startTransfer) {
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <ws2812b_handle+0x1c>)
 80014c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80014cc:	b903      	cbnz	r3, 80014d0 <ws2812b_handle+0xc>
		ws2812b.startTransfer = 0;
		WS2812_sendbuf();
	}

 80014ce:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 0;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <ws2812b_handle+0x1c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		WS2812_sendbuf();
 80014d8:	f7ff fd5a 	bl	8000f90 <WS2812_sendbuf>
 80014dc:	e7f7      	b.n	80014ce <ws2812b_handle+0xa>
 80014de:	bf00      	nop
 80014e0:	20000238 	.word	0x20000238

080014e4 <visInit>:
#define Red(c) ((uint8_t)((c >> 16) & 0xFF))
#define Green(c) ((uint8_t)((c >> 8) & 0xFF))
#define Blue(c) ((uint8_t)(c & 0xFF))

void visInit()
{
 80014e4:	b508      	push	{r3, lr}
		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[0].channel = 0;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <visInit+0x30>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	731a      	strb	r2, [r3, #12]
		ws2812b.item[0].frameBufferPointer = frameBuffer1;
 80014ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <visInit+0x34>)
 80014ee:	601a      	str	r2, [r3, #0]
	    ws2812b.item[0].frameBufferSize = sizeof(frameBuffer1);
 80014f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014f4:	605a      	str	r2, [r3, #4]
		ws2812b.item[1].channel = 1;
 80014f6:	2101      	movs	r1, #1
 80014f8:	7719      	strb	r1, [r3, #28]
		ws2812b.item[1].frameBufferPointer = frameBuffer2;
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <visInit+0x38>)
 80014fc:	6119      	str	r1, [r3, #16]
	    ws2812b.item[1].frameBufferSize = sizeof(frameBuffer2);
 80014fe:	615a      	str	r2, [r3, #20]
		ws2812b.item[2].channel = 2;
 8001500:	2102      	movs	r1, #2
 8001502:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
		ws2812b.item[2].frameBufferPointer = frameBuffer3;
 8001506:	4906      	ldr	r1, [pc, #24]	@ (8001520 <visInit+0x3c>)
 8001508:	6219      	str	r1, [r3, #32]
	    ws2812b.item[2].frameBufferSize = sizeof(frameBuffer3);
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
	ws2812b_init();
 800150c:	f7ff ffcc 	bl	80014a8 <ws2812b_init>
}
 8001510:	bd08      	pop	{r3, pc}
 8001512:	bf00      	nop
 8001514:	20000238 	.word	0x20000238
 8001518:	20000874 	.word	0x20000874
 800151c:	20000574 	.word	0x20000574
 8001520:	20000274 	.word	0x20000274

08001524 <visHandle>:


void visHandle()
{
 8001524:	b508      	push	{r3, lr}

	if(ws2812b.transferComplete)
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <visHandle+0x1c>)
 8001528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800152c:	b903      	cbnz	r3, 8001530 <visHandle+0xc>
		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
		ws2812b_handle();
	}
	
 800152e:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 1;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <visHandle+0x1c>)
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		ws2812b_handle();
 8001538:	f7ff ffc4 	bl	80014c4 <ws2812b_handle>
 800153c:	e7f7      	b.n	800152e <visHandle+0xa>
 800153e:	bf00      	nop
 8001540:	20000238 	.word	0x20000238

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	2200      	movs	r2, #0
 8001548:	9205      	str	r2, [sp, #20]
 800154a:	9206      	str	r2, [sp, #24]
 800154c:	9207      	str	r2, [sp, #28]
 800154e:	9208      	str	r2, [sp, #32]
 8001550:	9209      	str	r2, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_GPIO_Init+0x78>)
 8001556:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001558:	f041 0110 	orr.w	r1, r1, #16
 800155c:	6319      	str	r1, [r3, #48]	@ 0x30
 800155e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001560:	f001 0110 	and.w	r1, r1, #16
 8001564:	9100      	str	r1, [sp, #0]
 8001566:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800156c:	f041 0104 	orr.w	r1, r1, #4
 8001570:	6319      	str	r1, [r3, #48]	@ 0x30
 8001572:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001574:	f001 0104 	and.w	r1, r1, #4
 8001578:	9101      	str	r1, [sp, #4]
 800157a:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157c:	9202      	str	r2, [sp, #8]
 800157e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001580:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001584:	6319      	str	r1, [r3, #48]	@ 0x30
 8001586:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001588:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800158c:	9102      	str	r1, [sp, #8]
 800158e:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	9203      	str	r2, [sp, #12]
 8001592:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001594:	f041 0101 	orr.w	r1, r1, #1
 8001598:	6319      	str	r1, [r3, #48]	@ 0x30
 800159a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800159c:	f001 0101 	and.w	r1, r1, #1
 80015a0:	9103      	str	r1, [sp, #12]
 80015a2:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	9204      	str	r2, [sp, #16]
 80015a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a8:	f042 0202 	orr.w	r2, r2, #2
 80015ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	9304      	str	r3, [sp, #16]
 80015b6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pins : PE3 PE4 */

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b8:	b00a      	add	sp, #40	@ 0x28
 80015ba:	4770      	bx	lr
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80015c0:	b508      	push	{r3, lr}
 80015c2:	4601      	mov	r1, r0
    NOS_UART_ReceiveHandler(&UART2,huart);
 80015c4:	4801      	ldr	r0, [pc, #4]	@ (80015cc <HAL_UART_RxCpltCallback+0xc>)
 80015c6:	f7ff f89b 	bl	8000700 <NOS_UART_ReceiveHandler>
}
 80015ca:	bd08      	pop	{r3, pc}
 80015cc:	20000bf0 	.word	0x20000bf0

080015d0 <SysTick_Handler>:

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 80015d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 fa53 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
tick = true;
 80015d6:	4b02      	ldr	r3, [pc, #8]	@ (80015e0 <SysTick_Handler+0x10>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop
 80015e0:	20000b74 	.word	0x20000b74

080015e4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80015e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80015e6:	2008      	movs	r0, #8
 80015e8:	f000 fe8e 	bl	8002308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */


  /* USER CODE END EXTI3_IRQn 1 */
}
 80015ec:	bd08      	pop	{r3, pc}

080015ee <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x2>
	...

080015f4 <MX_USART2_UART_Init>:
{
 80015f4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80015f6:	480a      	ldr	r0, [pc, #40]	@ (8001620 <MX_USART2_UART_Init+0x2c>)
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <MX_USART2_UART_Init+0x30>)
 80015fa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80015fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001600:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	2300      	movs	r3, #0
 8001604:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001606:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001608:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160a:	220c      	movs	r2, #12
 800160c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	f001 feab 	bl	800336c <HAL_UART_Init>
 8001616:	b900      	cbnz	r0, 800161a <MX_USART2_UART_Init+0x26>
}
 8001618:	bd08      	pop	{r3, pc}
    Error_Handler();
 800161a:	f7ff ffe8 	bl	80015ee <Error_Handler>
 800161e:	bf00      	nop
 8001620:	200024b8 	.word	0x200024b8
 8001624:	40004400 	.word	0x40004400

08001628 <SystemClock_Config>:
{
 8001628:	b500      	push	{lr}
 800162a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162c:	2230      	movs	r2, #48	@ 0x30
 800162e:	2100      	movs	r1, #0
 8001630:	a808      	add	r0, sp, #32
 8001632:	f002 f982 	bl	800393a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001636:	2300      	movs	r3, #0
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	9305      	str	r3, [sp, #20]
 800163e:	9306      	str	r3, [sp, #24]
 8001640:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	4a1f      	ldr	r2, [pc, #124]	@ (80016c4 <SystemClock_Config+0x9c>)
 8001646:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001648:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800164c:	6411      	str	r1, [r2, #64]	@ 0x40
 800164e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001650:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001654:	9201      	str	r2, [sp, #4]
 8001656:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <SystemClock_Config+0xa0>)
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001662:	6011      	str	r1, [r2, #0]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800166a:	9202      	str	r2, [sp, #8]
 800166c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166e:	2202      	movs	r2, #2
 8001670:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001672:	2101      	movs	r1, #1
 8001674:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001676:	2110      	movs	r1, #16
 8001678:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800167c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800167e:	2308      	movs	r3, #8
 8001680:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001682:	23a8      	movs	r3, #168	@ 0xa8
 8001684:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001686:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	a808      	add	r0, sp, #32
 800168e:	f000 fea3 	bl	80023d8 <HAL_RCC_OscConfig>
 8001692:	b998      	cbnz	r0, 80016bc <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001694:	230f      	movs	r3, #15
 8001696:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001698:	2302      	movs	r3, #2
 800169a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016a4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016aa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ac:	2105      	movs	r1, #5
 80016ae:	a803      	add	r0, sp, #12
 80016b0:	f001 f8fc 	bl	80028ac <HAL_RCC_ClockConfig>
 80016b4:	b920      	cbnz	r0, 80016c0 <SystemClock_Config+0x98>
}
 80016b6:	b015      	add	sp, #84	@ 0x54
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016bc:	f7ff ff97 	bl	80015ee <Error_Handler>
    Error_Handler();
 80016c0:	f7ff ff95 	bl	80015ee <Error_Handler>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <main>:
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
  HAL_Init();
 80016d0:	f000 f9ba 	bl	8001a48 <HAL_Init>
  SystemClock_Config();
 80016d4:	f7ff ffa8 	bl	8001628 <SystemClock_Config>
  MX_GPIO_Init();
 80016d8:	f7ff ff34 	bl	8001544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016dc:	f7ff ff8a 	bl	80015f4 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2,UART2.rx_buff,1);
 80016e0:	4cab      	ldr	r4, [pc, #684]	@ (8001990 <main+0x2c4>)
 80016e2:	4dac      	ldr	r5, [pc, #688]	@ (8001994 <main+0x2c8>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	4621      	mov	r1, r4
 80016e8:	4628      	mov	r0, r5
 80016ea:	f002 f8be 	bl	800386a <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2,"HELLO",sizeof("HELLO"),1000);
 80016ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f2:	2206      	movs	r2, #6
 80016f4:	49a8      	ldr	r1, [pc, #672]	@ (8001998 <main+0x2cc>)
 80016f6:	4628      	mov	r0, r5
 80016f8:	f001 fe67 	bl	80033ca <HAL_UART_Transmit>
  visInit();
 80016fc:	f7ff fef2 	bl	80014e4 <visInit>
  NOS_WS2812B_Strip_FullInit(&stripA,&frameBuffer1,&pixelsA,128);
 8001700:	4fa6      	ldr	r7, [pc, #664]	@ (800199c <main+0x2d0>)
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	4aa6      	ldr	r2, [pc, #664]	@ (80019a0 <main+0x2d4>)
 8001706:	49a7      	ldr	r1, [pc, #668]	@ (80019a4 <main+0x2d8>)
 8001708:	4638      	mov	r0, r7
 800170a:	f7ff f883 	bl	8000814 <NOS_WS2812B_Strip_FullInit>
    NOS_WS2812B_Strip_FullInit(&stripB,&frameBuffer2,&pixelsB,48);
 800170e:	4ea6      	ldr	r6, [pc, #664]	@ (80019a8 <main+0x2dc>)
 8001710:	2330      	movs	r3, #48	@ 0x30
 8001712:	4aa6      	ldr	r2, [pc, #664]	@ (80019ac <main+0x2e0>)
 8001714:	49a6      	ldr	r1, [pc, #664]	@ (80019b0 <main+0x2e4>)
 8001716:	4630      	mov	r0, r6
 8001718:	f7ff f87c 	bl	8000814 <NOS_WS2812B_Strip_FullInit>
    NOS_WS2812B_Strip_FullInit(&stripC,&frameBuffer3,&pixelsC,48);
 800171c:	4da5      	ldr	r5, [pc, #660]	@ (80019b4 <main+0x2e8>)
 800171e:	2330      	movs	r3, #48	@ 0x30
 8001720:	4aa5      	ldr	r2, [pc, #660]	@ (80019b8 <main+0x2ec>)
 8001722:	49a6      	ldr	r1, [pc, #664]	@ (80019bc <main+0x2f0>)
 8001724:	4628      	mov	r0, r5
 8001726:	f7ff f875 	bl	8000814 <NOS_WS2812B_Strip_FullInit>
  NOS_TimeEvent_Init(&tetrisUpdateEvent, 50);
 800172a:	2132      	movs	r1, #50	@ 0x32
 800172c:	48a4      	ldr	r0, [pc, #656]	@ (80019c0 <main+0x2f4>)
 800172e:	f7fe ff71 	bl	8000614 <NOS_TimeEvent_Init>
  NOS_TimeEvent_Init(&screenUpdateEvent, 20);
 8001732:	2114      	movs	r1, #20
 8001734:	48a3      	ldr	r0, [pc, #652]	@ (80019c4 <main+0x2f8>)
 8001736:	f7fe ff6d 	bl	8000614 <NOS_TimeEvent_Init>
  NOS_TimeEvent_Init(&uartTestEvent, 1000);
 800173a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800173e:	48a2      	ldr	r0, [pc, #648]	@ (80019c8 <main+0x2fc>)
 8001740:	f7fe ff68 	bl	8000614 <NOS_TimeEvent_Init>
  NOS_Math_SinValue_Init(&bright,65,75,1);
 8001744:	2301      	movs	r3, #1
 8001746:	224b      	movs	r2, #75	@ 0x4b
 8001748:	2141      	movs	r1, #65	@ 0x41
 800174a:	48a0      	ldr	r0, [pc, #640]	@ (80019cc <main+0x300>)
 800174c:	f7fe fe26 	bl	800039c <NOS_Math_SinValue_Init>
  NOS_GPIO_PinInit(&PE3,GPIOE,GPIO_PIN_3,Input);
 8001750:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 80019f8 <main+0x32c>
 8001754:	2301      	movs	r3, #1
 8001756:	2208      	movs	r2, #8
 8001758:	4641      	mov	r1, r8
 800175a:	489d      	ldr	r0, [pc, #628]	@ (80019d0 <main+0x304>)
 800175c:	f7fe fde5 	bl	800032a <NOS_GPIO_PinInit>
  NOS_GPIO_PinInit(&PE4,GPIOE,GPIO_PIN_4,Input);
 8001760:	2301      	movs	r3, #1
 8001762:	2210      	movs	r2, #16
 8001764:	4641      	mov	r1, r8
 8001766:	489b      	ldr	r0, [pc, #620]	@ (80019d4 <main+0x308>)
 8001768:	f7fe fddf 	bl	800032a <NOS_GPIO_PinInit>
  NOS_Button_Init(&button,GPIO_PIN_RESET);
 800176c:	2100      	movs	r1, #0
 800176e:	489a      	ldr	r0, [pc, #616]	@ (80019d8 <main+0x30c>)
 8001770:	f7fe fdc4 	bl	80002fc <NOS_Button_Init>
  NOS_GPIO_PinInit(&PA6,GPIOA,GPIO_PIN_6,Output);
 8001774:	f5a8 5880 	sub.w	r8, r8, #4096	@ 0x1000
 8001778:	2302      	movs	r3, #2
 800177a:	2240      	movs	r2, #64	@ 0x40
 800177c:	4641      	mov	r1, r8
 800177e:	4897      	ldr	r0, [pc, #604]	@ (80019dc <main+0x310>)
 8001780:	f7fe fdd3 	bl	800032a <NOS_GPIO_PinInit>
  NOS_GPIO_PinInit(&PA7,GPIOA,GPIO_PIN_7,Output);
 8001784:	2302      	movs	r3, #2
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	4641      	mov	r1, r8
 800178a:	4895      	ldr	r0, [pc, #596]	@ (80019e0 <main+0x314>)
 800178c:	f7fe fdcd 	bl	800032a <NOS_GPIO_PinInit>
  NOS_UART_ReceiveAbort(&UART2);
 8001790:	4620      	mov	r0, r4
 8001792:	f7fe ff73 	bl	800067c <NOS_UART_ReceiveAbort>
  NOS_WS2812B_Strip_Effect_Rainbow_Init(&breatheA,20,5,0,1524);
 8001796:	4c93      	ldr	r4, [pc, #588]	@ (80019e4 <main+0x318>)
 8001798:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	2205      	movs	r2, #5
 80017a2:	2114      	movs	r1, #20
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff f8fd 	bl	80009a4 <NOS_WS2812B_Strip_Effect_Rainbow_Init>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,breatheA);
 80017aa:	46ec      	mov	ip, sp
 80017ac:	f104 0e0c 	add.w	lr, r4, #12
 80017b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017b8:	f8de 3000 	ldr.w	r3, [lr]
 80017bc:	f8cc 3000 	str.w	r3, [ip]
 80017c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017c4:	4638      	mov	r0, r7
 80017c6:	f7ff f905 	bl	80009d4 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,breatheA);
 80017ca:	46ec      	mov	ip, sp
 80017cc:	f104 0e0c 	add.w	lr, r4, #12
 80017d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017d8:	f8de 3000 	ldr.w	r3, [lr]
 80017dc:	f8cc 3000 	str.w	r3, [ip]
 80017e0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017e4:	4630      	mov	r0, r6
 80017e6:	f7ff f8f5 	bl	80009d4 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,breatheA);
 80017ea:	46ec      	mov	ip, sp
 80017ec:	f104 0e0c 	add.w	lr, r4, #12
 80017f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017f8:	f8de 3000 	ldr.w	r3, [lr]
 80017fc:	f8cc 3000 	str.w	r3, [ip]
 8001800:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001804:	4628      	mov	r0, r5
 8001806:	f7ff f8e5 	bl	80009d4 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Update(&stripA);
 800180a:	4638      	mov	r0, r7
 800180c:	f7ff f832 	bl	8000874 <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripB);
 8001810:	4630      	mov	r0, r6
 8001812:	f7ff f82f 	bl	8000874 <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripC);
 8001816:	4628      	mov	r0, r5
 8001818:	f7ff f82c 	bl	8000874 <NOS_WS2812B_Strip_Update>
 800181c:	e013      	b.n	8001846 <main+0x17a>
    if(NOS_UART_CheckReceive(&UART2))
 800181e:	485c      	ldr	r0, [pc, #368]	@ (8001990 <main+0x2c4>)
 8001820:	f7fe ffec 	bl	80007fc <NOS_UART_CheckReceive>
 8001824:	bb48      	cbnz	r0, 800187a <main+0x1ae>
    if (NOS_TimeEvent_Check(&tetrisUpdateEvent))
 8001826:	4866      	ldr	r0, [pc, #408]	@ (80019c0 <main+0x2f4>)
 8001828:	f7fe ff06 	bl	8000638 <NOS_TimeEvent_Check>
 800182c:	2800      	cmp	r0, #0
 800182e:	d17a      	bne.n	8001926 <main+0x25a>
    if (NOS_TimeEvent_Check(&screenUpdateEvent))
 8001830:	4864      	ldr	r0, [pc, #400]	@ (80019c4 <main+0x2f8>)
 8001832:	f7fe ff01 	bl	8000638 <NOS_TimeEvent_Check>
 8001836:	2800      	cmp	r0, #0
 8001838:	d179      	bne.n	800192e <main+0x262>
    if(NOS_Button_CheckPressDone(&button))
 800183a:	4867      	ldr	r0, [pc, #412]	@ (80019d8 <main+0x30c>)
 800183c:	f7fe fd68 	bl	8000310 <NOS_Button_CheckPressDone>
 8001840:	2800      	cmp	r0, #0
 8001842:	f040 8083 	bne.w	800194c <main+0x280>
    if(tick)
 8001846:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <main+0x31c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0e7      	beq.n	800181e <main+0x152>
          NOS_UART_Timer_Handler(&UART2);
 800184e:	4850      	ldr	r0, [pc, #320]	@ (8001990 <main+0x2c4>)
 8001850:	f7fe ff29 	bl	80006a6 <NOS_UART_Timer_Handler>
          NOS_TimeEvent_TickHandler(&tetrisUpdateEvent);
 8001854:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <main+0x2f4>)
 8001856:	f7fe fee4 	bl	8000622 <NOS_TimeEvent_TickHandler>
          NOS_TimeEvent_TickHandler(&screenUpdateEvent);
 800185a:	485a      	ldr	r0, [pc, #360]	@ (80019c4 <main+0x2f8>)
 800185c:	f7fe fee1 	bl	8000622 <NOS_TimeEvent_TickHandler>
          NOS_WS2812B_Strip_Effects_Handler(&stripA);
 8001860:	484e      	ldr	r0, [pc, #312]	@ (800199c <main+0x2d0>)
 8001862:	f7ff fa7d 	bl	8000d60 <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripB);
 8001866:	4850      	ldr	r0, [pc, #320]	@ (80019a8 <main+0x2dc>)
 8001868:	f7ff fa7a 	bl	8000d60 <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripC);
 800186c:	4851      	ldr	r0, [pc, #324]	@ (80019b4 <main+0x2e8>)
 800186e:	f7ff fa77 	bl	8000d60 <NOS_WS2812B_Strip_Effects_Handler>
          tick = false;
 8001872:	4b5d      	ldr	r3, [pc, #372]	@ (80019e8 <main+0x31c>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e7d1      	b.n	800181e <main+0x152>
      switch (NOS_UART_GetReceivedData(&UART2)[0])
 800187a:	4845      	ldr	r0, [pc, #276]	@ (8001990 <main+0x2c4>)
 800187c:	f7fe ffc2 	bl	8000804 <NOS_UART_GetReceivedData>
 8001880:	7803      	ldrb	r3, [r0, #0]
 8001882:	3b64      	subs	r3, #100	@ 0x64
 8001884:	2b03      	cmp	r3, #3
 8001886:	d819      	bhi.n	80018bc <main+0x1f0>
 8001888:	e8df f003 	tbb	[pc, r3]
 800188c:	453d2b02 	.word	0x453d2b02
          NOS_Strip_Uart_ParseCommand(&stripA,NOS_UART_GetReceivedData(&UART2));
 8001890:	4c3f      	ldr	r4, [pc, #252]	@ (8001990 <main+0x2c4>)
 8001892:	4620      	mov	r0, r4
 8001894:	f7fe ffb6 	bl	8000804 <NOS_UART_GetReceivedData>
 8001898:	4601      	mov	r1, r0
 800189a:	4840      	ldr	r0, [pc, #256]	@ (800199c <main+0x2d0>)
 800189c:	f7fe fd88 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
          NOS_Strip_Uart_ParseCommand(&stripB,NOS_UART_GetReceivedData(&UART2));
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7fe ffaf 	bl	8000804 <NOS_UART_GetReceivedData>
 80018a6:	4601      	mov	r1, r0
 80018a8:	483f      	ldr	r0, [pc, #252]	@ (80019a8 <main+0x2dc>)
 80018aa:	f7fe fd81 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
          NOS_Strip_Uart_ParseCommand(&stripC,NOS_UART_GetReceivedData(&UART2));
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7fe ffa8 	bl	8000804 <NOS_UART_GetReceivedData>
 80018b4:	4601      	mov	r1, r0
 80018b6:	483f      	ldr	r0, [pc, #252]	@ (80019b4 <main+0x2e8>)
 80018b8:	f7fe fd7a 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
      NOS_UART_EndReceive(&UART2);
 80018bc:	4834      	ldr	r0, [pc, #208]	@ (8001990 <main+0x2c4>)
 80018be:	f7fe ffa4 	bl	800080a <NOS_UART_EndReceive>
      HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	4849      	ldr	r0, [pc, #292]	@ (80019ec <main+0x320>)
 80018c6:	f000 fd15 	bl	80022f4 <HAL_GPIO_TogglePin>
      NOS_WS2812B_Strip_Update(&stripA);
 80018ca:	4834      	ldr	r0, [pc, #208]	@ (800199c <main+0x2d0>)
 80018cc:	f7fe ffd2 	bl	8000874 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 80018d0:	4835      	ldr	r0, [pc, #212]	@ (80019a8 <main+0x2dc>)
 80018d2:	f7fe ffcf 	bl	8000874 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 80018d6:	4837      	ldr	r0, [pc, #220]	@ (80019b4 <main+0x2e8>)
 80018d8:	f7fe ffcc 	bl	8000874 <NOS_WS2812B_Strip_Update>
      visHandle();
 80018dc:	f7ff fe22 	bl	8001524 <visHandle>
 80018e0:	e7a1      	b.n	8001826 <main+0x15a>
              if(NOS_Strip_Uart_ParseCommand(&stripA,NOS_UART_GetReceivedData(&UART2)) == "ready!")
 80018e2:	482b      	ldr	r0, [pc, #172]	@ (8001990 <main+0x2c4>)
 80018e4:	f7fe ff8e 	bl	8000804 <NOS_UART_GetReceivedData>
 80018e8:	4601      	mov	r1, r0
 80018ea:	482c      	ldr	r0, [pc, #176]	@ (800199c <main+0x2d0>)
 80018ec:	f7fe fd60 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
 80018f0:	4b3f      	ldr	r3, [pc, #252]	@ (80019f0 <main+0x324>)
 80018f2:	4283      	cmp	r3, r0
 80018f4:	d1e2      	bne.n	80018bc <main+0x1f0>
                  HAL_UART_Transmit(&huart2,"ready!",7,1000);
 80018f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fa:	2207      	movs	r2, #7
 80018fc:	493c      	ldr	r1, [pc, #240]	@ (80019f0 <main+0x324>)
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <main+0x2c8>)
 8001900:	f001 fd63 	bl	80033ca <HAL_UART_Transmit>
 8001904:	e7da      	b.n	80018bc <main+0x1f0>
              if(NOS_Strip_Uart_ParseCommand(&stripB,NOS_UART_GetReceivedData(&UART2)) == "ready!")
 8001906:	4822      	ldr	r0, [pc, #136]	@ (8001990 <main+0x2c4>)
 8001908:	f7fe ff7c 	bl	8000804 <NOS_UART_GetReceivedData>
 800190c:	4601      	mov	r1, r0
 800190e:	4826      	ldr	r0, [pc, #152]	@ (80019a8 <main+0x2dc>)
 8001910:	f7fe fd4e 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
              break;
 8001914:	e7d2      	b.n	80018bc <main+0x1f0>
              if(NOS_Strip_Uart_ParseCommand(&stripC,NOS_UART_GetReceivedData(&UART2)) == "ready!")
 8001916:	481e      	ldr	r0, [pc, #120]	@ (8001990 <main+0x2c4>)
 8001918:	f7fe ff74 	bl	8000804 <NOS_UART_GetReceivedData>
 800191c:	4601      	mov	r1, r0
 800191e:	4825      	ldr	r0, [pc, #148]	@ (80019b4 <main+0x2e8>)
 8001920:	f7fe fd46 	bl	80003b0 <NOS_Strip_Uart_ParseCommand>
      break;
 8001924:	e7ca      	b.n	80018bc <main+0x1f0>
      NOS_TimeEvent_FinishEvent(&tetrisUpdateEvent);
 8001926:	4826      	ldr	r0, [pc, #152]	@ (80019c0 <main+0x2f4>)
 8001928:	f7fe fe8d 	bl	8000646 <NOS_TimeEvent_FinishEvent>
 800192c:	e780      	b.n	8001830 <main+0x164>
      NOS_WS2812B_Strip_Update(&stripA);
 800192e:	481b      	ldr	r0, [pc, #108]	@ (800199c <main+0x2d0>)
 8001930:	f7fe ffa0 	bl	8000874 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 8001934:	481c      	ldr	r0, [pc, #112]	@ (80019a8 <main+0x2dc>)
 8001936:	f7fe ff9d 	bl	8000874 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 800193a:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <main+0x2e8>)
 800193c:	f7fe ff9a 	bl	8000874 <NOS_WS2812B_Strip_Update>
      visHandle();
 8001940:	f7ff fdf0 	bl	8001524 <visHandle>
      NOS_TimeEvent_FinishEvent(&screenUpdateEvent);
 8001944:	481f      	ldr	r0, [pc, #124]	@ (80019c4 <main+0x2f8>)
 8001946:	f7fe fe7e 	bl	8000646 <NOS_TimeEvent_FinishEvent>
 800194a:	e776      	b.n	800183a <main+0x16e>
      if(currColor < 11)
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <main+0x328>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b0a      	cmp	r3, #10
 8001952:	dc18      	bgt.n	8001986 <main+0x2ba>
        currColor++;
 8001954:	3301      	adds	r3, #1
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <main+0x328>)
 8001958:	6013      	str	r3, [r2, #0]
      NOS_WS2812B_Strip_ColorFill(&stripA,NOS_GetBaseColor(currColor));
 800195a:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <main+0x328>)
 800195c:	7818      	ldrb	r0, [r3, #0]
 800195e:	f7fe fc51 	bl	8000204 <NOS_GetBaseColor>
 8001962:	f88d 001c 	strb.w	r0, [sp, #28]
 8001966:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800196a:	f88d 301d 	strb.w	r3, [sp, #29]
 800196e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001972:	f88d 001e 	strb.w	r0, [sp, #30]
 8001976:	9907      	ldr	r1, [sp, #28]
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <main+0x2d0>)
 800197a:	f7fe ffc5 	bl	8000908 <NOS_WS2812B_Strip_ColorFill>
      NOS_Button_PressDoneHandler(&button);
 800197e:	4816      	ldr	r0, [pc, #88]	@ (80019d8 <main+0x30c>)
 8001980:	f7fe fcc8 	bl	8000314 <NOS_Button_PressDoneHandler>
 8001984:	e75f      	b.n	8001846 <main+0x17a>
        currColor = 0;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <main+0x328>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e7e5      	b.n	800195a <main+0x28e>
 800198e:	bf00      	nop
 8001990:	20000bf0 	.word	0x20000bf0
 8001994:	200024b8 	.word	0x200024b8
 8001998:	08003d70 	.word	0x08003d70
 800199c:	20002340 	.word	0x20002340
 80019a0:	20001f18 	.word	0x20001f18
 80019a4:	20000874 	.word	0x20000874
 80019a8:	200021ec 	.word	0x200021ec
 80019ac:	20001d98 	.word	0x20001d98
 80019b0:	20000574 	.word	0x20000574
 80019b4:	20002098 	.word	0x20002098
 80019b8:	20001c18 	.word	0x20001c18
 80019bc:	20000274 	.word	0x20000274
 80019c0:	200024ac 	.word	0x200024ac
 80019c4:	200024a0 	.word	0x200024a0
 80019c8:	20002494 	.word	0x20002494
 80019cc:	20000bdc 	.word	0x20000bdc
 80019d0:	20000ba4 	.word	0x20000ba4
 80019d4:	20000b9c 	.word	0x20000b9c
 80019d8:	20000bbc 	.word	0x20000bbc
 80019dc:	20000bb4 	.word	0x20000bb4
 80019e0:	20000bac 	.word	0x20000bac
 80019e4:	20000b78 	.word	0x20000b78
 80019e8:	20000b74 	.word	0x20000b74
 80019ec:	40020000 	.word	0x40020000
 80019f0:	08003c68 	.word	0x08003c68
 80019f4:	20000b98 	.word	0x20000b98
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b510      	push	{r4, lr}
 80019fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_InitTick+0x40>)
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <HAL_InitTick+0x44>)
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a14:	f000 f8a8 	bl	8001b68 <HAL_SYSTICK_Config>
 8001a18:	b968      	cbnz	r0, 8001a36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	2c0f      	cmp	r4, #15
 8001a1c:	d901      	bls.n	8001a22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e00a      	b.n	8001a38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a22:	2200      	movs	r2, #0
 8001a24:	4621      	mov	r1, r4
 8001a26:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2a:	f000 f87f 	bl	8001b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_InitTick+0x48>)
 8001a30:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2000      	movs	r0, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
}
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000010 	.word	0x20000010
 8001a44:	2000000c 	.word	0x2000000c

08001a48 <HAL_Init>:
{
 8001a48:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_Init+0x30>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a62:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f84f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f7ff ffc6 	bl	80019fc <HAL_InitTick>
  HAL_MspInit();
 8001a70:	f000 fc58 	bl	8002324 <HAL_MspInit>
}
 8001a74:	2000      	movs	r0, #0
 8001a76:	bd08      	pop	{r3, pc}
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a7c:	4a03      	ldr	r2, [pc, #12]	@ (8001a8c <HAL_IncTick+0x10>)
 8001a7e:	6811      	ldr	r1, [r2, #0]
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_IncTick+0x14>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	440b      	add	r3, r1
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20002544 	.word	0x20002544
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a94:	4b01      	ldr	r3, [pc, #4]	@ (8001a9c <HAL_GetTick+0x8>)
 8001a96:	6818      	ldr	r0, [r3, #0]
}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20002544 	.word	0x20002544

08001aa0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	db08      	blt.n	8001ab6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	0109      	lsls	r1, r1, #4
 8001aa6:	b2c9      	uxtb	r1, r1
 8001aa8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001aac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001ab0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001ab4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	f000 000f 	and.w	r0, r0, #15
 8001aba:	0109      	lsls	r1, r1, #4
 8001abc:	b2c9      	uxtb	r1, r1
 8001abe:	4b01      	ldr	r3, [pc, #4]	@ (8001ac4 <__NVIC_SetPriority+0x24>)
 8001ac0:	5419      	strb	r1, [r3, r0]
  }
}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed14 	.word	0xe000ed14

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aca:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ace:	f1c0 0c07 	rsb	ip, r0, #7
 8001ad2:	f1bc 0f04 	cmp.w	ip, #4
 8001ad6:	bf28      	it	cs
 8001ad8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001adc:	1d03      	adds	r3, r0, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d90f      	bls.n	8001b02 <NVIC_EncodePriority+0x3a>
 8001ae2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 3eff 	mov.w	lr, #4294967295
 8001ae8:	fa0e f00c 	lsl.w	r0, lr, ip
 8001aec:	ea21 0100 	bic.w	r1, r1, r0
 8001af0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af2:	fa0e fe03 	lsl.w	lr, lr, r3
 8001af6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001afa:	ea41 0002 	orr.w	r0, r1, r2
 8001afe:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	2300      	movs	r3, #0
 8001b04:	e7ee      	b.n	8001ae4 <NVIC_EncodePriority+0x1c>
	...

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b0a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	0200      	lsls	r0, r0, #8
 8001b16:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b24:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_NVIC_SetPriority+0x1c>)
 8001b32:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b34:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001b38:	f7ff ffc6 	bl	8001ac8 <NVIC_EncodePriority>
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff ffae 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	db07      	blt.n	8001b60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b50:	f000 021f 	and.w	r2, r0, #31
 8001b54:	0940      	lsrs	r0, r0, #5
 8001b56:	2301      	movs	r3, #1
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	4a02      	ldr	r2, [pc, #8]	@ (8001b64 <HAL_NVIC_EnableIRQ+0x18>)
 8001b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	3801      	subs	r0, #1
 8001b6a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001b6e:	d20b      	bcs.n	8001b88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <HAL_SYSTICK_Config+0x24>)
 8001b78:	21f0      	movs	r1, #240	@ 0xf0
 8001b7a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7e:	2000      	movs	r0, #0
 8001b80:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	2207      	movs	r2, #7
 8001b84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b92:	6805      	ldr	r5, [r0, #0]
 8001b94:	682c      	ldr	r4, [r5, #0]
 8001b96:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001b9a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b9c:	6804      	ldr	r4, [r0, #0]
 8001b9e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ba0:	6883      	ldr	r3, [r0, #8]
 8001ba2:	2b40      	cmp	r3, #64	@ 0x40
 8001ba4:	d005      	beq.n	8001bb2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	60da      	str	r2, [r3, #12]
  }
}
 8001bae:	bc30      	pop	{r4, r5}
 8001bb0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001bb2:	6803      	ldr	r3, [r0, #0]
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001bb6:	6803      	ldr	r3, [r0, #0]
 8001bb8:	60d9      	str	r1, [r3, #12]
 8001bba:	e7f8      	b.n	8001bae <DMA_SetConfig+0x1e>

08001bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bbe:	6803      	ldr	r3, [r0, #0]
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	3910      	subs	r1, #16
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <DMA_CalcBaseAndBitshift+0x3c>)
 8001bc6:	fba2 4201 	umull	r4, r2, r2, r1
 8001bca:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8001bfc <DMA_CalcBaseAndBitshift+0x40>)
 8001bce:	5ca2      	ldrb	r2, [r4, r2]
 8001bd0:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bd2:	295f      	cmp	r1, #95	@ 0x5f
 8001bd4:	d909      	bls.n	8001bea <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	3304      	adds	r3, #4
 8001be0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001be2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	6583      	str	r3, [r0, #88]	@ 0x58
 8001bf4:	e7f5      	b.n	8001be2 <DMA_CalcBaseAndBitshift+0x26>
 8001bf6:	bf00      	nop
 8001bf8:	aaaaaaab 	.word	0xaaaaaaab
 8001bfc:	08003d78 	.word	0x08003d78

08001c00 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c00:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c02:	6982      	ldr	r2, [r0, #24]
 8001c04:	b992      	cbnz	r2, 8001c2c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d00a      	beq.n	8001c20 <DMA_CheckFifoParam+0x20>
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d002      	beq.n	8001c14 <DMA_CheckFifoParam+0x14>
 8001c0e:	b10b      	cbz	r3, 8001c14 <DMA_CheckFifoParam+0x14>
 8001c10:	2000      	movs	r0, #0
 8001c12:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c14:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c16:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c1a:	d128      	bne.n	8001c6e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c20:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c26:	d024      	beq.n	8001c72 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c2c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001c30:	d009      	beq.n	8001c46 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d925      	bls.n	8001c82 <DMA_CheckFifoParam+0x82>
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d125      	bne.n	8001c86 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c3c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c40:	d123      	bne.n	8001c8a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2000      	movs	r0, #0
 8001c44:	4770      	bx	lr
    switch (tmp)
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d803      	bhi.n	8001c52 <DMA_CheckFifoParam+0x52>
 8001c4a:	e8df f003 	tbb	[pc, r3]
 8001c4e:	0414      	.short	0x0414
 8001c50:	0a14      	.short	0x0a14
 8001c52:	2000      	movs	r0, #0
 8001c54:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c56:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c58:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c5c:	d10d      	bne.n	8001c7a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c62:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c68:	d009      	beq.n	8001c7e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	4770      	bx	lr
        status = HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
 8001c70:	4770      	bx	lr
        status = HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
 8001c74:	4770      	bx	lr
      status = HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	4770      	bx	lr
        status = HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	4770      	bx	lr
        status = HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
      status = HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	4770      	bx	lr
    switch (tmp)
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_DMA_Init>:
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
 8001c92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fefe 	bl	8001a94 <HAL_GetTick>
  if(hdma == NULL)
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	d05b      	beq.n	8001d54 <HAL_DMA_Init+0xc4>
 8001c9c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	f012 0f01 	tst.w	r2, #1
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbe:	f7ff fee9 	bl	8001a94 <HAL_GetTick>
 8001cc2:	1b43      	subs	r3, r0, r5
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d9f5      	bls.n	8001cb4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001cd4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd6:	4920      	ldr	r1, [pc, #128]	@ (8001d58 <HAL_DMA_Init+0xc8>)
 8001cd8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cda:	6862      	ldr	r2, [r4, #4]
 8001cdc:	68a0      	ldr	r0, [r4, #8]
 8001cde:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce4:	6920      	ldr	r0, [r4, #16]
 8001ce6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	69a0      	ldr	r0, [r4, #24]
 8001cee:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	6a20      	ldr	r0, [r4, #32]
 8001cf6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001cfc:	2904      	cmp	r1, #4
 8001cfe:	d01e      	beq.n	8001d3e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001d00:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001d02:	6826      	ldr	r6, [r4, #0]
 8001d04:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d06:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001d0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d0c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001d12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d14:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d18:	b11b      	cbz	r3, 8001d22 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ff70 	bl	8001c00 <DMA_CheckFifoParam>
 8001d20:	b990      	cbnz	r0, 8001d48 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001d22:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff49 	bl	8001bbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d2c:	233f      	movs	r3, #63	@ 0x3f
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d32:	2000      	movs	r0, #0
 8001d34:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001d3c:	e7c9      	b.n	8001cd2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001d40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001d42:	4301      	orrs	r1, r0
 8001d44:	430a      	orrs	r2, r1
 8001d46:	e7db      	b.n	8001d00 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d48:	2340      	movs	r3, #64	@ 0x40
 8001d4a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001d52:	e7be      	b.n	8001cd2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e7bc      	b.n	8001cd2 <HAL_DMA_Init+0x42>
 8001d58:	f010803f 	.word	0xf010803f

08001d5c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d02d      	beq.n	8001dbc <HAL_DMA_DeInit+0x60>
{
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d64:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
 8001d68:	b2c0      	uxtb	r0, r0
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d025      	beq.n	8001dba <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8001d6e:	682a      	ldr	r2, [r5, #0]
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	2221      	movs	r2, #33	@ 0x21
 8001d92:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d94:	4628      	mov	r0, r5
 8001d96:	f7ff ff11 	bl	8001bbc <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001d9a:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d9c:	642c      	str	r4, [r5, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d9e:	646c      	str	r4, [r5, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001da0:	64ac      	str	r4, [r5, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001da2:	64ec      	str	r4, [r5, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001da4:	652c      	str	r4, [r5, #80]	@ 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001da8:	233f      	movs	r3, #63	@ 0x3f
 8001daa:	4093      	lsls	r3, r2
 8001dac:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dae:	656c      	str	r4, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8001db0:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001db4:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  return HAL_OK;
 8001db8:	4620      	mov	r0, r4
}
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_DMA_Start>:
{
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001dc4:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001dc8:	2801      	cmp	r0, #1
 8001dca:	d01b      	beq.n	8001e04 <HAL_DMA_Start+0x44>
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd2:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001dd6:	b2c0      	uxtb	r0, r0
 8001dd8:	2801      	cmp	r0, #1
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Start+0x26>
    __HAL_UNLOCK(hdma);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001de2:	2002      	movs	r0, #2
}
 8001de4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de6:	2002      	movs	r0, #2
 8001de8:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dec:	2500      	movs	r5, #0
 8001dee:	6565      	str	r5, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff fecd 	bl	8001b90 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8001df6:	6822      	ldr	r2, [r4, #0]
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	4628      	mov	r0, r5
 8001e02:	e7ef      	b.n	8001de4 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 8001e04:	2002      	movs	r0, #2
 8001e06:	e7ed      	b.n	8001de4 <HAL_DMA_Start+0x24>

08001e08 <HAL_DMA_Start_IT>:
{
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001e0e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001e12:	2801      	cmp	r0, #1
 8001e14:	d02b      	beq.n	8001e6e <HAL_DMA_Start_IT+0x66>
 8001e16:	2001      	movs	r0, #1
 8001e18:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001e20:	b2c0      	uxtb	r0, r0
 8001e22:	2801      	cmp	r0, #1
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001e26:	2300      	movs	r3, #0
 8001e28:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001e2c:	2002      	movs	r0, #2
}
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	2002      	movs	r0, #2
 8001e32:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e36:	2000      	movs	r0, #0
 8001e38:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fea8 	bl	8001b90 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001e42:	233f      	movs	r3, #63	@ 0x3f
 8001e44:	4093      	lsls	r3, r2
 8001e46:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	f043 0316 	orr.w	r3, r3, #22
 8001e50:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e54:	b123      	cbz	r3, 8001e60 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e7df      	b.n	8001e2e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	e7dd      	b.n	8001e2e <HAL_DMA_Start_IT+0x26>

08001e72 <HAL_DMA_Abort>:
{
 8001e72:	b570      	push	{r4, r5, r6, lr}
 8001e74:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fe0c 	bl	8001a94 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d006      	beq.n	8001e94 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f023 0316 	bic.w	r3, r3, #22
 8001e9e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	6953      	ldr	r3, [r2, #20]
 8001ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ea8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001eac:	b1e3      	cbz	r3, 8001ee8 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f023 0308 	bic.w	r3, r3, #8
 8001eb6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f013 0f01 	tst.w	r3, #1
 8001eca:	d011      	beq.n	8001ef0 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ecc:	f7ff fde2 	bl	8001a94 <HAL_GetTick>
 8001ed0:	1b43      	subs	r3, r0, r5
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d9f5      	bls.n	8001ec2 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
 8001edc:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001ee6:	e7d4      	b.n	8001e92 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1df      	bne.n	8001eae <HAL_DMA_Abort+0x3c>
 8001eee:	e7e3      	b.n	8001eb8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ef2:	233f      	movs	r3, #63	@ 0x3f
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001f04:	e7c5      	b.n	8001e92 <HAL_DMA_Abort+0x20>

08001f06 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f18:	2305      	movs	r3, #5
 8001f1a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	6802      	ldr	r2, [r0, #0]
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f28:	2000      	movs	r0, #0
}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_DMA_IRQHandler>:
{
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_DMA_IRQHandler+0x1d4>)
 8001f38:	681d      	ldr	r5, [r3, #0]
 8001f3a:	4b72      	ldr	r3, [pc, #456]	@ (8002104 <HAL_DMA_IRQHandler+0x1d8>)
 8001f3c:	fba3 3505 	umull	r3, r5, r3, r5
 8001f40:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001f44:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f46:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001f48:	2308      	movs	r3, #8
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	4233      	tst	r3, r6
 8001f4e:	d010      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f50:	6803      	ldr	r3, [r0, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f012 0f04 	tst.w	r2, #4
 8001f58:	d00b      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f022 0204 	bic.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f62:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001f64:	2308      	movs	r3, #8
 8001f66:	4093      	lsls	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f6a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f72:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001f74:	2301      	movs	r3, #1
 8001f76:	4093      	lsls	r3, r2
 8001f78:	4233      	tst	r3, r6
 8001f7a:	d009      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	6952      	ldr	r2, [r2, #20]
 8001f80:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f86:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f90:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001f92:	2304      	movs	r3, #4
 8001f94:	4093      	lsls	r3, r2
 8001f96:	4233      	tst	r3, r6
 8001f98:	d009      	beq.n	8001fae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	f012 0f02 	tst.w	r2, #2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	4233      	tst	r3, r6
 8001fb6:	d024      	beq.n	8002002 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb8:	6822      	ldr	r2, [r4, #0]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	f012 0f08 	tst.w	r2, #8
 8001fc0:	d01f      	beq.n	8002002 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fc2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001fcc:	d00d      	beq.n	8001fea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001fd4:	d104      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fd8:	b19b      	cbz	r3, 8002002 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4798      	blx	r3
 8001fde:	e010      	b.n	8002002 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001fe2:	b173      	cbz	r3, 8002002 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	4798      	blx	r3
 8001fe8:	e00b      	b.n	8002002 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001ff0:	d103      	bne.n	8001ffa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001ffa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ffc:	b10b      	cbz	r3, 8002002 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001ffe:	4620      	mov	r0, r4
 8002000:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002004:	2320      	movs	r3, #32
 8002006:	4093      	lsls	r3, r2
 8002008:	4233      	tst	r3, r6
 800200a:	d055      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f012 0f10 	tst.w	r2, #16
 8002014:	d050      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002016:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002018:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b05      	cmp	r3, #5
 8002020:	d00e      	beq.n	8002040 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800202a:	d033      	beq.n	8002094 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002032:	d12a      	bne.n	800208a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002034:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800203a:	4620      	mov	r0, r4
 800203c:	4798      	blx	r3
 800203e:	e03b      	b.n	80020b8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f023 0316 	bic.w	r3, r3, #22
 8002048:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6953      	ldr	r3, [r2, #20]
 800204e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002052:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002056:	b1a3      	cbz	r3, 8002082 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f023 0308 	bic.w	r3, r3, #8
 8002060:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002062:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002064:	233f      	movs	r3, #63	@ 0x3f
 8002066:	4093      	lsls	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800206a:	2301      	movs	r3, #1
 800206c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002070:	2300      	movs	r3, #0
 8002072:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002076:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03f      	beq.n	80020fc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800207c:	4620      	mov	r0, r4
 800207e:	4798      	blx	r3
        return;
 8002080:	e03c      	b.n	80020fc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002082:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e7      	bne.n	8002058 <HAL_DMA_IRQHandler+0x12c>
 8002088:	e7eb      	b.n	8002062 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800208a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800208c:	b1a3      	cbz	r3, 80020b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800208e:	4620      	mov	r0, r4
 8002090:	4798      	blx	r3
 8002092:	e011      	b.n	80020b8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800209a:	d109      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f022 0210 	bic.w	r2, r2, #16
 80020a2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80020aa:	2300      	movs	r3, #0
 80020ac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80020b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020b2:	b10b      	cbz	r3, 80020b8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80020b4:	4620      	mov	r0, r4
 80020b6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020ba:	b1fb      	cbz	r3, 80020fc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020be:	f013 0f01 	tst.w	r3, #1
 80020c2:	d017      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	2305      	movs	r3, #5
 80020c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80020d4:	9b01      	ldr	r3, [sp, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	42ab      	cmp	r3, r5
 80020dc:	d804      	bhi.n	80020e8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f013 0f01 	tst.w	r3, #1
 80020e6:	d1f5      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80020ee:	2300      	movs	r3, #0
 80020f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80020f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80020f6:	b10b      	cbz	r3, 80020fc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80020f8:	4620      	mov	r0, r4
 80020fa:	4798      	blx	r3
}
 80020fc:	b003      	add	sp, #12
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002100:	20000010 	.word	0x20000010
 8002104:	1b4e81b5 	.word	0x1b4e81b5

08002108 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002108:	2300      	movs	r3, #0
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f200 80e9 	bhi.w	80022e2 <HAL_GPIO_Init+0x1da>
{
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	e065      	b.n	80021e2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800211c:	2403      	movs	r4, #3
 800211e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002122:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002126:	68cc      	ldr	r4, [r1, #12]
 8002128:	fa04 f40e 	lsl.w	r4, r4, lr
 800212c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800212e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002132:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	684a      	ldr	r2, [r1, #4]
 8002138:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002140:	6042      	str	r2, [r0, #4]
 8002142:	e05c      	b.n	80021fe <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002144:	08dc      	lsrs	r4, r3, #3
 8002146:	3408      	adds	r4, #8
 8002148:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214c:	f003 0507 	and.w	r5, r3, #7
 8002150:	00ad      	lsls	r5, r5, #2
 8002152:	f04f 0e0f 	mov.w	lr, #15
 8002156:	fa0e fe05 	lsl.w	lr, lr, r5
 800215a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215e:	690a      	ldr	r2, [r1, #16]
 8002160:	40aa      	lsls	r2, r5
 8002162:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800216a:	e05c      	b.n	8002226 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216c:	2207      	movs	r2, #7
 800216e:	e000      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 8002170:	2200      	movs	r2, #0
 8002172:	fa02 f20e 	lsl.w	r2, r2, lr
 8002176:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002178:	3402      	adds	r4, #2
 800217a:	4d5a      	ldr	r5, [pc, #360]	@ (80022e4 <HAL_GPIO_Init+0x1dc>)
 800217c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002180:	4a59      	ldr	r2, [pc, #356]	@ (80022e8 <HAL_GPIO_Init+0x1e0>)
 8002182:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002184:	ea6f 020c 	mvn.w	r2, ip
 8002188:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218c:	684e      	ldr	r6, [r1, #4]
 800218e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002192:	d001      	beq.n	8002198 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002194:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002198:	4c53      	ldr	r4, [pc, #332]	@ (80022e8 <HAL_GPIO_Init+0x1e0>)
 800219a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800219c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800219e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a2:	684e      	ldr	r6, [r1, #4]
 80021a4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80021a8:	d001      	beq.n	80021ae <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80021aa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80021ae:	4c4e      	ldr	r4, [pc, #312]	@ (80022e8 <HAL_GPIO_Init+0x1e0>)
 80021b0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80021b2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b8:	684e      	ldr	r6, [r1, #4]
 80021ba:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80021be:	d001      	beq.n	80021c4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80021c0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80021c4:	4c48      	ldr	r4, [pc, #288]	@ (80022e8 <HAL_GPIO_Init+0x1e0>)
 80021c6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021cc:	684d      	ldr	r5, [r1, #4]
 80021ce:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80021d2:	d001      	beq.n	80021d8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80021d4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80021d8:	4c43      	ldr	r4, [pc, #268]	@ (80022e8 <HAL_GPIO_Init+0x1e0>)
 80021da:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021dc:	3301      	adds	r3, #1
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d87d      	bhi.n	80022de <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	680c      	ldr	r4, [r1, #0]
 80021e8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80021ec:	ea32 0404 	bics.w	r4, r2, r4
 80021f0:	d1f4      	bne.n	80021dc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	684c      	ldr	r4, [r1, #4]
 80021f4:	f004 0403 	and.w	r4, r4, #3
 80021f8:	3c01      	subs	r4, #1
 80021fa:	2c01      	cmp	r4, #1
 80021fc:	d98b      	bls.n	8002116 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fe:	684a      	ldr	r2, [r1, #4]
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	2a03      	cmp	r2, #3
 8002206:	d009      	beq.n	800221c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002208:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220a:	005d      	lsls	r5, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	40aa      	lsls	r2, r5
 8002210:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	688a      	ldr	r2, [r1, #8]
 8002216:	40aa      	lsls	r2, r5
 8002218:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800221a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	684a      	ldr	r2, [r1, #4]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	2a02      	cmp	r2, #2
 8002224:	d08e      	beq.n	8002144 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002226:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002228:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002232:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002236:	684a      	ldr	r2, [r1, #4]
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002240:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002242:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002244:	684a      	ldr	r2, [r1, #4]
 8002246:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800224a:	d0c7      	beq.n	80021dc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224c:	2200      	movs	r2, #0
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <HAL_GPIO_Init+0x1e4>)
 8002252:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002254:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002258:	6454      	str	r4, [r2, #68]	@ 0x44
 800225a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800225c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002260:	9201      	str	r2, [sp, #4]
 8002262:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002264:	089c      	lsrs	r4, r3, #2
 8002266:	1ca5      	adds	r5, r4, #2
 8002268:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <HAL_GPIO_Init+0x1dc>)
 800226a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226e:	f003 0e03 	and.w	lr, r3, #3
 8002272:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f20e 	lsl.w	r2, r2, lr
 800227c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_GPIO_Init+0x1e8>)
 8002282:	4290      	cmp	r0, r2
 8002284:	f43f af74 	beq.w	8002170 <HAL_GPIO_Init+0x68>
 8002288:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800228c:	4290      	cmp	r0, r2
 800228e:	d01a      	beq.n	80022c6 <HAL_GPIO_Init+0x1be>
 8002290:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002294:	4290      	cmp	r0, r2
 8002296:	d018      	beq.n	80022ca <HAL_GPIO_Init+0x1c2>
 8002298:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800229c:	4290      	cmp	r0, r2
 800229e:	d016      	beq.n	80022ce <HAL_GPIO_Init+0x1c6>
 80022a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022a4:	4290      	cmp	r0, r2
 80022a6:	d014      	beq.n	80022d2 <HAL_GPIO_Init+0x1ca>
 80022a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022ac:	4290      	cmp	r0, r2
 80022ae:	d012      	beq.n	80022d6 <HAL_GPIO_Init+0x1ce>
 80022b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d010      	beq.n	80022da <HAL_GPIO_Init+0x1d2>
 80022b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022bc:	4290      	cmp	r0, r2
 80022be:	f43f af55 	beq.w	800216c <HAL_GPIO_Init+0x64>
 80022c2:	2208      	movs	r2, #8
 80022c4:	e755      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022c6:	2201      	movs	r2, #1
 80022c8:	e753      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022ca:	2202      	movs	r2, #2
 80022cc:	e751      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022ce:	2203      	movs	r2, #3
 80022d0:	e74f      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022d2:	2204      	movs	r2, #4
 80022d4:	e74d      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022d6:	2205      	movs	r2, #5
 80022d8:	e74b      	b.n	8002172 <HAL_GPIO_Init+0x6a>
 80022da:	2206      	movs	r2, #6
 80022dc:	e749      	b.n	8002172 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80022de:	b002      	add	sp, #8
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	4770      	bx	lr
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40013c00 	.word	0x40013c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022f4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022f6:	ea01 0203 	and.w	r2, r1, r3
 80022fa:	ea21 0103 	bic.w	r1, r1, r3
 80022fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002302:	6181      	str	r1, [r0, #24]
}
 8002304:	4770      	bx	lr

08002306 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002308:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4203      	tst	r3, r0
 8002310:	d100      	bne.n	8002314 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002312:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002314:	4b02      	ldr	r3, [pc, #8]	@ (8002320 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002316:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002318:	f7ff fff5 	bl	8002306 <HAL_GPIO_EXTI_Callback>
}
 800231c:	e7f9      	b.n	8002312 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800231e:	bf00      	nop
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2100      	movs	r1, #0
 8002328:	9100      	str	r1, [sp, #0]
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_MspInit+0x34>)
 800232c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800232e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
 8002334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002336:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800233a:	9200      	str	r2, [sp, #0]
 800233c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	9101      	str	r1, [sp, #4]
 8002340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002342:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	b002      	add	sp, #8
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b510      	push	{r4, lr}
 800235e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	2300      	movs	r3, #0
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	9305      	str	r3, [sp, #20]
 8002368:	9306      	str	r3, [sp, #24]
 800236a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_UART_MspInit+0x74>)
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002374:	b008      	add	sp, #32
 8002376:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002378:	2400      	movs	r4, #0
 800237a:	9401      	str	r4, [sp, #4]
 800237c:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8002380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002382:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40
 8002388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800238e:	9201      	str	r2, [sp, #4]
 8002390:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	9402      	str	r4, [sp, #8]
 8002394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a6:	230c      	movs	r3, #12
 80023a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	a903      	add	r1, sp, #12
 80023b8:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <HAL_UART_MspInit+0x78>)
 80023ba:	f7ff fea5 	bl	8002108 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023be:	4622      	mov	r2, r4
 80023c0:	4621      	mov	r1, r4
 80023c2:	2026      	movs	r0, #38	@ 0x26
 80023c4:	f7ff fbb2 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c8:	2026      	movs	r0, #38	@ 0x26
 80023ca:	f7ff fbbf 	bl	8001b4c <HAL_NVIC_EnableIRQ>
}
 80023ce:	e7d1      	b.n	8002374 <HAL_UART_MspInit+0x18>
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	2800      	cmp	r0, #0
 80023da:	f000 81e0 	beq.w	800279e <HAL_RCC_OscConfig+0x3c6>
{
 80023de:	b570      	push	{r4, r5, r6, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	f013 0f01 	tst.w	r3, #1
 80023ea:	d03b      	beq.n	8002464 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ec:	4b9f      	ldr	r3, [pc, #636]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d02c      	beq.n	8002452 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b9c      	ldr	r3, [pc, #624]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002400:	2b08      	cmp	r3, #8
 8002402:	d021      	beq.n	8002448 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	6863      	ldr	r3, [r4, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240a:	d04f      	beq.n	80024ac <HAL_RCC_OscConfig+0xd4>
 800240c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002410:	d052      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
 8002412:	4b96      	ldr	r3, [pc, #600]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002422:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d050      	beq.n	80024cc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fb33 	bl	8001a94 <HAL_GetTick>
 800242e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	4b8e      	ldr	r3, [pc, #568]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002438:	d114      	bne.n	8002464 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243a:	f7ff fb2b 	bl	8001a94 <HAL_GetTick>
 800243e:	1b40      	subs	r0, r0, r5
 8002440:	2864      	cmp	r0, #100	@ 0x64
 8002442:	d9f5      	bls.n	8002430 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002444:	2003      	movs	r0, #3
 8002446:	e1b1      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002448:	4b88      	ldr	r3, [pc, #544]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002450:	d0d8      	beq.n	8002404 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b86      	ldr	r3, [pc, #536]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800245a:	d003      	beq.n	8002464 <HAL_RCC_OscConfig+0x8c>
 800245c:	6863      	ldr	r3, [r4, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 819f 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	f013 0f02 	tst.w	r3, #2
 800246a:	d054      	beq.n	8002516 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246c:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f013 0f0c 	tst.w	r3, #12
 8002474:	d03e      	beq.n	80024f4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b7d      	ldr	r3, [pc, #500]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d033      	beq.n	80024ea <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002482:	68e3      	ldr	r3, [r4, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d068      	beq.n	800255a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b79      	ldr	r3, [pc, #484]	@ (8002670 <HAL_RCC_OscConfig+0x298>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7ff fb01 	bl	8001a94 <HAL_GetTick>
 8002492:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f013 0f02 	tst.w	r3, #2
 800249c:	d154      	bne.n	8002548 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff faf9 	bl	8001a94 <HAL_GetTick>
 80024a2:	1b40      	subs	r0, r0, r5
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d9f5      	bls.n	8002494 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80024a8:	2003      	movs	r0, #3
 80024aa:	e17f      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	4a6f      	ldr	r2, [pc, #444]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e7b5      	b.n	8002424 <HAL_RCC_OscConfig+0x4c>
 80024b8:	4b6c      	ldr	r3, [pc, #432]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e7ab      	b.n	8002424 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80024cc:	f7ff fae2 	bl	8001a94 <HAL_GetTick>
 80024d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b66      	ldr	r3, [pc, #408]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024da:	d0c3      	beq.n	8002464 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fada 	bl	8001a94 <HAL_GetTick>
 80024e0:	1b40      	subs	r0, r0, r5
 80024e2:	2864      	cmp	r0, #100	@ 0x64
 80024e4:	d9f5      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
 80024e8:	e160      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b60      	ldr	r3, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024f2:	d1c6      	bne.n	8002482 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f4:	4b5d      	ldr	r3, [pc, #372]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f013 0f02 	tst.w	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_OscConfig+0x12e>
 80024fe:	68e3      	ldr	r3, [r4, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 8150 	bne.w	80027a6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4a59      	ldr	r2, [pc, #356]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002508:	6813      	ldr	r3, [r2, #0]
 800250a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800250e:	6921      	ldr	r1, [r4, #16]
 8002510:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002514:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	f013 0f08 	tst.w	r3, #8
 800251c:	d042      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800251e:	6963      	ldr	r3, [r4, #20]
 8002520:	b36b      	cbz	r3, 800257e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_OscConfig+0x298>)
 8002524:	2201      	movs	r2, #1
 8002526:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff fab3 	bl	8001a94 <HAL_GetTick>
 800252e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002530:	4b4e      	ldr	r3, [pc, #312]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	f013 0f02 	tst.w	r3, #2
 8002538:	d134      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7ff faab 	bl	8001a94 <HAL_GetTick>
 800253e:	1b40      	subs	r0, r0, r5
 8002540:	2802      	cmp	r0, #2
 8002542:	d9f5      	bls.n	8002530 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002544:	2003      	movs	r0, #3
 8002546:	e131      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002548:	4a48      	ldr	r2, [pc, #288]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002550:	6921      	ldr	r1, [r4, #16]
 8002552:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e7dd      	b.n	8002516 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b45      	ldr	r3, [pc, #276]	@ (8002670 <HAL_RCC_OscConfig+0x298>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002560:	f7ff fa98 	bl	8001a94 <HAL_GetTick>
 8002564:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	4b41      	ldr	r3, [pc, #260]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f013 0f02 	tst.w	r3, #2
 800256e:	d0d2      	beq.n	8002516 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fa90 	bl	8001a94 <HAL_GetTick>
 8002574:	1b40      	subs	r0, r0, r5
 8002576:	2802      	cmp	r0, #2
 8002578:	d9f5      	bls.n	8002566 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800257a:	2003      	movs	r0, #3
 800257c:	e116      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <HAL_RCC_OscConfig+0x298>)
 8002580:	2200      	movs	r2, #0
 8002582:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7ff fa85 	bl	8001a94 <HAL_GetTick>
 800258a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002590:	f013 0f02 	tst.w	r3, #2
 8002594:	d006      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002596:	f7ff fa7d 	bl	8001a94 <HAL_GetTick>
 800259a:	1b40      	subs	r0, r0, r5
 800259c:	2802      	cmp	r0, #2
 800259e:	d9f5      	bls.n	800258c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80025a0:	2003      	movs	r0, #3
 80025a2:	e103      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f013 0f04 	tst.w	r3, #4
 80025aa:	d077      	beq.n	800269c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ac:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80025b4:	d133      	bne.n	800261e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80025bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025be:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025ce:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_OscConfig+0x29c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025d8:	d023      	beq.n	8002622 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025da:	68a3      	ldr	r3, [r4, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d034      	beq.n	800264a <HAL_RCC_OscConfig+0x272>
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d038      	beq.n	8002656 <HAL_RCC_OscConfig+0x27e>
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 80025e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80025ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025f0:	f022 0204 	bic.w	r2, r2, #4
 80025f4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f6:	68a3      	ldr	r3, [r4, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03d      	beq.n	8002678 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7ff fa4a 	bl	8001a94 <HAL_GetTick>
 8002600:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	f013 0f02 	tst.w	r3, #2
 800260a:	d146      	bne.n	800269a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7ff fa42 	bl	8001a94 <HAL_GetTick>
 8002610:	1b80      	subs	r0, r0, r6
 8002612:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002616:	4298      	cmp	r0, r3
 8002618:	d9f3      	bls.n	8002602 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800261a:	2003      	movs	r0, #3
 800261c:	e0c6      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2500      	movs	r5, #0
 8002620:	e7d6      	b.n	80025d0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <HAL_RCC_OscConfig+0x29c>)
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800262c:	f7ff fa32 	bl	8001a94 <HAL_GetTick>
 8002630:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_RCC_OscConfig+0x29c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800263a:	d1ce      	bne.n	80025da <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7ff fa2a 	bl	8001a94 <HAL_GetTick>
 8002640:	1b80      	subs	r0, r0, r6
 8002642:	2802      	cmp	r0, #2
 8002644:	d9f5      	bls.n	8002632 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002646:	2003      	movs	r0, #3
 8002648:	e0b0      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 800264c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	@ 0x70
 8002654:	e7cf      	b.n	80025f6 <HAL_RCC_OscConfig+0x21e>
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x294>)
 8002658:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800265a:	f042 0204 	orr.w	r2, r2, #4
 800265e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002660:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	671a      	str	r2, [r3, #112]	@ 0x70
 8002668:	e7c5      	b.n	80025f6 <HAL_RCC_OscConfig+0x21e>
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	42470000 	.word	0x42470000
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7ff fa0c 	bl	8001a94 <HAL_GetTick>
 800267c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	4b52      	ldr	r3, [pc, #328]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	f013 0f02 	tst.w	r3, #2
 8002686:	d008      	beq.n	800269a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7ff fa04 	bl	8001a94 <HAL_GetTick>
 800268c:	1b80      	subs	r0, r0, r6
 800268e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002692:	4298      	cmp	r0, r3
 8002694:	d9f3      	bls.n	800267e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
 8002698:	e088      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269a:	b9ed      	cbnz	r5, 80026d8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269c:	69a3      	ldr	r3, [r4, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8083 	beq.w	80027aa <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a4:	4a48      	ldr	r2, [pc, #288]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 80026a6:	6892      	ldr	r2, [r2, #8]
 80026a8:	f002 020c 	and.w	r2, r2, #12
 80026ac:	2a08      	cmp	r2, #8
 80026ae:	d051      	beq.n	8002754 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d017      	beq.n	80026e4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b45      	ldr	r3, [pc, #276]	@ (80027cc <HAL_RCC_OscConfig+0x3f4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff f9eb 	bl	8001a94 <HAL_GetTick>
 80026be:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026c8:	d042      	beq.n	8002750 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ca:	f7ff f9e3 	bl	8001a94 <HAL_GetTick>
 80026ce:	1b00      	subs	r0, r0, r4
 80026d0:	2802      	cmp	r0, #2
 80026d2:	d9f5      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026d4:	2003      	movs	r0, #3
 80026d6:	e069      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d8:	4a3b      	ldr	r2, [pc, #236]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 80026da:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	e7db      	b.n	800269c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <HAL_RCC_OscConfig+0x3f4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80026ea:	f7ff f9d3 	bl	8001a94 <HAL_GetTick>
 80026ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026f8:	d006      	beq.n	8002708 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7ff f9cb 	bl	8001a94 <HAL_GetTick>
 80026fe:	1b40      	subs	r0, r0, r5
 8002700:	2802      	cmp	r0, #2
 8002702:	d9f5      	bls.n	80026f0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002704:	2003      	movs	r0, #3
 8002706:	e051      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002708:	69e3      	ldr	r3, [r4, #28]
 800270a:	6a22      	ldr	r2, [r4, #32]
 800270c:	4313      	orrs	r3, r2
 800270e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002710:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002714:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800271e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002720:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002724:	4a28      	ldr	r2, [pc, #160]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 8002726:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_RCC_OscConfig+0x3f4>)
 800272a:	2201      	movs	r2, #1
 800272c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800272e:	f7ff f9b1 	bl	8001a94 <HAL_GetTick>
 8002732:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f9a9 	bl	8001a94 <HAL_GetTick>
 8002742:	1b00      	subs	r0, r0, r4
 8002744:	2802      	cmp	r0, #2
 8002746:	d9f5      	bls.n	8002734 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002748:	2003      	movs	r0, #3
 800274a:	e02f      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	e02d      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 8002750:	2000      	movs	r0, #0
 8002752:	e02b      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	2b01      	cmp	r3, #1
 8002756:	d02b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_RCC_OscConfig+0x3f0>)
 800275a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002760:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	4291      	cmp	r1, r2
 8002764:	d126      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276c:	428a      	cmp	r2, r1
 800276e:	d123      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002770:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002772:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002776:	401a      	ands	r2, r3
 8002778:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800277c:	d11e      	bne.n	80027bc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002782:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002784:	0852      	lsrs	r2, r2, #1
 8002786:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002788:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002792:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002798:	d114      	bne.n	80027c4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800279a:	2000      	movs	r0, #0
 800279c:	e006      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
}
 80027a0:	4770      	bx	lr
        return HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
 80027a4:	e002      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80027aa:	2000      	movs	r0, #0
}
 80027ac:	b002      	add	sp, #8
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	e7fb      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
 80027b6:	e7f9      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 80027b8:	2001      	movs	r0, #1
 80027ba:	e7f7      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 80027bc:	2001      	movs	r0, #1
 80027be:	e7f5      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7f3      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 80027c4:	2001      	movs	r0, #1
 80027c6:	e7f1      	b.n	80027ac <HAL_RCC_OscConfig+0x3d4>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470000 	.word	0x42470000

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d2:	4b33      	ldr	r3, [pc, #204]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d05b      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0xc6>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d15b      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e2:	4b2f      	ldr	r3, [pc, #188]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80027f0:	d02c      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027f4:	6858      	ldr	r0, [r3, #4]
 80027f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80027fa:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80027fe:	ebbc 0c00 	subs.w	ip, ip, r0
 8002802:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002806:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800280a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800280e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002812:	ebb1 010c 	subs.w	r1, r1, ip
 8002816:	eb63 030e 	sbc.w	r3, r3, lr
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002820:	00c9      	lsls	r1, r1, #3
 8002822:	eb11 0c00 	adds.w	ip, r1, r0
 8002826:	f143 0300 	adc.w	r3, r3, #0
 800282a:	0259      	lsls	r1, r3, #9
 800282c:	2300      	movs	r3, #0
 800282e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002832:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002836:	f7fd fca7 	bl	8000188 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002846:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800284a:	e027      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800284e:	6858      	ldr	r0, [r3, #4]
 8002850:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002854:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002858:	ebbc 0c00 	subs.w	ip, ip, r0
 800285c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002860:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002864:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002868:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800286c:	ebb1 010c 	subs.w	r1, r1, ip
 8002870:	eb63 030e 	sbc.w	r3, r3, lr
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	00c9      	lsls	r1, r1, #3
 800287c:	eb11 0c00 	adds.w	ip, r1, r0
 8002880:	f143 0300 	adc.w	r3, r3, #0
 8002884:	0299      	lsls	r1, r3, #10
 8002886:	2300      	movs	r3, #0
 8002888:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800288c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002890:	f7fd fc7a 	bl	8000188 <__aeabi_uldivmod>
 8002894:	e7d1      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002896:	4803      	ldr	r0, [pc, #12]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002898:	e000      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800289a:	4803      	ldr	r0, [pc, #12]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800289c:	bd08      	pop	{r3, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	007a1200 	.word	0x007a1200
 80028a8:	00f42400 	.word	0x00f42400

080028ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80028ac:	2800      	cmp	r0, #0
 80028ae:	f000 809b 	beq.w	80029e8 <HAL_RCC_ClockConfig+0x13c>
{
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	460d      	mov	r5, r1
 80028b6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b4f      	ldr	r3, [pc, #316]	@ (80029f8 <HAL_RCC_ClockConfig+0x14c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	428b      	cmp	r3, r1
 80028c2:	d208      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c4:	b2cb      	uxtb	r3, r1
 80028c6:	4a4c      	ldr	r2, [pc, #304]	@ (80029f8 <HAL_RCC_ClockConfig+0x14c>)
 80028c8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	428b      	cmp	r3, r1
 80028d2:	f040 808b 	bne.w	80029ec <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f013 0f02 	tst.w	r3, #2
 80028dc:	d017      	beq.n	800290e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028de:	f013 0f04 	tst.w	r3, #4
 80028e2:	d004      	beq.n	80028ee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e4:	4a45      	ldr	r2, [pc, #276]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 80028e6:	6893      	ldr	r3, [r2, #8]
 80028e8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f013 0f08 	tst.w	r3, #8
 80028f4:	d004      	beq.n	8002900 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f6:	4a41      	ldr	r2, [pc, #260]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 80028f8:	6893      	ldr	r3, [r2, #8]
 80028fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028fe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4a3e      	ldr	r2, [pc, #248]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 8002902:	6893      	ldr	r3, [r2, #8]
 8002904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002908:	68a1      	ldr	r1, [r4, #8]
 800290a:	430b      	orrs	r3, r1
 800290c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	f013 0f01 	tst.w	r3, #1
 8002914:	d032      	beq.n	800297c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d021      	beq.n	8002960 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291c:	1e9a      	subs	r2, r3, #2
 800291e:	2a01      	cmp	r2, #1
 8002920:	d925      	bls.n	800296e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4a36      	ldr	r2, [pc, #216]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	f012 0f02 	tst.w	r2, #2
 800292a:	d061      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292c:	4933      	ldr	r1, [pc, #204]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 800292e:	688a      	ldr	r2, [r1, #8]
 8002930:	f022 0203 	bic.w	r2, r2, #3
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002938:	f7ff f8ac 	bl	8001a94 <HAL_GetTick>
 800293c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800294c:	d016      	beq.n	800297c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294e:	f7ff f8a1 	bl	8001a94 <HAL_GetTick>
 8002952:	1b80      	subs	r0, r0, r6
 8002954:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002958:	4298      	cmp	r0, r3
 800295a:	d9f0      	bls.n	800293e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800295c:	2003      	movs	r0, #3
 800295e:	e042      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002968:	d1e0      	bne.n	800292c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
 800296c:	e03b      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4a23      	ldr	r2, [pc, #140]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002976:	d1d9      	bne.n	800292c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
 800297a:	e034      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <HAL_RCC_ClockConfig+0x14c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	42ab      	cmp	r3, r5
 8002986:	d907      	bls.n	8002998 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002988:	b2ea      	uxtb	r2, r5
 800298a:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_ClockConfig+0x14c>)
 800298c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	42ab      	cmp	r3, r5
 8002996:	d12d      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	f013 0f04 	tst.w	r3, #4
 800299e:	d006      	beq.n	80029ae <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 80029a2:	6893      	ldr	r3, [r2, #8]
 80029a4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80029a8:	68e1      	ldr	r1, [r4, #12]
 80029aa:	430b      	orrs	r3, r1
 80029ac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	f013 0f08 	tst.w	r3, #8
 80029b4:	d007      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 80029b8:	6893      	ldr	r3, [r2, #8]
 80029ba:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80029be:	6921      	ldr	r1, [r4, #16]
 80029c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029c4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c6:	f7ff ff03 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_RCC_ClockConfig+0x150>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x154>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	40d8      	lsrs	r0, r3
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_RCC_ClockConfig+0x158>)
 80029da:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_RCC_ClockConfig+0x15c>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f7ff f80c 	bl	80019fc <HAL_InitTick>
  return HAL_OK;
 80029e4:	2000      	movs	r0, #0
}
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029e8:	2001      	movs	r0, #1
}
 80029ea:	4770      	bx	lr
      return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7fa      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80029f0:	2001      	movs	r0, #1
 80029f2:	e7f8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e7f6      	b.n	80029e6 <HAL_RCC_ClockConfig+0x13a>
 80029f8:	40023c00 	.word	0x40023c00
 80029fc:	40023800 	.word	0x40023800
 8002a00:	08003d88 	.word	0x08003d88
 8002a04:	20000010 	.word	0x20000010
 8002a08:	2000000c 	.word	0x2000000c

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002a0c:	4b01      	ldr	r3, [pc, #4]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x8>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000010 	.word	0x20000010

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a1a:	f7ff fff7 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a26:	4a03      	ldr	r2, [pc, #12]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a2a:	40d8      	lsrs	r0, r3
 8002a2c:	bd08      	pop	{r3, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08003d80 	.word	0x08003d80

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a3a:	f7ff ffe7 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a3e:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a46:	4a03      	ldr	r2, [pc, #12]	@ (8002a54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a4a:	40d8      	lsrs	r0, r3
 8002a4c:	bd08      	pop	{r3, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08003d80 	.word	0x08003d80

08002a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5a:	6a03      	ldr	r3, [r0, #32]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a66:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a68:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a6c:	680c      	ldr	r4, [r1, #0]
 8002a6e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a72:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a76:	688b      	ldr	r3, [r1, #8]
 8002a78:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a7c:	4d11      	ldr	r5, [pc, #68]	@ (8002ac4 <TIM_OC1_SetConfig+0x6c>)
 8002a7e:	42a8      	cmp	r0, r5
 8002a80:	d003      	beq.n	8002a8a <TIM_OC1_SetConfig+0x32>
 8002a82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002a86:	42a8      	cmp	r0, r5
 8002a88:	d105      	bne.n	8002a96 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a8a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a8e:	68cd      	ldr	r5, [r1, #12]
 8002a90:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a92:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a96:	4d0b      	ldr	r5, [pc, #44]	@ (8002ac4 <TIM_OC1_SetConfig+0x6c>)
 8002a98:	42a8      	cmp	r0, r5
 8002a9a:	d003      	beq.n	8002aa4 <TIM_OC1_SetConfig+0x4c>
 8002a9c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002aa0:	42a8      	cmp	r0, r5
 8002aa2:	d107      	bne.n	8002ab4 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aa4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aa8:	694d      	ldr	r5, [r1, #20]
 8002aaa:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aae:	698a      	ldr	r2, [r1, #24]
 8002ab0:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab8:	684a      	ldr	r2, [r1, #4]
 8002aba:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abc:	6203      	str	r3, [r0, #32]
}
 8002abe:	bc30      	pop	{r4, r5}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000

08002ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aca:	6a03      	ldr	r3, [r0, #32]
 8002acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ad0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ad8:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002adc:	680c      	ldr	r4, [r1, #0]
 8002ade:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ae2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ae6:	688c      	ldr	r4, [r1, #8]
 8002ae8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aec:	4c11      	ldr	r4, [pc, #68]	@ (8002b34 <TIM_OC3_SetConfig+0x6c>)
 8002aee:	42a0      	cmp	r0, r4
 8002af0:	d003      	beq.n	8002afa <TIM_OC3_SetConfig+0x32>
 8002af2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002af6:	42a0      	cmp	r0, r4
 8002af8:	d106      	bne.n	8002b08 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afe:	68cc      	ldr	r4, [r1, #12]
 8002b00:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	4c0a      	ldr	r4, [pc, #40]	@ (8002b34 <TIM_OC3_SetConfig+0x6c>)
 8002b0a:	42a0      	cmp	r0, r4
 8002b0c:	d003      	beq.n	8002b16 <TIM_OC3_SetConfig+0x4e>
 8002b0e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002b12:	42a0      	cmp	r0, r4
 8002b14:	d107      	bne.n	8002b26 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b16:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b1a:	694c      	ldr	r4, [r1, #20]
 8002b1c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b20:	698c      	ldr	r4, [r1, #24]
 8002b22:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b26:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b28:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2a:	684a      	ldr	r2, [r1, #4]
 8002b2c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2e:	6203      	str	r3, [r0, #32]
}
 8002b30:	bc30      	pop	{r4, r5}
 8002b32:	4770      	bx	lr
 8002b34:	40010000 	.word	0x40010000

08002b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3a:	6a03      	ldr	r3, [r0, #32]
 8002b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b46:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b48:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	680d      	ldr	r5, [r1, #0]
 8002b4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b56:	688d      	ldr	r5, [r1, #8]
 8002b58:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5c:	4d09      	ldr	r5, [pc, #36]	@ (8002b84 <TIM_OC4_SetConfig+0x4c>)
 8002b5e:	42a8      	cmp	r0, r5
 8002b60:	d003      	beq.n	8002b6a <TIM_OC4_SetConfig+0x32>
 8002b62:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b66:	42a8      	cmp	r0, r5
 8002b68:	d104      	bne.n	8002b74 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b6a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b6e:	694d      	ldr	r5, [r1, #20]
 8002b70:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b76:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b78:	684a      	ldr	r2, [r1, #4]
 8002b7a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7c:	6203      	str	r3, [r0, #32]
}
 8002b7e:	bc30      	pop	{r4, r5}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000

08002b88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d132      	bne.n	8002bf8 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <HAL_TIM_Base_Start+0x78>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d020      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d01d      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002ba6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d015      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002bb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d011      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002bbe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002bc6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
 8002bce:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d005      	beq.n	8002be2 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bde:	2000      	movs	r0, #0
 8002be0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	2a06      	cmp	r2, #6
 8002bea:	d007      	beq.n	8002bfc <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	4770      	bx	lr
    return HAL_ERROR;
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	4770      	bx	lr
  return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
}
 8002bfe:	4770      	bx	lr
 8002c00:	40010000 	.word	0x40010000

08002c04 <HAL_TIM_PWM_MspInit>:
}
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_IC_CaptureCallback>:
}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_TriggerCallback>:
}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_IRQHandler>:
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c12:	6803      	ldr	r3, [r0, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	f012 0f02 	tst.w	r2, #2
 8002c1a:	d011      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	f012 0f02 	tst.w	r2, #2
 8002c22:	d00d      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c24:	f06f 0202 	mvn.w	r2, #2
 8002c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f013 0f03 	tst.w	r3, #3
 8002c36:	d070      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	f7ff ffe6 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	f012 0f04 	tst.w	r2, #4
 8002c48:	d012      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	f012 0f04 	tst.w	r2, #4
 8002c50:	d00e      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c52:	f06f 0204 	mvn.w	r2, #4
 8002c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002c64:	d05f      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffce 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	f012 0f08 	tst.w	r2, #8
 8002c78:	d012      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	f012 0f08 	tst.w	r2, #8
 8002c80:	d00e      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c82:	f06f 0208 	mvn.w	r2, #8
 8002c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f013 0f03 	tst.w	r3, #3
 8002c94:	d04e      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff ffb6 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	f012 0f10 	tst.w	r2, #16
 8002ca8:	d012      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	f012 0f10 	tst.w	r2, #16
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb2:	f06f 0210 	mvn.w	r2, #16
 8002cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002cc4:	d03d      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff ff9e 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	f012 0f01 	tst.w	r2, #1
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	f012 0f01 	tst.w	r2, #1
 8002ce0:	d136      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002cea:	d003      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002cf2:	d134      	bne.n	8002d5e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002d04:	d132      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	f012 0f20 	tst.w	r2, #32
 8002d0e:	d003      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	f012 0f20 	tst.w	r2, #32
 8002d16:	d130      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x16c>
}
 8002d18:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	f7ff ff74 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff ff73 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
 8002d24:	e78a      	b.n	8002c3c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff ff6d 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff6c 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
 8002d32:	e79b      	b.n	8002c6c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff ff66 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff ff65 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
 8002d40:	e7ac      	b.n	8002c9c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff ff5f 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7ff ff5e 	bl	8002c0a <HAL_TIM_PWM_PulseFinishedCallback>
 8002d4e:	e7bd      	b.n	8002ccc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d50:	f06f 0201 	mvn.w	r2, #1
 8002d54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fe fb88 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
 8002d5c:	e7c1      	b.n	8002ce2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d5e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 f9d8 	bl	800311a <HAL_TIMEx_BreakCallback>
 8002d6a:	e7c3      	b.n	8002cf4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d70:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff ff4a 	bl	8002c0c <HAL_TIM_TriggerCallback>
 8002d78:	e7c5      	b.n	8002d06 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d7a:	f06f 0220 	mvn.w	r2, #32
 8002d7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f000 f9c9 	bl	8003118 <HAL_TIMEx_CommutCallback>
}
 8002d86:	e7c7      	b.n	8002d18 <HAL_TIM_IRQHandler+0x10a>

08002d88 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002d88:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8a:	4a30      	ldr	r2, [pc, #192]	@ (8002e4c <TIM_Base_SetConfig+0xc4>)
 8002d8c:	4290      	cmp	r0, r2
 8002d8e:	d012      	beq.n	8002db6 <TIM_Base_SetConfig+0x2e>
 8002d90:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0x2e>
 8002d96:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0x2e>
 8002d9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002da2:	4290      	cmp	r0, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0x2e>
 8002da6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002daa:	4290      	cmp	r0, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0x2e>
 8002dae:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002db2:	4290      	cmp	r0, r2
 8002db4:	d103      	bne.n	8002dbe <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dba:	684a      	ldr	r2, [r1, #4]
 8002dbc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <TIM_Base_SetConfig+0xc4>)
 8002dc0:	4290      	cmp	r0, r2
 8002dc2:	d02a      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dc4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002dc8:	d027      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dca:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002dce:	4290      	cmp	r0, r2
 8002dd0:	d023      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dd6:	4290      	cmp	r0, r2
 8002dd8:	d01f      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dde:	4290      	cmp	r0, r2
 8002de0:	d01b      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002de2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002de6:	4290      	cmp	r0, r2
 8002de8:	d017      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dea:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002dee:	4290      	cmp	r0, r2
 8002df0:	d013      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002df2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002df6:	4290      	cmp	r0, r2
 8002df8:	d00f      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002dfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dfe:	4290      	cmp	r0, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002e02:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002e06:	4290      	cmp	r0, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002e0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e0e:	4290      	cmp	r0, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0x92>
 8002e12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e16:	4290      	cmp	r0, r2
 8002e18:	d103      	bne.n	8002e22 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1e:	68ca      	ldr	r2, [r1, #12]
 8002e20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e26:	694a      	ldr	r2, [r1, #20]
 8002e28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	688b      	ldr	r3, [r1, #8]
 8002e2e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e30:	680b      	ldr	r3, [r1, #0]
 8002e32:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <TIM_Base_SetConfig+0xc4>)
 8002e36:	4298      	cmp	r0, r3
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0xba>
 8002e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e3e:	4298      	cmp	r0, r3
 8002e40:	d101      	bne.n	8002e46 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002e42:	690b      	ldr	r3, [r1, #16]
 8002e44:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e46:	2301      	movs	r3, #1
 8002e48:	6143      	str	r3, [r0, #20]
}
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000

08002e50 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002e50:	b340      	cbz	r0, 8002ea4 <HAL_TIM_PWM_Init+0x54>
{
 8002e52:	b510      	push	{r4, lr}
 8002e54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e5a:	b1f3      	cbz	r3, 8002e9a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	4621      	mov	r1, r4
 8002e64:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e68:	f7ff ff8e 	bl	8002d88 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002e76:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e7a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e8a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e8e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002e96:	2000      	movs	r0, #0
}
 8002e98:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002e9e:	f7ff feb1 	bl	8002c04 <HAL_TIM_PWM_MspInit>
 8002ea2:	e7db      	b.n	8002e5c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
}
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_OC2_SetConfig>:
{
 8002ea8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eaa:	6a03      	ldr	r3, [r0, #32]
 8002eac:	f023 0310 	bic.w	r3, r3, #16
 8002eb0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002eb2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002eb4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002eb6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	680d      	ldr	r5, [r1, #0]
 8002ebe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002ec2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ec6:	688d      	ldr	r5, [r1, #8]
 8002ec8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ecc:	4d11      	ldr	r5, [pc, #68]	@ (8002f14 <TIM_OC2_SetConfig+0x6c>)
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	d003      	beq.n	8002eda <TIM_OC2_SetConfig+0x32>
 8002ed2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002ed6:	42a8      	cmp	r0, r5
 8002ed8:	d106      	bne.n	8002ee8 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ede:	68cd      	ldr	r5, [r1, #12]
 8002ee0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee8:	4d0a      	ldr	r5, [pc, #40]	@ (8002f14 <TIM_OC2_SetConfig+0x6c>)
 8002eea:	42a8      	cmp	r0, r5
 8002eec:	d003      	beq.n	8002ef6 <TIM_OC2_SetConfig+0x4e>
 8002eee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002ef2:	42a8      	cmp	r0, r5
 8002ef4:	d107      	bne.n	8002f06 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ef6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002efa:	694d      	ldr	r5, [r1, #20]
 8002efc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f00:	698d      	ldr	r5, [r1, #24]
 8002f02:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002f06:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f08:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f0a:	684a      	ldr	r2, [r1, #4]
 8002f0c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002f0e:	6203      	str	r3, [r0, #32]
}
 8002f10:	bc30      	pop	{r4, r5}
 8002f12:	4770      	bx	lr
 8002f14:	40010000 	.word	0x40010000

08002f18 <HAL_TIM_PWM_ConfigChannel>:
{
 8002f18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002f1a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d066      	beq.n	8002ff0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	2301      	movs	r3, #1
 8002f28:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002f2c:	2a0c      	cmp	r2, #12
 8002f2e:	d85a      	bhi.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8002f30:	e8df f002 	tbb	[pc, r2]
 8002f34:	59595907 	.word	0x59595907
 8002f38:	5959591b 	.word	0x5959591b
 8002f3c:	59595930 	.word	0x59595930
 8002f40:	44          	.byte	0x44
 8002f41:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f42:	6800      	ldr	r0, [r0, #0]
 8002f44:	f7ff fd88 	bl	8002a58 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	6993      	ldr	r3, [r2, #24]
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6993      	ldr	r3, [r2, #24]
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	6993      	ldr	r3, [r2, #24]
 8002f60:	6929      	ldr	r1, [r5, #16]
 8002f62:	430b      	orrs	r3, r1
 8002f64:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2000      	movs	r0, #0
      break;
 8002f68:	e03e      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	f7ff ff9c 	bl	8002ea8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6993      	ldr	r3, [r2, #24]
 8002f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f78:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	6993      	ldr	r3, [r2, #24]
 8002f7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f82:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6993      	ldr	r3, [r2, #24]
 8002f88:	6929      	ldr	r1, [r5, #16]
 8002f8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f8e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2000      	movs	r0, #0
      break;
 8002f92:	e029      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f94:	6800      	ldr	r0, [r0, #0]
 8002f96:	f7ff fd97 	bl	8002ac8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	69d3      	ldr	r3, [r2, #28]
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	69d3      	ldr	r3, [r2, #28]
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	69d3      	ldr	r3, [r2, #28]
 8002fb2:	6929      	ldr	r1, [r5, #16]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2000      	movs	r0, #0
      break;
 8002fba:	e015      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fbc:	6800      	ldr	r0, [r0, #0]
 8002fbe:	f7ff fdbb 	bl	8002b38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	69d3      	ldr	r3, [r2, #28]
 8002fc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	69d3      	ldr	r3, [r2, #28]
 8002fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fd4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	69d3      	ldr	r3, [r2, #28]
 8002fda:	6929      	ldr	r1, [r5, #16]
 8002fdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fe0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2000      	movs	r0, #0
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002fe6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	e7fc      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0xd6>

08002ff4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ff4:	f001 011f 	and.w	r1, r1, #31
 8002ff8:	f04f 0c01 	mov.w	ip, #1
 8002ffc:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003000:	6a03      	ldr	r3, [r0, #32]
 8003002:	ea23 030c 	bic.w	r3, r3, ip
 8003006:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003008:	6a03      	ldr	r3, [r0, #32]
 800300a:	408a      	lsls	r2, r1
 800300c:	4313      	orrs	r3, r2
 800300e:	6203      	str	r3, [r0, #32]
}
 8003010:	4770      	bx	lr
	...

08003014 <HAL_TIM_PWM_Start>:
{
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003018:	4608      	mov	r0, r1
 800301a:	2900      	cmp	r1, #0
 800301c:	d142      	bne.n	80030a4 <HAL_TIM_PWM_Start+0x90>
 800301e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	bf18      	it	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d16e      	bne.n	800310c <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302e:	2800      	cmp	r0, #0
 8003030:	d151      	bne.n	80030d6 <HAL_TIM_PWM_Start+0xc2>
 8003032:	2302      	movs	r3, #2
 8003034:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003038:	2201      	movs	r2, #1
 800303a:	4601      	mov	r1, r0
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	f7ff ffd9 	bl	8002ff4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	4a33      	ldr	r2, [pc, #204]	@ (8003114 <HAL_TIM_PWM_Start+0x100>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <HAL_TIM_PWM_Start+0x3e>
 800304a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800304e:	4293      	cmp	r3, r2
 8003050:	d103      	bne.n	800305a <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8003052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	@ (8003114 <HAL_TIM_PWM_Start+0x100>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d049      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d046      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003068:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800306c:	4293      	cmp	r3, r2
 800306e:	d042      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003070:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003074:	4293      	cmp	r3, r2
 8003076:	d03e      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003078:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800307c:	4293      	cmp	r3, r2
 800307e:	d03a      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003080:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003088:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800308c:	4293      	cmp	r3, r2
 800308e:	d032      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
 8003090:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003094:	4293      	cmp	r3, r2
 8003096:	d02e      	beq.n	80030f6 <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
 80030a2:	e032      	b.n	800310a <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a4:	2904      	cmp	r1, #4
 80030a6:	d008      	beq.n	80030ba <HAL_TIM_PWM_Start+0xa6>
 80030a8:	2908      	cmp	r1, #8
 80030aa:	d00d      	beq.n	80030c8 <HAL_TIM_PWM_Start+0xb4>
 80030ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	bf18      	it	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	e7b7      	b.n	800302a <HAL_TIM_PWM_Start+0x16>
 80030ba:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	bf18      	it	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	e7b0      	b.n	800302a <HAL_TIM_PWM_Start+0x16>
 80030c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	bf18      	it	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	e7a9      	b.n	800302a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d6:	2804      	cmp	r0, #4
 80030d8:	d005      	beq.n	80030e6 <HAL_TIM_PWM_Start+0xd2>
 80030da:	2808      	cmp	r0, #8
 80030dc:	d007      	beq.n	80030ee <HAL_TIM_PWM_Start+0xda>
 80030de:	2302      	movs	r3, #2
 80030e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80030e4:	e7a8      	b.n	8003038 <HAL_TIM_PWM_Start+0x24>
 80030e6:	2302      	movs	r3, #2
 80030e8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80030ec:	e7a4      	b.n	8003038 <HAL_TIM_PWM_Start+0x24>
 80030ee:	2302      	movs	r3, #2
 80030f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80030f4:	e7a0      	b.n	8003038 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fc:	2a06      	cmp	r2, #6
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003108:	2000      	movs	r0, #0
}
 800310a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800310c:	2001      	movs	r0, #1
 800310e:	e7fc      	b.n	800310a <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 8003110:	2000      	movs	r0, #0
 8003112:	e7fa      	b.n	800310a <HAL_TIM_PWM_Start+0xf6>
 8003114:	40010000 	.word	0x40010000

08003118 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003118:	4770      	bx	lr

0800311a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311a:	4770      	bx	lr

0800311c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	f102 030c 	add.w	r3, r2, #12
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	320c      	adds	r2, #12
 800312c:	e842 3100 	strex	r1, r3, [r2]
 8003130:	2900      	cmp	r1, #0
 8003132:	d1f3      	bne.n	800311c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003134:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	f102 0314 	add.w	r3, r2, #20
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	3214      	adds	r2, #20
 8003144:	e842 3100 	strex	r1, r3, [r2]
 8003148:	2900      	cmp	r1, #0
 800314a:	d1f3      	bne.n	8003134 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800314e:	2b01      	cmp	r3, #1
 8003150:	d005      	beq.n	800315e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003152:	2320      	movs	r3, #32
 8003154:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	2300      	movs	r3, #0
 800315a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800315c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	f102 030c 	add.w	r3, r2, #12
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	320c      	adds	r2, #12
 800316e:	e842 3100 	strex	r1, r3, [r2]
 8003172:	2900      	cmp	r1, #0
 8003174:	d1f3      	bne.n	800315e <UART_EndRxTransfer+0x42>
 8003176:	e7ec      	b.n	8003152 <UART_EndRxTransfer+0x36>

08003178 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003178:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b21      	cmp	r3, #33	@ 0x21
 8003180:	d001      	beq.n	8003186 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003182:	2002      	movs	r0, #2
  }
}
 8003184:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003186:	6883      	ldr	r3, [r0, #8]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318c:	d017      	beq.n	80031be <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800318e:	6a03      	ldr	r3, [r0, #32]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	6202      	str	r2, [r0, #32]
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800319a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80031a4:	b94b      	cbnz	r3, 80031ba <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a6:	6802      	ldr	r2, [r0, #0]
 80031a8:	68d3      	ldr	r3, [r2, #12]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b0:	6802      	ldr	r2, [r0, #0]
 80031b2:	68d3      	ldr	r3, [r2, #12]
 80031b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031be:	6903      	ldr	r3, [r0, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e4      	bne.n	800318e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031c4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	6802      	ldr	r2, [r0, #0]
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80031d0:	6a03      	ldr	r3, [r0, #32]
 80031d2:	3302      	adds	r3, #2
 80031d4:	6203      	str	r3, [r0, #32]
 80031d6:	e7e0      	b.n	800319a <UART_Transmit_IT+0x22>

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	6913      	ldr	r3, [r2, #16]
 80031e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031e4:	68c1      	ldr	r1, [r0, #12]
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ea:	6883      	ldr	r3, [r0, #8]
 80031ec:	6902      	ldr	r2, [r0, #16]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	6943      	ldr	r3, [r0, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	69c3      	ldr	r3, [r0, #28]
 80031f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80031f8:	6801      	ldr	r1, [r0, #0]
 80031fa:	68cb      	ldr	r3, [r1, #12]
 80031fc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003200:	f023 030c 	bic.w	r3, r3, #12
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003208:	6802      	ldr	r2, [r0, #0]
 800320a:	6953      	ldr	r3, [r2, #20]
 800320c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003210:	6981      	ldr	r1, [r0, #24]
 8003212:	430b      	orrs	r3, r1
 8003214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	4a31      	ldr	r2, [pc, #196]	@ (80032e0 <UART_SetConfig+0x108>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d006      	beq.n	800322c <UART_SetConfig+0x54>
 800321e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003222:	4293      	cmp	r3, r2
 8003224:	d002      	beq.n	800322c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff fbf7 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800322a:	e001      	b.n	8003230 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7ff fc04 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003230:	69e3      	ldr	r3, [r4, #28]
 8003232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003236:	d029      	beq.n	800328c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003238:	2100      	movs	r1, #0
 800323a:	1803      	adds	r3, r0, r0
 800323c:	4149      	adcs	r1, r1
 800323e:	181b      	adds	r3, r3, r0
 8003240:	f141 0100 	adc.w	r1, r1, #0
 8003244:	00c9      	lsls	r1, r1, #3
 8003246:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1818      	adds	r0, r3, r0
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003254:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003258:	f141 0100 	adc.w	r1, r1, #0
 800325c:	f7fc ff94 	bl	8000188 <__aeabi_uldivmod>
 8003260:	4a20      	ldr	r2, [pc, #128]	@ (80032e4 <UART_SetConfig+0x10c>)
 8003262:	fba2 3100 	umull	r3, r1, r2, r0
 8003266:	0949      	lsrs	r1, r1, #5
 8003268:	2364      	movs	r3, #100	@ 0x64
 800326a:	fb03 0311 	mls	r3, r3, r1, r0
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	3332      	adds	r3, #50	@ 0x32
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800327c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	6821      	ldr	r1, [r4, #0]
 8003286:	4413      	add	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }
}
 800328a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800328c:	2300      	movs	r3, #0
 800328e:	1802      	adds	r2, r0, r0
 8003290:	eb43 0103 	adc.w	r1, r3, r3
 8003294:	1812      	adds	r2, r2, r0
 8003296:	f141 0100 	adc.w	r1, r1, #0
 800329a:	00c9      	lsls	r1, r1, #3
 800329c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032a0:	00d2      	lsls	r2, r2, #3
 80032a2:	1810      	adds	r0, r2, r0
 80032a4:	f141 0100 	adc.w	r1, r1, #0
 80032a8:	6862      	ldr	r2, [r4, #4]
 80032aa:	1892      	adds	r2, r2, r2
 80032ac:	415b      	adcs	r3, r3
 80032ae:	f7fc ff6b 	bl	8000188 <__aeabi_uldivmod>
 80032b2:	4a0c      	ldr	r2, [pc, #48]	@ (80032e4 <UART_SetConfig+0x10c>)
 80032b4:	fba2 3100 	umull	r3, r1, r2, r0
 80032b8:	0949      	lsrs	r1, r1, #5
 80032ba:	2364      	movs	r3, #100	@ 0x64
 80032bc:	fb03 0311 	mls	r3, r3, r1, r0
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	3332      	adds	r3, #50	@ 0x32
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	005a      	lsls	r2, r3, #1
 80032cc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80032d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	6821      	ldr	r1, [r4, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
 80032de:	e7d4      	b.n	800328a <UART_SetConfig+0xb2>
 80032e0:	40011000 	.word	0x40011000
 80032e4:	51eb851f 	.word	0x51eb851f

080032e8 <UART_WaitOnFlagUntilTimeout>:
{
 80032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ec:	4605      	mov	r5, r0
 80032ee:	460f      	mov	r7, r1
 80032f0:	4616      	mov	r6, r2
 80032f2:	4699      	mov	r9, r3
 80032f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	ea37 0404 	bics.w	r4, r7, r4
 8003300:	bf0c      	ite	eq
 8003302:	2401      	moveq	r4, #1
 8003304:	2400      	movne	r4, #0
 8003306:	42b4      	cmp	r4, r6
 8003308:	d12d      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 800330a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800330e:	d0f3      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003310:	f1b8 0f00 	cmp.w	r8, #0
 8003314:	d005      	beq.n	8003322 <UART_WaitOnFlagUntilTimeout+0x3a>
 8003316:	f7fe fbbd 	bl	8001a94 <HAL_GetTick>
 800331a:	eba0 0009 	sub.w	r0, r0, r9
 800331e:	4540      	cmp	r0, r8
 8003320:	d9ea      	bls.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003322:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	f102 030c 	add.w	r3, r2, #12
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	320c      	adds	r2, #12
 8003332:	e842 3100 	strex	r1, r3, [r2]
 8003336:	2900      	cmp	r1, #0
 8003338:	d1f3      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	f102 0314 	add.w	r3, r2, #20
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	3214      	adds	r2, #20
 800334a:	e842 3100 	strex	r1, r3, [r2]
 800334e:	2900      	cmp	r1, #0
 8003350:	d1f3      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8003352:	2320      	movs	r3, #32
 8003354:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003358:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 800335c:	2300      	movs	r3, #0
 800335e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_TIMEOUT;
 8003362:	2003      	movs	r0, #3
 8003364:	e000      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8003366:	2000      	movs	r0, #0
}
 8003368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800336c <HAL_UART_Init>:
  if (huart == NULL)
 800336c:	b358      	cbz	r0, 80033c6 <HAL_UART_Init+0x5a>
{
 800336e:	b510      	push	{r4, lr}
 8003370:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003372:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003376:	b30b      	cbz	r3, 80033bc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	2324      	movs	r3, #36	@ 0x24
 800337a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	68d3      	ldr	r3, [r2, #12]
 8003382:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003386:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff ff25 	bl	80031d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	6913      	ldr	r3, [r2, #16]
 8003392:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003396:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	6953      	ldr	r3, [r2, #20]
 800339c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80033a0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	68d3      	ldr	r3, [r2, #12]
 80033a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033aa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	2000      	movs	r0, #0
 80033ae:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b0:	2320      	movs	r3, #32
 80033b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 80033ba:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80033bc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 80033c0:	f7fe ffcc 	bl	800235c <HAL_UART_MspInit>
 80033c4:	e7d8      	b.n	8003378 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
}
 80033c8:	4770      	bx	lr

080033ca <HAL_UART_Transmit>:
{
 80033ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80033d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d154      	bne.n	8003486 <HAL_UART_Transmit+0xbc>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
 80033e0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d053      	beq.n	800348e <HAL_UART_Transmit+0xc4>
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	d053      	beq.n	8003492 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80033ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d051      	beq.n	8003496 <HAL_UART_Transmit+0xcc>
 80033f2:	2301      	movs	r3, #1
 80033f4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fc:	2321      	movs	r3, #33	@ 0x21
 80033fe:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 8003402:	f7fe fb47 	bl	8001a94 <HAL_GetTick>
 8003406:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003408:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800340c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68a3      	ldr	r3, [r4, #8]
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	d005      	beq.n	8003424 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8003418:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800341c:	2300      	movs	r3, #0
 800341e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 8003422:	e012      	b.n	800344a <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	b113      	cbz	r3, 800342e <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8003428:	f04f 0800 	mov.w	r8, #0
 800342c:	e7f6      	b.n	800341c <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 800342e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003430:	2500      	movs	r5, #0
 8003432:	e7f3      	b.n	800341c <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003434:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003440:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003442:	b292      	uxth	r2, r2
 8003444:	3a01      	subs	r2, #1
 8003446:	b292      	uxth	r2, r2
 8003448:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800344a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800344c:	b29b      	uxth	r3, r3
 800344e:	b173      	cbz	r3, 800346e <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003450:	9600      	str	r6, [sp, #0]
 8003452:	463b      	mov	r3, r7
 8003454:	2200      	movs	r2, #0
 8003456:	2180      	movs	r1, #128	@ 0x80
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ff45 	bl	80032e8 <UART_WaitOnFlagUntilTimeout>
 800345e:	b9e0      	cbnz	r0, 800349a <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8003460:	2d00      	cmp	r5, #0
 8003462:	d0e7      	beq.n	8003434 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003464:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800346c:	e7e8      	b.n	8003440 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	9600      	str	r6, [sp, #0]
 8003470:	463b      	mov	r3, r7
 8003472:	2200      	movs	r2, #0
 8003474:	2140      	movs	r1, #64	@ 0x40
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff ff36 	bl	80032e8 <UART_WaitOnFlagUntilTimeout>
 800347c:	b978      	cbnz	r0, 800349e <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800347e:	2320      	movs	r3, #32
 8003480:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 8003484:	e000      	b.n	8003488 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8003486:	2002      	movs	r0, #2
}
 8003488:	b002      	add	sp, #8
 800348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800348e:	2001      	movs	r0, #1
 8003490:	e7fa      	b.n	8003488 <HAL_UART_Transmit+0xbe>
 8003492:	2001      	movs	r0, #1
 8003494:	e7f8      	b.n	8003488 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8003496:	2002      	movs	r0, #2
 8003498:	e7f6      	b.n	8003488 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
 800349c:	e7f4      	b.n	8003488 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 800349e:	2003      	movs	r0, #3
 80034a0:	e7f2      	b.n	8003488 <HAL_UART_Transmit+0xbe>

080034a2 <HAL_UART_TxCpltCallback>:
}
 80034a2:	4770      	bx	lr

080034a4 <UART_EndTransmit_IT>:
{
 80034a4:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034a6:	6801      	ldr	r1, [r0, #0]
 80034a8:	68ca      	ldr	r2, [r1, #12]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ae:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	2220      	movs	r2, #32
 80034b2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  HAL_UART_TxCpltCallback(huart);
 80034b6:	f7ff fff4 	bl	80034a2 <HAL_UART_TxCpltCallback>
}
 80034ba:	2000      	movs	r0, #0
 80034bc:	bd08      	pop	{r3, pc}

080034be <HAL_UART_ErrorCallback>:
}
 80034be:	4770      	bx	lr

080034c0 <UART_DMAAbortOnError>:
{
 80034c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034c8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80034ca:	f7ff fff8 	bl	80034be <HAL_UART_ErrorCallback>
}
 80034ce:	bd08      	pop	{r3, pc}

080034d0 <HAL_UARTEx_RxEventCallback>:
}
 80034d0:	4770      	bx	lr

080034d2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034d2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b22      	cmp	r3, #34	@ 0x22
 80034da:	d167      	bne.n	80035ac <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	6883      	ldr	r3, [r0, #8]
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e2:	d04d      	beq.n	8003580 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034e4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	d004      	beq.n	80034f6 <UART_Receive_IT+0x24>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d154      	bne.n	800359a <UART_Receive_IT+0xc8>
 80034f0:	6903      	ldr	r3, [r0, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d151      	bne.n	800359a <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034f6:	6803      	ldr	r3, [r0, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80034fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80034fe:	3301      	adds	r3, #1
 8003500:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003502:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800350c:	2b00      	cmp	r3, #0
 800350e:	d14f      	bne.n	80035b0 <UART_Receive_IT+0xde>
{
 8003510:	b500      	push	{lr}
 8003512:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003514:	6802      	ldr	r2, [r0, #0]
 8003516:	68d3      	ldr	r3, [r2, #12]
 8003518:	f023 0320 	bic.w	r3, r3, #32
 800351c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	68d3      	ldr	r3, [r2, #12]
 8003522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003526:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003528:	6802      	ldr	r2, [r0, #0]
 800352a:	6953      	ldr	r3, [r2, #20]
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003532:	2320      	movs	r3, #32
 8003534:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800353a:	2b01      	cmp	r3, #1
 800353c:	d133      	bne.n	80035a6 <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	2300      	movs	r3, #0
 8003540:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003542:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	f102 030c 	add.w	r3, r2, #12
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	320c      	adds	r2, #12
 8003552:	e842 3100 	strex	r1, r3, [r2]
 8003556:	2900      	cmp	r1, #0
 8003558:	d1f3      	bne.n	8003542 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800355a:	6803      	ldr	r3, [r0, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f012 0f10 	tst.w	r2, #16
 8003562:	d006      	beq.n	8003572 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003564:	2200      	movs	r2, #0
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	9201      	str	r2, [sp, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003572:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003574:	f7ff ffac 	bl	80034d0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003578:	2000      	movs	r0, #0
}
 800357a:	b003      	add	sp, #12
 800357c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	6902      	ldr	r2, [r0, #16]
 8003582:	2a00      	cmp	r2, #0
 8003584:	d1ae      	bne.n	80034e4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003586:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003592:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003594:	3302      	adds	r3, #2
 8003596:	6283      	str	r3, [r0, #40]	@ 0x28
 8003598:	e7b3      	b.n	8003502 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a2:	7013      	strb	r3, [r2, #0]
 80035a4:	e7aa      	b.n	80034fc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80035a6:	f7fe f80b 	bl	80015c0 <HAL_UART_RxCpltCallback>
 80035aa:	e7e5      	b.n	8003578 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 80035ac:	2002      	movs	r0, #2
 80035ae:	4770      	bx	lr
    return HAL_OK;
 80035b0:	2000      	movs	r0, #0
}
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_IRQHandler>:
{
 80035b4:	b510      	push	{r4, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035ba:	6802      	ldr	r2, [r0, #0]
 80035bc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035be:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80035c2:	f013 0f0f 	tst.w	r3, #15
 80035c6:	d109      	bne.n	80035dc <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035c8:	f013 0f20 	tst.w	r3, #32
 80035cc:	d00c      	beq.n	80035e8 <HAL_UART_IRQHandler+0x34>
 80035ce:	f010 0f20 	tst.w	r0, #32
 80035d2:	d009      	beq.n	80035e8 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff ff7c 	bl	80034d2 <UART_Receive_IT>
      return;
 80035da:	e016      	b.n	800360a <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035dc:	f011 0101 	ands.w	r1, r1, #1
 80035e0:	d115      	bne.n	800360e <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035e2:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80035e6:	d112      	bne.n	800360e <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80035ea:	2901      	cmp	r1, #1
 80035ec:	d079      	beq.n	80036e2 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035f2:	d003      	beq.n	80035fc <HAL_UART_IRQHandler+0x48>
 80035f4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80035f8:	f040 8110 	bne.w	800381c <HAL_UART_IRQHandler+0x268>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035fc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003600:	d003      	beq.n	800360a <HAL_UART_IRQHandler+0x56>
 8003602:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003606:	f040 810d 	bne.w	8003824 <HAL_UART_IRQHandler+0x270>
}
 800360a:	b002      	add	sp, #8
 800360c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800360e:	f013 0f01 	tst.w	r3, #1
 8003612:	d006      	beq.n	8003622 <HAL_UART_IRQHandler+0x6e>
 8003614:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003618:	d003      	beq.n	8003622 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003622:	f013 0f04 	tst.w	r3, #4
 8003626:	d004      	beq.n	8003632 <HAL_UART_IRQHandler+0x7e>
 8003628:	b119      	cbz	r1, 8003632 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800362c:	f042 0202 	orr.w	r2, r2, #2
 8003630:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003632:	f013 0f02 	tst.w	r3, #2
 8003636:	d004      	beq.n	8003642 <HAL_UART_IRQHandler+0x8e>
 8003638:	b119      	cbz	r1, 8003642 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800363a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800363c:	f042 0204 	orr.w	r2, r2, #4
 8003640:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003642:	f013 0f08 	tst.w	r3, #8
 8003646:	d007      	beq.n	8003658 <HAL_UART_IRQHandler+0xa4>
 8003648:	f010 0f20 	tst.w	r0, #32
 800364c:	d100      	bne.n	8003650 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800364e:	b119      	cbz	r1, 8003658 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003650:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003652:	f042 0208 	orr.w	r2, r2, #8
 8003656:	6422      	str	r2, [r4, #64]	@ 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003658:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800365a:	2a00      	cmp	r2, #0
 800365c:	d0d5      	beq.n	800360a <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	f013 0f20 	tst.w	r3, #32
 8003662:	d002      	beq.n	800366a <HAL_UART_IRQHandler+0xb6>
 8003664:	f010 0f20 	tst.w	r0, #32
 8003668:	d129      	bne.n	80036be <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003672:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003674:	f012 0f08 	tst.w	r2, #8
 8003678:	d100      	bne.n	800367c <HAL_UART_IRQHandler+0xc8>
 800367a:	b363      	cbz	r3, 80036d6 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff fd4d 	bl	800311c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800368a:	d020      	beq.n	80036ce <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	f102 0314 	add.w	r3, r2, #20
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	3214      	adds	r2, #20
 800369c:	e842 3100 	strex	r1, r3, [r2]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d1f3      	bne.n	800368c <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80036a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036a6:	b173      	cbz	r3, 80036c6 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a8:	4a60      	ldr	r2, [pc, #384]	@ (800382c <HAL_UART_IRQHandler+0x278>)
 80036aa:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80036ae:	f7fe fc2a 	bl	8001f06 <HAL_DMA_Abort_IT>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d0a9      	beq.n	800360a <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80036b8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80036ba:	4798      	blx	r3
 80036bc:	e7a5      	b.n	800360a <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff ff07 	bl	80034d2 <UART_Receive_IT>
 80036c4:	e7d1      	b.n	800366a <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fef9 	bl	80034be <HAL_UART_ErrorCallback>
 80036cc:	e79d      	b.n	800360a <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff fef5 	bl	80034be <HAL_UART_ErrorCallback>
 80036d4:	e799      	b.n	800360a <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fef1 	bl	80034be <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	6423      	str	r3, [r4, #64]	@ 0x40
    return;
 80036e0:	e793      	b.n	800360a <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036e2:	f013 0f10 	tst.w	r3, #16
 80036e6:	d082      	beq.n	80035ee <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036e8:	f010 0f10 	tst.w	r0, #16
 80036ec:	f43f af7f 	beq.w	80035ee <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f0:	2300      	movs	r3, #0
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	6853      	ldr	r3, [r2, #4]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fe:	6953      	ldr	r3, [r2, #20]
 8003700:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003704:	d050      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003706:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800370e:	2b00      	cmp	r3, #0
 8003710:	f43f af7b 	beq.w	800360a <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003714:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003716:	4299      	cmp	r1, r3
 8003718:	f67f af77 	bls.w	800360a <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 800371c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371e:	69d3      	ldr	r3, [r2, #28]
 8003720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003724:	d037      	beq.n	8003796 <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003726:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	f102 030c 	add.w	r3, r2, #12
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	320c      	adds	r2, #12
 8003736:	e842 3100 	strex	r1, r3, [r2]
 800373a:	2900      	cmp	r1, #0
 800373c:	d1f3      	bne.n	8003726 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f102 0314 	add.w	r3, r2, #20
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	3214      	adds	r2, #20
 800374e:	e842 3100 	strex	r1, r3, [r2]
 8003752:	2900      	cmp	r1, #0
 8003754:	d1f3      	bne.n	800373e <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003756:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	f102 0314 	add.w	r3, r2, #20
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	3214      	adds	r2, #20
 8003766:	e842 3100 	strex	r1, r3, [r2]
 800376a:	2900      	cmp	r1, #0
 800376c:	d1f3      	bne.n	8003756 <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 800376e:	2320      	movs	r3, #32
 8003770:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	2300      	movs	r3, #0
 8003776:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003778:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	f102 030c 	add.w	r3, r2, #12
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	320c      	adds	r2, #12
 8003788:	e842 3100 	strex	r1, r3, [r2]
 800378c:	2900      	cmp	r1, #0
 800378e:	d1f3      	bne.n	8003778 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003790:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003792:	f7fe fb6e 	bl	8001e72 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003796:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003798:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800379a:	b29b      	uxth	r3, r3
 800379c:	1ac9      	subs	r1, r1, r3
 800379e:	b289      	uxth	r1, r1
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff fe95 	bl	80034d0 <HAL_UARTEx_RxEventCallback>
      return;
 80037a6:	e730      	b.n	800360a <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037a8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80037aa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	1ac9      	subs	r1, r1, r3
 80037b0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80037b2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f43f af27 	beq.w	800360a <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80037bc:	2900      	cmp	r1, #0
 80037be:	f43f af24 	beq.w	800360a <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	f102 030c 	add.w	r3, r2, #12
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	320c      	adds	r2, #12
 80037d2:	e842 3000 	strex	r0, r3, [r2]
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d1f3      	bne.n	80037c2 <HAL_UART_IRQHandler+0x20e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	f102 0314 	add.w	r3, r2, #20
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	3214      	adds	r2, #20
 80037ea:	e842 3000 	strex	r0, r3, [r2]
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d1f3      	bne.n	80037da <HAL_UART_IRQHandler+0x226>
        huart->RxState = HAL_UART_STATE_READY;
 80037f2:	2320      	movs	r3, #32
 80037f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	2300      	movs	r3, #0
 80037fa:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	f102 030c 	add.w	r3, r2, #12
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	320c      	adds	r2, #12
 800380c:	e842 3000 	strex	r0, r3, [r2]
 8003810:	2800      	cmp	r0, #0
 8003812:	d1f3      	bne.n	80037fc <HAL_UART_IRQHandler+0x248>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff fe5b 	bl	80034d0 <HAL_UARTEx_RxEventCallback>
      return;
 800381a:	e6f6      	b.n	800360a <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff fcab 	bl	8003178 <UART_Transmit_IT>
    return;
 8003822:	e6f2      	b.n	800360a <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff fe3d 	bl	80034a4 <UART_EndTransmit_IT>
    return;
 800382a:	e6ee      	b.n	800360a <HAL_UART_IRQHandler+0x56>
 800382c:	080034c1 	.word	0x080034c1

08003830 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8003830:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003832:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003834:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	2300      	movs	r3, #0
 8003838:	6403      	str	r3, [r0, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800383a:	2222      	movs	r2, #34	@ 0x22
 800383c:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  __HAL_UNLOCK(huart);
 8003840:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003844:	6903      	ldr	r3, [r0, #16]
 8003846:	b123      	cbz	r3, 8003852 <UART_Start_Receive_IT+0x22>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	68d3      	ldr	r3, [r2, #12]
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003852:	6802      	ldr	r2, [r0, #0]
 8003854:	6953      	ldr	r3, [r2, #20]
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800385c:	6802      	ldr	r2, [r0, #0]
 800385e:	68d3      	ldr	r3, [r2, #12]
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	60d3      	str	r3, [r2, #12]
}
 8003866:	2000      	movs	r0, #0
 8003868:	4770      	bx	lr

0800386a <HAL_UART_Receive_IT>:
{
 800386a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800386c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d10d      	bne.n	8003892 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8003876:	b171      	cbz	r1, 8003896 <HAL_UART_Receive_IT+0x2c>
 8003878:	b17a      	cbz	r2, 800389a <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 800387a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d00d      	beq.n	800389e <HAL_UART_Receive_IT+0x34>
 8003882:	2301      	movs	r3, #1
 8003884:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	2300      	movs	r3, #0
 800388a:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800388c:	f7ff ffd0 	bl	8003830 <UART_Start_Receive_IT>
 8003890:	e000      	b.n	8003894 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8003892:	2002      	movs	r0, #2
}
 8003894:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8003896:	2001      	movs	r0, #1
 8003898:	e7fc      	b.n	8003894 <HAL_UART_Receive_IT+0x2a>
 800389a:	2001      	movs	r0, #1
 800389c:	e7fa      	b.n	8003894 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 800389e:	2002      	movs	r0, #2
 80038a0:	e7f8      	b.n	8003894 <HAL_UART_Receive_IT+0x2a>

080038a2 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <NMI_Handler>

080038a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <HardFault_Handler>

080038a6 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a6:	e7fe      	b.n	80038a6 <MemManage_Handler>

080038a8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <BusFault_Handler>

080038aa <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <UsageFault_Handler>

080038ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ac:	4770      	bx	lr

080038ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ae:	4770      	bx	lr

080038b0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b0:	4770      	bx	lr
	...

080038b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038b6:	4802      	ldr	r0, [pc, #8]	@ (80038c0 <USART2_IRQHandler+0xc>)
 80038b8:	f7ff fe7c 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038bc:	bd08      	pop	{r3, pc}
 80038be:	bf00      	nop
 80038c0:	200024b8 	.word	0x200024b8

080038c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038c6:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <TIM6_DAC_IRQHandler+0xc>)
 80038c8:	f7ff f9a1 	bl	8002c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038cc:	bd08      	pop	{r3, pc}
 80038ce:	bf00      	nop
 80038d0:	200024fc 	.word	0x200024fc

080038d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038d4:	4a03      	ldr	r2, [pc, #12]	@ (80038e4 <SystemInit+0x10>)
 80038d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80038da:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038ec:	480d      	ldr	r0, [pc, #52]	@ (8003924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038ee:	490e      	ldr	r1, [pc, #56]	@ (8003928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038f0:	4a0e      	ldr	r2, [pc, #56]	@ (800392c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f4:	e002      	b.n	80038fc <LoopCopyDataInit>

080038f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fa:	3304      	adds	r3, #4

080038fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003900:	d3f9      	bcc.n	80038f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003902:	4a0b      	ldr	r2, [pc, #44]	@ (8003930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003904:	4c0b      	ldr	r4, [pc, #44]	@ (8003934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003908:	e001      	b.n	800390e <LoopFillZerobss>

0800390a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800390c:	3204      	adds	r2, #4

0800390e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003910:	d3fb      	bcc.n	800390a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003912:	f7ff ffdf 	bl	80038d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003916:	f000 f819 	bl	800394c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391a:	f7fd fed7 	bl	80016cc <main>
  bx  lr    
 800391e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003928:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800392c:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 8003930:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003934:	20002548 	.word	0x20002548

08003938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC_IRQHandler>

0800393a <memset>:
 800393a:	4402      	add	r2, r0
 800393c:	4603      	mov	r3, r0
 800393e:	4293      	cmp	r3, r2
 8003940:	d100      	bne.n	8003944 <memset+0xa>
 8003942:	4770      	bx	lr
 8003944:	f803 1b01 	strb.w	r1, [r3], #1
 8003948:	e7f9      	b.n	800393e <memset+0x4>
	...

0800394c <__libc_init_array>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4d0d      	ldr	r5, [pc, #52]	@ (8003984 <__libc_init_array+0x38>)
 8003950:	4c0d      	ldr	r4, [pc, #52]	@ (8003988 <__libc_init_array+0x3c>)
 8003952:	1b64      	subs	r4, r4, r5
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	2600      	movs	r6, #0
 8003958:	42a6      	cmp	r6, r4
 800395a:	d109      	bne.n	8003970 <__libc_init_array+0x24>
 800395c:	4d0b      	ldr	r5, [pc, #44]	@ (800398c <__libc_init_array+0x40>)
 800395e:	4c0c      	ldr	r4, [pc, #48]	@ (8003990 <__libc_init_array+0x44>)
 8003960:	f000 f976 	bl	8003c50 <_init>
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	2600      	movs	r6, #0
 800396a:	42a6      	cmp	r6, r4
 800396c:	d105      	bne.n	800397a <__libc_init_array+0x2e>
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	f855 3b04 	ldr.w	r3, [r5], #4
 8003974:	4798      	blx	r3
 8003976:	3601      	adds	r6, #1
 8003978:	e7ee      	b.n	8003958 <__libc_init_array+0xc>
 800397a:	f855 3b04 	ldr.w	r3, [r5], #4
 800397e:	4798      	blx	r3
 8003980:	3601      	adds	r6, #1
 8003982:	e7f2      	b.n	800396a <__libc_init_array+0x1e>
 8003984:	08003da0 	.word	0x08003da0
 8003988:	08003da0 	.word	0x08003da0
 800398c:	08003da0 	.word	0x08003da0
 8003990:	08003da4 	.word	0x08003da4

08003994 <__udivmoddi4>:
 8003994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	9d08      	ldr	r5, [sp, #32]
 800399a:	460c      	mov	r4, r1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d14e      	bne.n	8003a3e <__udivmoddi4+0xaa>
 80039a0:	4694      	mov	ip, r2
 80039a2:	458c      	cmp	ip, r1
 80039a4:	4686      	mov	lr, r0
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	d962      	bls.n	8003a72 <__udivmoddi4+0xde>
 80039ac:	b14a      	cbz	r2, 80039c2 <__udivmoddi4+0x2e>
 80039ae:	f1c2 0320 	rsb	r3, r2, #32
 80039b2:	4091      	lsls	r1, r2
 80039b4:	fa20 f303 	lsr.w	r3, r0, r3
 80039b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80039bc:	4319      	orrs	r1, r3
 80039be:	fa00 fe02 	lsl.w	lr, r0, r2
 80039c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80039c6:	fa1f f68c 	uxth.w	r6, ip
 80039ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80039ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80039d2:	fb07 1114 	mls	r1, r7, r4, r1
 80039d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80039da:	fb04 f106 	mul.w	r1, r4, r6
 80039de:	4299      	cmp	r1, r3
 80039e0:	d90a      	bls.n	80039f8 <__udivmoddi4+0x64>
 80039e2:	eb1c 0303 	adds.w	r3, ip, r3
 80039e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80039ea:	f080 8112 	bcs.w	8003c12 <__udivmoddi4+0x27e>
 80039ee:	4299      	cmp	r1, r3
 80039f0:	f240 810f 	bls.w	8003c12 <__udivmoddi4+0x27e>
 80039f4:	3c02      	subs	r4, #2
 80039f6:	4463      	add	r3, ip
 80039f8:	1a59      	subs	r1, r3, r1
 80039fa:	fa1f f38e 	uxth.w	r3, lr
 80039fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8003a02:	fb07 1110 	mls	r1, r7, r0, r1
 8003a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003a0a:	fb00 f606 	mul.w	r6, r0, r6
 8003a0e:	429e      	cmp	r6, r3
 8003a10:	d90a      	bls.n	8003a28 <__udivmoddi4+0x94>
 8003a12:	eb1c 0303 	adds.w	r3, ip, r3
 8003a16:	f100 31ff 	add.w	r1, r0, #4294967295
 8003a1a:	f080 80fc 	bcs.w	8003c16 <__udivmoddi4+0x282>
 8003a1e:	429e      	cmp	r6, r3
 8003a20:	f240 80f9 	bls.w	8003c16 <__udivmoddi4+0x282>
 8003a24:	4463      	add	r3, ip
 8003a26:	3802      	subs	r0, #2
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003a2e:	2100      	movs	r1, #0
 8003a30:	b11d      	cbz	r5, 8003a3a <__udivmoddi4+0xa6>
 8003a32:	40d3      	lsrs	r3, r2
 8003a34:	2200      	movs	r2, #0
 8003a36:	e9c5 3200 	strd	r3, r2, [r5]
 8003a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d905      	bls.n	8003a4e <__udivmoddi4+0xba>
 8003a42:	b10d      	cbz	r5, 8003a48 <__udivmoddi4+0xb4>
 8003a44:	e9c5 0100 	strd	r0, r1, [r5]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	e7f5      	b.n	8003a3a <__udivmoddi4+0xa6>
 8003a4e:	fab3 f183 	clz	r1, r3
 8003a52:	2900      	cmp	r1, #0
 8003a54:	d146      	bne.n	8003ae4 <__udivmoddi4+0x150>
 8003a56:	42a3      	cmp	r3, r4
 8003a58:	d302      	bcc.n	8003a60 <__udivmoddi4+0xcc>
 8003a5a:	4290      	cmp	r0, r2
 8003a5c:	f0c0 80f0 	bcc.w	8003c40 <__udivmoddi4+0x2ac>
 8003a60:	1a86      	subs	r6, r0, r2
 8003a62:	eb64 0303 	sbc.w	r3, r4, r3
 8003a66:	2001      	movs	r0, #1
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	d0e6      	beq.n	8003a3a <__udivmoddi4+0xa6>
 8003a6c:	e9c5 6300 	strd	r6, r3, [r5]
 8003a70:	e7e3      	b.n	8003a3a <__udivmoddi4+0xa6>
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	f040 8090 	bne.w	8003b98 <__udivmoddi4+0x204>
 8003a78:	eba1 040c 	sub.w	r4, r1, ip
 8003a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003a80:	fa1f f78c 	uxth.w	r7, ip
 8003a84:	2101      	movs	r1, #1
 8003a86:	fbb4 f6f8 	udiv	r6, r4, r8
 8003a8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003a8e:	fb08 4416 	mls	r4, r8, r6, r4
 8003a92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003a96:	fb07 f006 	mul.w	r0, r7, r6
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	d908      	bls.n	8003ab0 <__udivmoddi4+0x11c>
 8003a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8003aa2:	f106 34ff 	add.w	r4, r6, #4294967295
 8003aa6:	d202      	bcs.n	8003aae <__udivmoddi4+0x11a>
 8003aa8:	4298      	cmp	r0, r3
 8003aaa:	f200 80cd 	bhi.w	8003c48 <__udivmoddi4+0x2b4>
 8003aae:	4626      	mov	r6, r4
 8003ab0:	1a1c      	subs	r4, r3, r0
 8003ab2:	fa1f f38e 	uxth.w	r3, lr
 8003ab6:	fbb4 f0f8 	udiv	r0, r4, r8
 8003aba:	fb08 4410 	mls	r4, r8, r0, r4
 8003abe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003ac2:	fb00 f707 	mul.w	r7, r0, r7
 8003ac6:	429f      	cmp	r7, r3
 8003ac8:	d908      	bls.n	8003adc <__udivmoddi4+0x148>
 8003aca:	eb1c 0303 	adds.w	r3, ip, r3
 8003ace:	f100 34ff 	add.w	r4, r0, #4294967295
 8003ad2:	d202      	bcs.n	8003ada <__udivmoddi4+0x146>
 8003ad4:	429f      	cmp	r7, r3
 8003ad6:	f200 80b0 	bhi.w	8003c3a <__udivmoddi4+0x2a6>
 8003ada:	4620      	mov	r0, r4
 8003adc:	1bdb      	subs	r3, r3, r7
 8003ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003ae2:	e7a5      	b.n	8003a30 <__udivmoddi4+0x9c>
 8003ae4:	f1c1 0620 	rsb	r6, r1, #32
 8003ae8:	408b      	lsls	r3, r1
 8003aea:	fa22 f706 	lsr.w	r7, r2, r6
 8003aee:	431f      	orrs	r7, r3
 8003af0:	fa20 fc06 	lsr.w	ip, r0, r6
 8003af4:	fa04 f301 	lsl.w	r3, r4, r1
 8003af8:	ea43 030c 	orr.w	r3, r3, ip
 8003afc:	40f4      	lsrs	r4, r6
 8003afe:	fa00 f801 	lsl.w	r8, r0, r1
 8003b02:	0c38      	lsrs	r0, r7, #16
 8003b04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8003b08:	fbb4 fef0 	udiv	lr, r4, r0
 8003b0c:	fa1f fc87 	uxth.w	ip, r7
 8003b10:	fb00 441e 	mls	r4, r0, lr, r4
 8003b14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003b18:	fb0e f90c 	mul.w	r9, lr, ip
 8003b1c:	45a1      	cmp	r9, r4
 8003b1e:	fa02 f201 	lsl.w	r2, r2, r1
 8003b22:	d90a      	bls.n	8003b3a <__udivmoddi4+0x1a6>
 8003b24:	193c      	adds	r4, r7, r4
 8003b26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8003b2a:	f080 8084 	bcs.w	8003c36 <__udivmoddi4+0x2a2>
 8003b2e:	45a1      	cmp	r9, r4
 8003b30:	f240 8081 	bls.w	8003c36 <__udivmoddi4+0x2a2>
 8003b34:	f1ae 0e02 	sub.w	lr, lr, #2
 8003b38:	443c      	add	r4, r7
 8003b3a:	eba4 0409 	sub.w	r4, r4, r9
 8003b3e:	fa1f f983 	uxth.w	r9, r3
 8003b42:	fbb4 f3f0 	udiv	r3, r4, r0
 8003b46:	fb00 4413 	mls	r4, r0, r3, r4
 8003b4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003b4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8003b52:	45a4      	cmp	ip, r4
 8003b54:	d907      	bls.n	8003b66 <__udivmoddi4+0x1d2>
 8003b56:	193c      	adds	r4, r7, r4
 8003b58:	f103 30ff 	add.w	r0, r3, #4294967295
 8003b5c:	d267      	bcs.n	8003c2e <__udivmoddi4+0x29a>
 8003b5e:	45a4      	cmp	ip, r4
 8003b60:	d965      	bls.n	8003c2e <__udivmoddi4+0x29a>
 8003b62:	3b02      	subs	r3, #2
 8003b64:	443c      	add	r4, r7
 8003b66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8003b6a:	fba0 9302 	umull	r9, r3, r0, r2
 8003b6e:	eba4 040c 	sub.w	r4, r4, ip
 8003b72:	429c      	cmp	r4, r3
 8003b74:	46ce      	mov	lr, r9
 8003b76:	469c      	mov	ip, r3
 8003b78:	d351      	bcc.n	8003c1e <__udivmoddi4+0x28a>
 8003b7a:	d04e      	beq.n	8003c1a <__udivmoddi4+0x286>
 8003b7c:	b155      	cbz	r5, 8003b94 <__udivmoddi4+0x200>
 8003b7e:	ebb8 030e 	subs.w	r3, r8, lr
 8003b82:	eb64 040c 	sbc.w	r4, r4, ip
 8003b86:	fa04 f606 	lsl.w	r6, r4, r6
 8003b8a:	40cb      	lsrs	r3, r1
 8003b8c:	431e      	orrs	r6, r3
 8003b8e:	40cc      	lsrs	r4, r1
 8003b90:	e9c5 6400 	strd	r6, r4, [r5]
 8003b94:	2100      	movs	r1, #0
 8003b96:	e750      	b.n	8003a3a <__udivmoddi4+0xa6>
 8003b98:	f1c2 0320 	rsb	r3, r2, #32
 8003b9c:	fa20 f103 	lsr.w	r1, r0, r3
 8003ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8003ba4:	fa24 f303 	lsr.w	r3, r4, r3
 8003ba8:	4094      	lsls	r4, r2
 8003baa:	430c      	orrs	r4, r1
 8003bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003bb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8003bb4:	fa1f f78c 	uxth.w	r7, ip
 8003bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8003bbc:	fb08 3110 	mls	r1, r8, r0, r3
 8003bc0:	0c23      	lsrs	r3, r4, #16
 8003bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003bc6:	fb00 f107 	mul.w	r1, r0, r7
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	d908      	bls.n	8003be0 <__udivmoddi4+0x24c>
 8003bce:	eb1c 0303 	adds.w	r3, ip, r3
 8003bd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8003bd6:	d22c      	bcs.n	8003c32 <__udivmoddi4+0x29e>
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	d92a      	bls.n	8003c32 <__udivmoddi4+0x29e>
 8003bdc:	3802      	subs	r0, #2
 8003bde:	4463      	add	r3, ip
 8003be0:	1a5b      	subs	r3, r3, r1
 8003be2:	b2a4      	uxth	r4, r4
 8003be4:	fbb3 f1f8 	udiv	r1, r3, r8
 8003be8:	fb08 3311 	mls	r3, r8, r1, r3
 8003bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003bf0:	fb01 f307 	mul.w	r3, r1, r7
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d908      	bls.n	8003c0a <__udivmoddi4+0x276>
 8003bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8003bfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8003c00:	d213      	bcs.n	8003c2a <__udivmoddi4+0x296>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	d911      	bls.n	8003c2a <__udivmoddi4+0x296>
 8003c06:	3902      	subs	r1, #2
 8003c08:	4464      	add	r4, ip
 8003c0a:	1ae4      	subs	r4, r4, r3
 8003c0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003c10:	e739      	b.n	8003a86 <__udivmoddi4+0xf2>
 8003c12:	4604      	mov	r4, r0
 8003c14:	e6f0      	b.n	80039f8 <__udivmoddi4+0x64>
 8003c16:	4608      	mov	r0, r1
 8003c18:	e706      	b.n	8003a28 <__udivmoddi4+0x94>
 8003c1a:	45c8      	cmp	r8, r9
 8003c1c:	d2ae      	bcs.n	8003b7c <__udivmoddi4+0x1e8>
 8003c1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8003c22:	eb63 0c07 	sbc.w	ip, r3, r7
 8003c26:	3801      	subs	r0, #1
 8003c28:	e7a8      	b.n	8003b7c <__udivmoddi4+0x1e8>
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	e7ed      	b.n	8003c0a <__udivmoddi4+0x276>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	e799      	b.n	8003b66 <__udivmoddi4+0x1d2>
 8003c32:	4630      	mov	r0, r6
 8003c34:	e7d4      	b.n	8003be0 <__udivmoddi4+0x24c>
 8003c36:	46d6      	mov	lr, sl
 8003c38:	e77f      	b.n	8003b3a <__udivmoddi4+0x1a6>
 8003c3a:	4463      	add	r3, ip
 8003c3c:	3802      	subs	r0, #2
 8003c3e:	e74d      	b.n	8003adc <__udivmoddi4+0x148>
 8003c40:	4606      	mov	r6, r0
 8003c42:	4623      	mov	r3, r4
 8003c44:	4608      	mov	r0, r1
 8003c46:	e70f      	b.n	8003a68 <__udivmoddi4+0xd4>
 8003c48:	3e02      	subs	r6, #2
 8003c4a:	4463      	add	r3, ip
 8003c4c:	e730      	b.n	8003ab0 <__udivmoddi4+0x11c>
 8003c4e:	bf00      	nop

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
